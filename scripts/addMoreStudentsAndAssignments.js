const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

// Import models
const User = require('../src/models/User');
const Class = require('../src/models/class');
const Course = require('../src/models/Course');
const Assignment = require('../src/models/Assignment');
const Submission = require('../src/models/submission');
const Invoice = require('../src/models/Invoice');

// K·∫øt n·ªëi database
mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/Korea_DB', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

const TARGET_CLASS_ID = '687ec78caaf9af5e925a344e';

async function addMoreDemoData() {
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu th√™m 10 h·ªçc vi√™n v√† 10 b√†i t·∫≠p demo...');

        // 1. Ki·ªÉm tra l·ªõp h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
        const targetClass = await Class.findById(TARGET_CLASS_ID).populate('course');
        if (!targetClass) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc v·ªõi ID:', TARGET_CLASS_ID);
            return;
        }

        console.log('‚úÖ T√¨m th·∫•y l·ªõp h·ªçc:', targetClass.name);
        console.log('üìö Kh√≥a h·ªçc:', targetClass.course.title);

        // 2. T·∫°o 10 h·ªçc vi√™n demo m·ªõi
        const newDemoStudents = [
            {
                email: 'vuthihuong.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'V≈© Th·ªã H∆∞∆°ng',
                role: 'student',
                level: 'beginner',
                gender: 'female',
                dateOfBirth: new Date('1999-12-10'),
                phone: '0956789012',
                address: 'H√† N·ªôi',
                koreanLevel: 'TOPIK 1',
                learningGoal: 'L√†m vi·ªác t·∫°i H√†n Qu·ªëc',
                interests: ['K-beauty', 'K-food', 'Travel'],
                averageScore: 8.0,
                isActive: true,
                emailVerified: true
            },
            {
                email: 'tranvanduc.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'Tr·∫ßn VƒÉn ƒê·ª©c',
                role: 'student',
                level: 'intermediate',
                gender: 'male',
                dateOfBirth: new Date('1997-08-25'),
                phone: '0967890123',
                address: 'TP.HCM',
                koreanLevel: 'TOPIK 2',
                learningGoal: 'Thi l√™n TOPIK 4',
                interests: ['Technology', 'Korean History', 'Sports'],
                averageScore: 7.8,
                isActive: true,
                emailVerified: true
            },
            {
                email: 'lethilan.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'L√™ Th·ªã Lan',
                role: 'student',
                level: 'beginner',
                gender: 'female',
                dateOfBirth: new Date('2000-03-18'),
                phone: '0978901234',
                address: 'ƒê√† N·∫µng',
                koreanLevel: '',
                learningGoal: 'Xem phim H√†n kh√¥ng c·∫ßn ph·ª• ƒë·ªÅ',
                interests: ['K-drama', 'K-pop', 'Shopping'],
                averageScore: 6.5,
                isActive: true,
                emailVerified: true
            },
            {
                email: 'phamvanminh.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'Ph·∫°m VƒÉn Minh',
                role: 'student',
                level: 'advanced',
                gender: 'male',
                dateOfBirth: new Date('1995-06-12'),
                phone: '0989012345',
                address: 'H·∫£i Ph√≤ng',
                koreanLevel: 'TOPIK 3',
                learningGoal: 'ƒê·∫°t TOPIK 6',
                interests: ['Business', 'Literature', 'Art'],
                averageScore: 9.2,
                isActive: true,
                emailVerified: true
            },
            {
                email: 'ngothithuy.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'Ng√¥ Th·ªã Th·ªßy',
                role: 'student',
                level: 'intermediate',
                gender: 'female',
                dateOfBirth: new Date('1998-11-05'),
                phone: '0990123456',
                address: 'C·∫ßn Th∆°',
                koreanLevel: 'TOPIK 2',
                learningGoal: 'Du h·ªçc H√†n Qu·ªëc nƒÉm sau',
                interests: ['Education', 'Culture', 'Language'],
                averageScore: 8.7,
                isActive: true,
                emailVerified: true
            },
            {
                email: 'dobinhtran.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'ƒê·ªó B√¨nh Tr·∫ßn',
                role: 'student',
                level: 'beginner',
                gender: 'male',
                dateOfBirth: new Date('2001-01-20'),
                phone: '0912345670',
                address: 'Hu·∫ø',
                koreanLevel: 'TOPIK 1',
                learningGoal: 'Giao ti·∫øp th√†nh th·∫°o',
                interests: ['Gaming', 'Anime', 'Music'],
                averageScore: 7.2,
                isActive: true,
                emailVerified: true
            },
            {
                email: 'buithiyen.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'B√πi Th·ªã Y·∫øn',
                role: 'student',
                level: 'intermediate',
                gender: 'female',
                dateOfBirth: new Date('1996-09-14'),
                phone: '0923456781',
                address: 'Nha Trang',
                koreanLevel: 'TOPIK 2',
                learningGoal: 'L√†m vi·ªác trong c√¥ng ty H√†n',
                interests: ['Fashion', 'Design', 'Photography'],
                averageScore: 8.1,
                isActive: true,
                emailVerified: true
            },
            {
                email: 'vuvanhai.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'V≈© VƒÉn H·∫£i',
                role: 'student',
                level: 'advanced',
                gender: 'male',
                dateOfBirth: new Date('1994-12-03'),
                phone: '0934567892',
                address: 'V≈©ng T√†u',
                koreanLevel: 'TOPIK 4',
                learningGoal: 'Tr·ªü th√†nh th√¥ng d·ªãch vi√™n',
                interests: ['Translation', 'Literature', 'Politics'],
                averageScore: 9.5,
                isActive: true,
                emailVerified: true
            },
            {
                email: 'hoangthingoc.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'Ho√†ng Th·ªã Ng·ªçc',
                role: 'student',
                level: 'beginner',
                gender: 'female',
                dateOfBirth: new Date('2000-07-28'),
                phone: '0945678903',
                address: 'Qu·∫£ng Ninh',
                koreanLevel: '',
                learningGoal: 'Hi·ªÉu vƒÉn h√≥a H√†n Qu·ªëc',
                interests: ['Traditional culture', 'Food', 'Travel'],
                averageScore: 6.8,
                isActive: true,
                emailVerified: true
            },
            {
                email: 'lydinhkhanh.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'L√Ω ƒê√¨nh Kh√°nh',
                role: 'student',
                level: 'intermediate',
                gender: 'male',
                dateOfBirth: new Date('1999-04-16'),
                phone: '0956789014',
                address: 'Th√°i Nguy√™n',
                koreanLevel: 'TOPIK 2',
                learningGoal: 'H·ªçc b·ªïng du h·ªçc H√†n',
                interests: ['Science', 'Research', 'Innovation'],
                averageScore: 8.3,
                isActive: true,
                emailVerified: true
            }
        ];

        // T·∫°o h·ªçc vi√™n m·ªõi
        const createdNewStudents = [];
        for (const studentData of newDemoStudents) {
            let existingStudent = await User.findOne({ email: studentData.email });
            if (!existingStudent) {
                const newStudent = new User(studentData);
                existingStudent = await newStudent.save();
                console.log('‚úÖ T·∫°o h·ªçc vi√™n m·ªõi:', existingStudent.fullName);
            } else {
                console.log('üìù H·ªçc vi√™n ƒë√£ t·ªìn t·∫°i:', existingStudent.fullName);
            }
            createdNewStudents.push(existingStudent);
        }

        // 3. Th√™m h·ªçc vi√™n v√†o l·ªõp v√† t·∫°o h√≥a ƒë∆°n thanh to√°n
        const coursePrice = targetClass.course.price;
        
        for (const student of createdNewStudents) {
            if (!targetClass.students.includes(student._id)) {
                targetClass.students.push(student._id);
                console.log('‚ûï Th√™m h·ªçc vi√™n v√†o l·ªõp:', student.fullName);
            }

            // T·∫°o h√≥a ƒë∆°n thanh to√°n
            const existingInvoice = await Invoice.findOne({
                student: student._id,
                course: targetClass.course._id
            });

            if (!existingInvoice) {
                const invoice = new Invoice({
                    student: student._id,
                    course: targetClass.course._id,
                    amount: coursePrice,
                    paymentMethod: ['zalopay_app', 'zalopay_qr', 'zalopay_cc', 'zalopay_atm'][Math.floor(Math.random() * 4)],
                    status: 'paid',
                    transactionId: `TXN${Date.now()}${Math.random().toString(36).substr(2, 9)}`,
                    paidAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),
                    createdAt: new Date(Date.now() - Math.random() * 35 * 24 * 60 * 60 * 1000)
                });
                await invoice.save();
                console.log('üí∞ T·∫°o h√≥a ƒë∆°n thanh to√°n cho:', student.fullName);
            }
        }

        await targetClass.save();

        // 4. X√≥a assignments c≈© ch∆∞a ƒë∆∞·ª£c ch·∫•m ƒëi·ªÉm
        console.log('\nüóëÔ∏è X√≥a b√†i t·∫≠p c≈© ch∆∞a ƒë∆∞·ª£c ch·∫•m ƒëi·ªÉm...');
        const oldAssignments = await Assignment.find({ class: TARGET_CLASS_ID });
        
        for (const assignment of oldAssignments) {
            // X√≥a submissions li√™n quan
            await Submission.deleteMany({ assignment: assignment._id });
            await Assignment.findByIdAndDelete(assignment._id);
            console.log('üóëÔ∏è ƒê√£ x√≥a b√†i t·∫≠p:', assignment.title);
        }

        // 5. T·∫°o 10 b√†i t·∫≠p m·ªõi v·ªõi submissions ƒë√£ ch·∫•m ƒëi·ªÉm
        console.log('\nüìù T·∫°o 10 b√†i t·∫≠p m·ªõi...');
        const assignmentTitles = [
            'B√†i t·∫≠p 1: H·ªçc b·∫£ng ch·ªØ c√°i Hangul',
            'B√†i t·∫≠p 2: T·ª´ v·ª±ng v·ªÅ gia ƒë√¨nh',
            'B√†i t·∫≠p 3: Ng·ªØ ph√°p th√¨ hi·ªán t·∫°i',
            'B√†i t·∫≠p 4: H·ªôi tho·∫°i ch√†o h·ªèi',
            'B√†i t·∫≠p 5: S·ªë ƒë·∫øm v√† th·ªùi gian',
            'B√†i t·∫≠p 6: T·ª´ v·ª±ng v·ªÅ m√†u s·∫Øc',
            'B√†i t·∫≠p 7: Ng·ªØ ph√°p s·ªü h·ªØu c√°ch',
            'B√†i t·∫≠p 8: H·ªôi tho·∫°i mua s·∫Øm',
            'B√†i t·∫≠p 9: T·ª´ v·ª±ng v·ªÅ th·ª©c ƒÉn',
            'B√†i t·∫≠p 10: B√†i ki·ªÉm tra t·ªïng h·ª£p'
        ];

        const assignmentDescriptions = [
            'Vi·∫øt v√† ph√°t √¢m 40 ch·ªØ c√°i c∆° b·∫£n c·ªßa ti·∫øng H√†n',
            'H·ªçc thu·ªôc 20 t·ª´ v·ª±ng v·ªÅ c√°c th√†nh vi√™n trong gia ƒë√¨nh',
            'Chia ƒë·ªông t·ª´ ·ªü th√¨ hi·ªán t·∫°i v√† t·∫°o 10 c√¢u v√≠ d·ª•',
            'Th·ª±c h√†nh h·ªôi tho·∫°i ch√†o h·ªèi v√† gi·ªõi thi·ªáu b·∫£n th√¢n',
            'ƒê·ªçc v√† vi·∫øt s·ªë t·ª´ 1-100, n√≥i gi·ªù v√† ng√†y th√°ng',
            'H·ªçc 15 t·ª´ v·ª±ng v·ªÅ m√†u s·∫Øc v√† m√¥ t·∫£ ƒë·ªì v·∫≠t',
            'S·ª≠ d·ª•ng s·ªü h·ªØu c√°ch Ïùò trong c√¢u v√† l√†m b√†i t·∫≠p',
            'Th·ª±c h√†nh h·ªôi tho·∫°i mua s·∫Øm t·∫°i c·ª≠a h√†ng',
            'H·ªçc 25 t·ª´ v·ª±ng v·ªÅ th·ª©c ƒÉn v√† ƒë·ªì u·ªëng H√†n Qu·ªëc',
            'Ki·ªÉm tra t·ªïng h·ª£p ki·∫øn th·ª©c ƒë√£ h·ªçc trong 9 b√†i tr∆∞·ªõc'
        ];

        // L·∫•y t·∫•t c·∫£ h·ªçc vi√™n trong l·ªõp
        const allStudents = await User.find({ _id: { $in: targetClass.students } });
        
        for (let i = 0; i < 10; i++) {
            // T·∫°o assignment
            const assignment = new Assignment({
                title: assignmentTitles[i],
                description: assignmentDescriptions[i],
                dueDate: new Date(Date.now() - (10 - i) * 7 * 24 * 60 * 60 * 1000), // 10 tu·∫ßn tr∆∞·ªõc ƒë·∫øn 1 tu·∫ßn tr∆∞·ªõc
                class: TARGET_CLASS_ID,
                createdBy: targetClass.teacher,
                maxScore: 10,
                status: 'active'
            });

            const savedAssignment = await assignment.save();
            targetClass.assignments.push(savedAssignment._id);
            console.log('üìù T·∫°o b√†i t·∫≠p:', assignmentTitles[i]);

            // T·∫°o submissions cho t·ª´ng h·ªçc vi√™n v·ªõi ƒëi·ªÉm ng·∫´u nhi√™n
            let totalScore = 0;
            let submissionCount = 0;

            for (const student of allStudents) {
                // 90% h·ªçc vi√™n n·ªôp b√†i
                if (Math.random() > 0.1) {
                    const score = Math.round((5 + Math.random() * 5) * 10) / 10; // ƒêi·ªÉm t·ª´ 5.0 ƒë·∫øn 10.0
                    const isLate = Math.random() > 0.8; // 20% n·ªôp mu·ªôn
                    
                    const submission = new Submission({
                        assignment: savedAssignment._id,
                        student: student._id,
                        fileName: `baitap_${i + 1}_${student.fullName.replace(/\s+/g, '')}.pdf`,
                        fileType: 'application/pdf',
                        submittedAt: new Date(savedAssignment.dueDate.getTime() + (isLate ? Math.random() * 3 * 24 * 60 * 60 * 1000 : -Math.random() * 24 * 60 * 60 * 1000)),
                        status: 'graded',
                        grade: {
                            score: score,
                            percentage: (score / 10) * 100,
                            feedback: generateFeedback(score),
                            gradedAt: new Date(savedAssignment.dueDate.getTime() + Math.random() * 7 * 24 * 60 * 60 * 1000),
                            gradedBy: targetClass.teacher
                        },
                        isLate: isLate
                    });

                    await submission.save();
                    totalScore += score;
                    submissionCount++;
                }
            }

            // C·∫≠p nh·∫≠t statistics cho assignment
            const averageScore = submissionCount > 0 ? totalScore / submissionCount : 0;
            await Assignment.findByIdAndUpdate(savedAssignment._id, {
                $set: {
                    'submissionStats.totalSubmissions': submissionCount,
                    'submissionStats.gradedSubmissions': submissionCount,
                    'submissionStats.averageScore': averageScore
                }
            });

            console.log(`   üìä ${submissionCount}/${allStudents.length} h·ªçc vi√™n n·ªôp b√†i, ƒëi·ªÉm TB: ${averageScore.toFixed(1)}`);
        }

        await targetClass.save();

        console.log('\nüéâ HO√ÄN TH√ÄNH! ƒê√£ th√™m d·ªØ li·ªáu demo:');
        console.log(`üë• Th√™m ${createdNewStudents.length} h·ªçc vi√™n m·ªõi`);
        console.log(`üìù T·∫°o 10 b√†i t·∫≠p v·ªõi submissions ƒë√£ ch·∫•m ƒëi·ªÉm`);
        console.log(`üí∞ T·∫°o ${createdNewStudents.length} h√≥a ƒë∆°n thanh to√°n`);
        console.log(`üéØ T·ªïng s·ªë h·ªçc vi√™n trong l·ªõp: ${targetClass.students.length}`);

    } catch (error) {
        console.error('‚ùå L·ªói khi th√™m d·ªØ li·ªáu demo:', error);
    } finally {
        mongoose.connection.close();
    }
}

function generateFeedback(score) {
    if (score >= 9) return 'Xu·∫•t s·∫Øc! B√†i l√†m r·∫•t t·ªët, n·∫Øm v·ªØng ki·∫øn th·ª©c.';
    if (score >= 8) return 'T·ªët! B√†i l√†m kh√° ·ªïn, c·∫ßn ch√∫ √Ω m·ªôt v√†i chi ti·∫øt nh·ªè.';
    if (score >= 7) return 'Kh√°! ƒê√£ hi·ªÉu b√†i nh∆∞ng c·∫ßn luy·ªán t·∫≠p th√™m.';
    if (score >= 6) return 'ƒê·∫°t! C·∫ßn √¥n t·∫≠p v√† c·∫£i thi·ªán k·ªπ nƒÉng.';
    return 'C·∫ßn c·ªë g·∫Øng h∆°n! H√£y √¥n t·∫≠p k·ªπ v√† h·ªèi th·∫ßy c√¥ khi c√≥ th·∫Øc m·∫Øc.';
}

// Ch·∫°y script
addMoreDemoData();

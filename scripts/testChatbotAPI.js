// Test API chatbot tr·ª±c ti·∫øp
const http = require('http');

async function testChatbotAPI(message) {
    return new Promise((resolve, reject) => {
        const postData = JSON.stringify({ message });
        
        const options = {
            hostname: 'localhost',
            port: 3996,
            path: '/api/faq-chat',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };

        const req = http.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const response = JSON.parse(data);
                    resolve(response);
                } catch (error) {
                    reject(new Error('Invalid JSON response: ' + data));
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        req.write(postData);
        req.end();
    });
}

async function testAll5Questions() {
    console.log('üß™ Testing chatbot API with 5 specific questions...\n');
    
    const questions = [
        'Gi√° c√°c kh√≥a h·ªçc ti·∫øng H√†n bao nhi√™u?',
        'C√≥ th·ªÉ tr·∫£ g√≥p h·ªçc ph√≠ kh√¥ng?',
        'M·ªôt l·ªõp h·ªçc c√≥ bao nhi√™u h·ªçc vi√™n?',
        'C√≥ ch√≠nh s√°ch ho√†n ti·ªÅn kh√¥ng?',
        'C√≥ ch·ª©ng ch·ªâ ho√†n th√†nh kh√¥ng?'
    ];
    
    for (let i = 0; i < questions.length; i++) {
        const question = questions[i];
        console.log(`\nüìù Test ${i + 1}: "${question}"`);
        console.log('=' .repeat(60));
        
        try {
            const response = await testChatbotAPI(question);
            
            if (response.success && response.data) {
                const { type, message, category } = response.data;
                console.log(`‚úÖ Status: SUCCESS`);
                console.log(`üìã Type: ${type}`);
                if (category) console.log(`üìÇ Category: ${category}`);
                
                // Hi·ªÉn th·ªã answer ng·∫Øn g·ªçn
                const answer = message.split('\n\n')[1] || message; // L·∫•y ph·∫ßn answer, b·ªè question
                console.log(`üí¨ Answer: ${answer.substring(0, 150)}${answer.length > 150 ? '...' : ''}`);
                
                if (type === 'faq_answer') {
                    console.log('üéØ RESULT: Chatbot c√≥ th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y!');
                } else {
                    console.log('‚ùå RESULT: Chatbot kh√¥ng t√¨m th·∫•y FAQ ph√π h·ª£p');
                }
            } else {
                console.log('‚ùå Status: FAILED');
                console.log(`Error: ${response.error || 'Unknown error'}`);
            }
        } catch (error) {
            console.log('‚ùå Status: ERROR');
            console.log(`Error: ${error.message}`);
        }
        
        // Delay nh·ªè gi·ªØa c√°c request
        await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log('\n' + '='.repeat(60));
    console.log('üèÅ SUMMARY:');
    console.log('‚úÖ T·∫•t c·∫£ 5 c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c test xong.');
    console.log('üìù Ki·ªÉm tra k·∫øt qu·∫£ ·ªü tr√™n ƒë·ªÉ xem chatbot c√≥ tr·∫£ l·ªùi ƒë∆∞·ª£c kh√¥ng.');
}

// Ch·∫°y test
testAll5Questions().then(() => {
    console.log('\nüéâ Testing ho√†n th√†nh!');
    process.exit(0);
}).catch(error => {
    console.error('\n‚ùå Testing th·∫•t b·∫°i:', error.message);
    process.exit(1);
});

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

// Import models
const User = require('../src/models/User');
const Class = require('../src/models/class');
const Course = require('../src/models/Course');
const Document = require('../src/models/document');
const ClassTest = require('../src/models/ClassTest');
const Invoice = require('../src/models/Invoice');
const Assignment = require('../src/models/Assignment');

// K·∫øt n·ªëi database
mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/Korea_DB', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

const TARGET_CLASS_ID = '687ec78caaf9af5e925a344e';

async function addDemoData() {
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu th√™m d·ªØ li·ªáu demo cho l·ªõp h·ªçc...');

        // 1. Ki·ªÉm tra l·ªõp h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
        const targetClass = await Class.findById(TARGET_CLASS_ID).populate('course');
        if (!targetClass) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc v·ªõi ID:', TARGET_CLASS_ID);
            return;
        }

        console.log('‚úÖ T√¨m th·∫•y l·ªõp h·ªçc:', targetClass.name);
        console.log('üìö Kh√≥a h·ªçc:', targetClass.course.title);

        // 2. T·∫°o h·ªçc vi√™n demo (n·∫øu ch∆∞a c√≥)
        const demoStudents = [
            {
                email: 'nguyenvana.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'Nguy·ªÖn VƒÉn A',
                role: 'student',
                level: 'beginner',
                gender: 'male',
                dateOfBirth: new Date('1995-03-15'),
                phone: '0901234567',
                address: 'H√† N·ªôi',
                koreanLevel: 'TOPIK 1',
                learningGoal: 'Giao ti·∫øp c∆° b·∫£n ti·∫øng H√†n',
                interests: ['K-Pop', 'Phim H√†n', 'Du l·ªãch'],
                averageScore: 7.5,
                isActive: true,
                emailVerified: true
            },
            {
                email: 'tranthib.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'Tr·∫ßn Th·ªã B',
                role: 'student',
                level: 'beginner',
                gender: 'female',
                dateOfBirth: new Date('1998-07-22'),
                phone: '0912345678',
                address: 'TP.HCM',
                koreanLevel: 'TOPIK 1',
                learningGoal: 'H·ªçc ƒë·ªÉ ƒëi du h·ªçc H√†n Qu·ªëc',
                interests: ['Drama H√†n', '·∫®m th·ª±c H√†n', 'VƒÉn h√≥a H√†n'],
                averageScore: 8.2,
                isActive: true,
                emailVerified: true
            },
            {
                email: 'leminhtuan.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'L√™ Minh Tu·∫•n',
                role: 'student',
                level: 'intermediate',
                gender: 'male',
                dateOfBirth: new Date('1997-11-08'),
                phone: '0923456789',
                address: 'ƒê√† N·∫µng',
                koreanLevel: 'TOPIK 2',
                learningGoal: 'N√¢ng cao tr√¨nh ƒë·ªô ti·∫øng H√†n',
                interests: ['C√¥ng ngh·ªá', 'Game H√†n Qu·ªëc', 'Anime'],
                averageScore: 6.8,
                isActive: true,
                emailVerified: true
            },
            {
                email: 'phamthimai.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'Ph·∫°m Th·ªã Mai',
                role: 'student',
                level: 'beginner',
                gender: 'female',
                dateOfBirth: new Date('1999-01-12'),
                phone: '0934567890',
                address: 'H·∫£i Ph√≤ng',
                koreanLevel: '',
                learningGoal: 'B·∫Øt ƒë·∫ßu h·ªçc ti·∫øng H√†n t·ª´ c∆° b·∫£n',
                interests: ['Beauty H√†n Qu·ªëc', 'Fashion', 'Music'],
                averageScore: 7.0,
                isActive: true,
                emailVerified: true
            },
            {
                email: 'hoangvannam.demo@gmail.com',
                password: await bcrypt.hash('password123', 10),
                fullName: 'Ho√†ng VƒÉn Nam',
                role: 'student',
                level: 'intermediate',
                gender: 'male',
                dateOfBirth: new Date('1996-05-30'),
                phone: '0945678901',
                address: 'C·∫ßn Th∆°',
                koreanLevel: 'TOPIK 2',
                learningGoal: 'Chu·∫©n b·ªã cho k·ª≥ thi TOPIK 3',
                interests: ['L·ªãch s·ª≠ H√†n Qu·ªëc', 'Taekwondo', 'Business'],
                averageScore: 8.5,
                isActive: true,
                emailVerified: true
            }
        ];

        const createdStudents = [];
        for (const studentData of demoStudents) {
            // Ki·ªÉm tra xem h·ªçc vi√™n ƒë√£ t·ªìn t·∫°i ch∆∞a
            let existingStudent = await User.findOne({ email: studentData.email });
            if (!existingStudent) {
                const newStudent = new User(studentData);
                existingStudent = await newStudent.save();
                console.log('‚úÖ T·∫°o h·ªçc vi√™n m·ªõi:', existingStudent.fullName);
            } else {
                console.log('üìù H·ªçc vi√™n ƒë√£ t·ªìn t·∫°i:', existingStudent.fullName);
            }
            createdStudents.push(existingStudent);
        }

        // 3. Th√™m h·ªçc vi√™n v√†o l·ªõp v√† t·∫°o h√≥a ƒë∆°n thanh to√°n
        const coursePrice = targetClass.course.price;
        
        for (const student of createdStudents) {
            // Ki·ªÉm tra xem h·ªçc vi√™n ƒë√£ ·ªü trong l·ªõp ch∆∞a
            if (!targetClass.students.includes(student._id)) {
                targetClass.students.push(student._id);
                console.log('‚ûï Th√™m h·ªçc vi√™n v√†o l·ªõp:', student.fullName);
            }

            // T·∫°o h√≥a ƒë∆°n thanh to√°n (ƒë√£ thanh to√°n)
            const existingInvoice = await Invoice.findOne({
                student: student._id,
                course: targetClass.course._id
            });

            if (!existingInvoice) {
                const invoice = new Invoice({
                    student: student._id,
                    course: targetClass.course._id,
                    amount: coursePrice,
                    paymentMethod: ['zalopay_app', 'zalopay_qr', 'zalopay_cc'][Math.floor(Math.random() * 3)],
                    status: 'paid',
                    transactionId: `TXN${Date.now()}${Math.random().toString(36).substr(2, 9)}`,
                    paidAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Ng·∫´u nhi√™n trong 30 ng√†y qua
                    createdAt: new Date(Date.now() - Math.random() * 35 * 24 * 60 * 60 * 1000)
                });
                await invoice.save();
                console.log('üí∞ T·∫°o h√≥a ƒë∆°n thanh to√°n cho:', student.fullName);
            }
        }

        // L∆∞u l·ªõp h·ªçc v·ªõi danh s√°ch h·ªçc vi√™n m·ªõi
        await targetClass.save();

        // 4. T·∫°o t√†i li·ªáu cho l·ªõp h·ªçc
        const documents = [
            {
                class: targetClass._id,
                title: 'B√†i gi·∫£ng s·ªë 1 - Ch√†o h·ªèi c∆° b·∫£n',
                description: 'T√†i li·ªáu h∆∞·ªõng d·∫´n c√°c c√°ch ch√†o h·ªèi c∆° b·∫£n trong ti·∫øng H√†n',
                fileName: 'bai_giang_chao_hoi_co_ban.pdf',
                originalName: 'B√†i gi·∫£ng ch√†o h·ªèi c∆° b·∫£n.pdf',
                uploadedBy: targetClass.teacher,
                category: 'speaking'
            },
            {
                class: targetClass._id,
                title: 'T·ª´ v·ª±ng b√†i 1 - Gia ƒë√¨nh',
                description: 'Danh s√°ch t·ª´ v·ª±ng v·ªÅ gia ƒë√¨nh v√† c√°c m·ªëi quan h·ªá',
                fileName: 'tu_vung_gia_dinh.pdf',
                originalName: 'T·ª´ v·ª±ng gia ƒë√¨nh.pdf',
                uploadedBy: targetClass.teacher,
                category: 'vocabulary'
            },
            {
                class: targetClass._id,
                title: 'B√†i t·∫≠p nghe - H·ªôi tho·∫°i h√†ng ng√†y',
                description: 'B√†i t·∫≠p luy·ªán nghe v·ªõi c√°c t√¨nh hu·ªëng giao ti·∫øp h√†ng ng√†y',
                fileName: 'bai_tap_nghe_hoi_thoai.mp3',
                originalName: 'B√†i t·∫≠p nghe h·ªôi tho·∫°i.mp3',
                uploadedBy: targetClass.teacher,
                category: 'listening'
            },
            {
                class: targetClass._id,
                title: 'H∆∞·ªõng d·∫´n vi·∫øt Hangul',
                description: 'T√†i li·ªáu h∆∞·ªõng d·∫´n c√°ch vi·∫øt b·∫£ng ch·ªØ c√°i Hangul',
                fileName: 'huong_dan_viet_hangul.pdf',
                originalName: 'H∆∞·ªõng d·∫´n vi·∫øt Hangul.pdf',
                uploadedBy: targetClass.teacher,
                category: 'writing'
            },
            {
                class: targetClass._id,
                title: 'Ng·ªØ ph√°p c∆° b·∫£n - Th√¨ hi·ªán t·∫°i',
                description: 'B√†i gi·∫£ng v·ªÅ c√°ch s·ª≠ d·ª•ng th√¨ hi·ªán t·∫°i trong ti·∫øng H√†n',
                fileName: 'ngu_phap_thi_hien_tai.pdf',
                originalName: 'Ng·ªØ ph√°p th√¨ hi·ªán t·∫°i.pdf',
                uploadedBy: targetClass.teacher,
                category: 'vocabulary'
            }
        ];

        for (const docData of documents) {
            const existingDoc = await Document.findOne({
                class: docData.class,
                title: docData.title
            });

            if (!existingDoc) {
                const document = new Document(docData);
                await document.save();
                console.log('üìÑ T·∫°o t√†i li·ªáu:', docData.title);
            } else {
                console.log('üìÑ T√†i li·ªáu ƒë√£ t·ªìn t·∫°i:', docData.title);
            }
        }

        // 5. T·∫°o b√†i ki·ªÉm tra v·ªõi ƒëi·ªÉm s·ªë ƒë√£ ch·∫•m
        const testData = {
            class: targetClass._id,
            testName: 'Ki·ªÉm tra gi·ªØa k·ª≥ - T·ª´ v·ª±ng v√† ng·ªØ ph√°p c∆° b·∫£n',
            testDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 ng√†y tr∆∞·ªõc
            maxScore: 10,
            createdBy: targetClass.teacher,
            scores: []
        };

        // T·∫°o ƒëi·ªÉm cho t·ª´ng h·ªçc vi√™n
        const gradeComments = [
            'L√†m b√†i r·∫•t t·ªët, n·∫Øm v·ªØng ki·∫øn th·ª©c c∆° b·∫£n',
            'C·∫ßn c·∫£i thi·ªán ph·∫ßn ng·ªØ ph√°p',
            'T·ª´ v·ª±ng t·ªët, ng·ªØ ph√°p c·∫ßn luy·ªán t·∫≠p th√™m',
            'Ti·∫øn b·ªô r√µ r·ªát so v·ªõi b√†i tr∆∞·ªõc',
            'C·∫ßn √¥n t·∫≠p th√™m v√† tham gia l·ªõp t√≠ch c·ª±c h∆°n'
        ];

        for (let i = 0; i < createdStudents.length; i++) {
            const student = createdStudents[i];
            // T·∫°o ƒëi·ªÉm ng·∫´u nhi√™n trong kho·∫£ng h·ª£p l√Ω (5.5 - 9.5)
            const score = Math.round((5.5 + Math.random() * 4) * 10) / 10;
            
            testData.scores.push({
                student: student._id,
                score: score,
                notes: gradeComments[i] || 'C·∫ßn c·ªë g·∫Øng h∆°n',
                gradedBy: targetClass.teacher,
                gradedAt: new Date(Date.now() - Math.random() * 3 * 24 * 60 * 60 * 1000) // Ch·∫•m trong 3 ng√†y qua
            });
        }

        // Ki·ªÉm tra xem b√†i test ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingTest = await ClassTest.findOne({
            class: targetClass._id,
            testName: testData.testName
        });

        if (!existingTest) {
            const classTest = new ClassTest(testData);
            await classTest.save();
            console.log('üìù T·∫°o b√†i ki·ªÉm tra v·ªõi ƒëi·ªÉm s·ªë ƒë√£ ch·∫•m');
        } else {
            console.log('üìù B√†i ki·ªÉm tra ƒë√£ t·ªìn t·∫°i');
        }

        // 6. T·∫°o th√™m m·ªôt b√†i ki·ªÉm tra kh√°c
        const test2Data = {
            class: targetClass._id,
            testName: 'B√†i ki·ªÉm tra speaking - Giao ti·∫øp c∆° b·∫£n',
            testDate: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000), // 14 ng√†y tr∆∞·ªõc
            maxScore: 10,
            createdBy: targetClass.teacher,
            scores: []
        };

        const speakingComments = [
            'Ph√°t √¢m chu·∫©n, t·ª± tin khi giao ti·∫øp',
            'C·∫ßn luy·ªán ph√°t √¢m nhi·ªÅu h∆°n',
            'T·ª´ v·ª±ng phong ph√∫, giao ti·∫øp t·ª± nhi√™n',
            'C·∫£i thi·ªán ƒë√°ng k·ªÉ v·ªÅ kh·∫£ nƒÉng nghe hi·ªÉu',
            'C·∫ßn t·ª± tin h∆°n khi n√≥i'
        ];

        for (let i = 0; i < createdStudents.length; i++) {
            const student = createdStudents[i];
            // ƒêi·ªÉm speaking th∆∞·ªùng kh√°c v·ªõi ƒëi·ªÉm vi·∫øt
            const score = Math.round((6 + Math.random() * 3.5) * 10) / 10;
            
            test2Data.scores.push({
                student: student._id,
                score: score,
                notes: speakingComments[i] || 'C·∫ßn luy·ªán t·∫≠p th√™m',
                gradedBy: targetClass.teacher,
                gradedAt: new Date(Date.now() - Math.random() * 5 * 24 * 60 * 60 * 1000)
            });
        }

        const existingTest2 = await ClassTest.findOne({
            class: targetClass._id,
            testName: test2Data.testName
        });

        if (!existingTest2) {
            const classTest2 = new ClassTest(test2Data);
            await classTest2.save();
            console.log('üìù T·∫°o b√†i ki·ªÉm tra speaking v·ªõi ƒëi·ªÉm s·ªë ƒë√£ ch·∫•m');
        } else {
            console.log('üìù B√†i ki·ªÉm tra speaking ƒë√£ t·ªìn t·∫°i');
        }

        console.log('\nüéâ HO√ÄN TH√ÄNH! D·ªØ li·ªáu demo ƒë√£ ƒë∆∞·ª£c th√™m v√†o l·ªõp h·ªçc:');
        console.log(`üìö L·ªõp: ${targetClass.name}`);
        console.log(`üë• S·ªë h·ªçc vi√™n: ${createdStudents.length}`);
        console.log(`üìÑ T√†i li·ªáu: ${documents.length} files`);
        console.log(`üìù B√†i ki·ªÉm tra: 2 b√†i (ƒë√£ ch·∫•m ƒëi·ªÉm)`);
        console.log(`üí∞ H√≥a ƒë∆°n: ${createdStudents.length} h√≥a ƒë∆°n ƒë√£ thanh to√°n`);

    } catch (error) {
        console.error('‚ùå L·ªói khi th√™m d·ªØ li·ªáu demo:', error);
    } finally {
        mongoose.connection.close();
    }
}

// Ch·∫°y script
addDemoData();

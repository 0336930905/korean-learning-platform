const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const User = require('../src/models/User');
const Course = require('../src/models/Course');
const Class = require('../src/models/class');
const Invoice = require('../src/models/Invoice');

// K·∫øt n·ªëi database
mongoose.connect('mongodb://localhost:27017/korea-db', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// Danh s√°ch ·∫£nh l·ªõp h·ªçc c√≥ s·∫µn
const classImages = [
  '/botuvung/hoctap/_3.jpg',
  '/botuvung/hoctap/Classroom Wall Pictures _ Freepik.jpg',
  '/botuvung/hoctap/Empty classroom waits for the start of school lessons _ Premium AI-generated image (1).jpg',
  '/botuvung/hoctap/Empty classroom waits for the start of school lessons _ Premium AI-generated image (2).jpg',
  '/botuvung/hoctap/Empty classroom waits for the start of school lessons _ Premium AI-generated image.jpg',
  '/botuvung/hoctap/t·∫£i xu·ªëng.jpg'
];

// D·ªØ li·ªáu gi·∫£ng vi√™n
const teachersData = [
  {
    fullName: 'Park Min-jun',
    email: 'park.minjun@korea-db.com',
    specialization: 'Ng·ªØ ph√°p c∆° b·∫£n',
    experience: '5 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Kim So-young',
    email: 'kim.soyoung@korea-db.com',
    specialization: 'T·ª´ v·ª±ng v√† ph√°t √¢m',
    experience: '7 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Lee Hyun-woo',
    email: 'lee.hyunwoo@korea-db.com',
    specialization: 'Nghe n√≥i giao ti·∫øp',
    experience: '4 nƒÉm',
    koreanLevel: 'TOPIK 5'
  },
  {
    fullName: 'Choi Ji-hye',
    email: 'choi.jihye@korea-db.com',
    specialization: 'Vi·∫øt v√† s√°ng t√°c',
    experience: '6 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Jung Tae-hyung',
    email: 'jung.taehyung@korea-db.com',
    specialization: 'Ng·ªØ ph√°p n√¢ng cao',
    experience: '8 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Son Na-eun',
    email: 'son.naeun@korea-db.com',
    specialization: 'VƒÉn h√≥a H√†n Qu·ªëc',
    experience: '3 nƒÉm',
    koreanLevel: 'TOPIK 5'
  },
  {
    fullName: 'Kang Min-ho',
    email: 'kang.minho@korea-db.com',
    specialization: 'Ti·∫øng H√†n th∆∞∆°ng m·∫°i',
    experience: '9 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Yoon Se-ri',
    email: 'yoon.seri@korea-db.com',
    specialization: 'Ph√°t √¢m chu·∫©n',
    experience: '5 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Bae Suzy',
    email: 'bae.suzy@korea-db.com',
    specialization: 'T·ª´ v·ª±ng chuy√™n ng√†nh',
    experience: '4 nƒÉm',
    koreanLevel: 'TOPIK 5'
  },
  {
    fullName: 'Oh Sehun',
    email: 'oh.sehun@korea-db.com',
    specialization: 'Ng·ªØ ph√°p trung c·∫•p',
    experience: '6 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Han Ji-min',
    email: 'han.jimin@korea-db.com',
    specialization: 'K·ªπ nƒÉng nghe',
    experience: '7 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Jeon Jung-kook',
    email: 'jeon.jungkook@korea-db.com',
    specialization: 'Giao ti·∫øp h√†ng ng√†y',
    experience: '3 nƒÉm',
    koreanLevel: 'TOPIK 5'
  },
  {
    fullName: 'Shin Min-ah',
    email: 'shin.minah@korea-db.com',
    specialization: 'Vi·∫øt lu·∫≠n vƒÉn',
    experience: '8 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Cha Eun-woo',
    email: 'cha.eunwoo@korea-db.com',
    specialization: 'Ti·∫øng H√†n du l·ªãch',
    experience: '4 nƒÉm',
    koreanLevel: 'TOPIK 5'
  },
  {
    fullName: 'Go Ara',
    email: 'go.ara@korea-db.com',
    specialization: 'Luy·ªán thi TOPIK',
    experience: '10 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Im Yoon-ah',
    email: 'im.yoonah@korea-db.com',
    specialization: 'Ti·∫øng H√†n gia ƒë√¨nh',
    experience: '5 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Seo Kang-joon',
    email: 'seo.kangjoon@korea-db.com',
    specialization: 'Ng·ªØ ph√°p TOPIK',
    experience: '6 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Park Shin-hye',
    email: 'park.shinhye@korea-db.com',
    specialization: 'ƒê·ªçc hi·ªÉu n√¢ng cao',
    experience: '7 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Nam Joo-hyuk',
    email: 'nam.joohyuk@korea-db.com',
    specialization: 'Ti·∫øng H√†n c√¥ng s·ªü',
    experience: '5 nƒÉm',
    koreanLevel: 'TOPIK 6'
  },
  {
    fullName: 'Song Hye-kyo',
    email: 'song.hyekyo@korea-db.com',
    specialization: 'Giao ti·∫øp n√¢ng cao',
    experience: '12 nƒÉm',
    koreanLevel: 'TOPIK 6'
  }
];

// D·ªØ li·ªáu kh√≥a h·ªçc
const coursesData = [
  {
    title: 'Ti·∫øng H√†n C∆° B·∫£n A1',
    description: 'Kh√≥a h·ªçc d√†nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu h·ªçc ti·∫øng H√†n, t·∫≠p trung v√†o b·∫£ng ch·ªØ c√°i Hangeul v√† t·ª´ v·ª±ng c∆° b·∫£n.',
    level: 'beginner',
    category: 'Ng·ªØ ph√°p',
    duration: '3 th√°ng',
    price: 1500000
  },
  {
    title: 'T·ª´ V·ª±ng H√†n Qu·ªëc H√†ng Ng√†y',
    description: 'H·ªçc t·ª´ v·ª±ng th√¥ng d·ª•ng trong cu·ªôc s·ªëng h√†ng ng√†y c·ªßa ng∆∞·ªùi H√†n Qu·ªëc.',
    level: 'beginner',
    category: 'T·ª´ v·ª±ng',
    duration: '2 th√°ng',
    price: 1200000
  },
  {
    title: 'Nghe N√≥i Ti·∫øng H√†n C∆° B·∫£n',
    description: 'Ph√°t tri·ªÉn k·ªπ nƒÉng nghe v√† n√≥i ti·∫øng H√†n th√¥ng qua c√°c t√¨nh hu·ªëng th·ª±c t·∫ø.',
    level: 'beginner',
    category: 'Nghe n√≥i',
    duration: '4 th√°ng',
    price: 1800000
  },
  {
    title: 'Vi·∫øt Ti·∫øng H√†n C∆° B·∫£n',
    description: 'H·ªçc c√°ch vi·∫øt ch·ªØ H√†n v√† t·∫°o c√°c c√¢u ƒë∆°n gi·∫£n.',
    level: 'beginner',
    category: 'Vi·∫øt',
    duration: '2.5 th√°ng',
    price: 1300000
  },
  {
    title: 'Ti·∫øng H√†n Trung C·∫•p A2',
    description: 'N√¢ng cao ki·∫øn th·ª©c ng·ªØ ph√°p v√† t·ª´ v·ª±ng ti·∫øng H√†n cho h·ªçc vi√™n c√≥ n·ªÅn t·∫£ng.',
    level: 'intermediate',
    category: 'Ng·ªØ ph√°p',
    duration: '4 th√°ng',
    price: 2000000
  },
  {
    title: 'T·ª´ V·ª±ng Ti·∫øng H√†n Chuy√™n Ng√†nh',
    description: 'H·ªçc t·ª´ v·ª±ng chuy√™n ng√†nh nh∆∞ kinh doanh, y t·∫ø, c√¥ng ngh·ªá.',
    level: 'intermediate',
    category: 'T·ª´ v·ª±ng',
    duration: '3 th√°ng',
    price: 1700000
  },
  {
    title: 'Giao Ti·∫øp Ti·∫øng H√†n N√¢ng Cao',
    description: 'R√®n luy·ªán k·ªπ nƒÉng giao ti·∫øp trong c√°c t√¨nh hu·ªëng ph·ª©c t·∫°p.',
    level: 'intermediate',
    category: 'Nghe n√≥i',
    duration: '5 th√°ng',
    price: 2200000
  },
  {
    title: 'Vi·∫øt Lu·∫≠n VƒÉn Ti·∫øng H√†n',
    description: 'H·ªçc c√°ch vi·∫øt c√°c b√†i lu·∫≠n v√† vƒÉn b·∫£n d√†i b·∫±ng ti·∫øng H√†n.',
    level: 'intermediate',
    category: 'Vi·∫øt',
    duration: '3.5 th√°ng',
    price: 1900000
  },
  {
    title: 'Ti·∫øng H√†n N√¢ng Cao B1',
    description: 'Kh√≥a h·ªçc cho h·ªçc vi√™n mu·ªën ƒë·∫°t tr√¨nh ƒë·ªô th√†nh th·∫°o ti·∫øng H√†n.',
    level: 'advanced',
    category: 'Ng·ªØ ph√°p',
    duration: '6 th√°ng',
    price: 2800000
  },
  {
    title: 'T·ª´ V·ª±ng Ti·∫øng H√†n H·ªçc Thu·∫≠t',
    description: 'T·ª´ v·ª±ng chuy√™n s√¢u d√†nh cho h·ªçc vi√™n mu·ªën h·ªçc t·∫≠p t·∫°i H√†n Qu·ªëc.',
    level: 'advanced',
    category: 'T·ª´ v·ª±ng',
    duration: '4 th√°ng',
    price: 2400000
  },
  {
    title: 'Thuy·∫øt Tr√¨nh Ti·∫øng H√†n Chuy√™n Nghi·ªáp',
    description: 'K·ªπ nƒÉng thuy·∫øt tr√¨nh v√† giao ti·∫øp c√¥ng s·ªü b·∫±ng ti·∫øng H√†n.',
    level: 'advanced',
    category: 'Nghe n√≥i',
    duration: '4.5 th√°ng',
    price: 2600000
  },
  {
    title: 'Vi·∫øt S√°ng T·∫°o Ti·∫øng H√†n',
    description: 'Ph√°t tri·ªÉn k·ªπ nƒÉng vi·∫øt s√°ng t·∫°o v√† vƒÉn h·ªçc ti·∫øng H√†n.',
    level: 'advanced',
    category: 'Vi·∫øt',
    duration: '5 th√°ng',
    price: 2700000
  },
  {
    title: 'Luy·ªán Thi TOPIK I',
    description: 'Chu·∫©n b·ªã cho k·ª≥ thi TOPIK c·∫•p ƒë·ªô I (level 1-2).',
    level: 'intermediate',
    category: 'Ng·ªØ ph√°p',
    duration: '3 th√°ng',
    price: 2100000
  },
  {
    title: 'Luy·ªán Thi TOPIK II',
    description: 'Chu·∫©n b·ªã cho k·ª≥ thi TOPIK c·∫•p ƒë·ªô II (level 3-6).',
    level: 'advanced',
    category: 'Ng·ªØ ph√°p',
    duration: '4 th√°ng',
    price: 2500000
  },
  {
    title: 'Ti·∫øng H√†n Du L·ªãch',
    description: 'T·ª´ v·ª±ng v√† c·ª•m t·ª´ h·ªØu √≠ch cho vi·ªác du l·ªãch t·∫°i H√†n Qu·ªëc.',
    level: 'beginner',
    category: 'T·ª´ v·ª±ng',
    duration: '2 th√°ng',
    price: 1100000
  },
  {
    title: 'VƒÉn H√≥a H√†n Qu·ªëc',
    description: 'T√¨m hi·ªÉu v·ªÅ vƒÉn h√≥a, l·ªãch s·ª≠ v√† x√£ h·ªôi H√†n Qu·ªëc qua ng√¥n ng·ªØ.',
    level: 'intermediate',
    category: 'Nghe n√≥i',
    duration: '3 th√°ng',
    price: 1600000
  },
  {
    title: 'Ti·∫øng H√†n Th∆∞∆°ng M·∫°i',
    description: 'Ng√¥n ng·ªØ chuy√™n nghi·ªáp cho m√¥i tr∆∞·ªùng kinh doanh.',
    level: 'advanced',
    category: 'Nghe n√≥i',
    duration: '5 th√°ng',
    price: 3000000
  },
  {
    title: 'Ph√°t √Çm Ti·∫øng H√†n Chu·∫©n',
    description: 'S·ª≠a l·ªói ph√°t √¢m v√† n√≥i ti·∫øng H√†n nh∆∞ ng∆∞·ªùi b·∫£n x·ª©.',
    level: 'intermediate',
    category: 'Nghe n√≥i',
    duration: '2.5 th√°ng',
    price: 1500000
  },
  {
    title: 'ƒê·ªçc Hi·ªÉu Ti·∫øng H√†n N√¢ng Cao',
    description: 'Ph√°t tri·ªÉn k·ªπ nƒÉng ƒë·ªçc hi·ªÉu c√°c vƒÉn b·∫£n ph·ª©c t·∫°p.',
    level: 'advanced',
    category: 'Vi·∫øt',
    duration: '4 th√°ng',
    price: 2300000
  },
  {
    title: 'Ti·∫øng H√†n Cho Gia ƒê√¨nh',
    description: 'T·ª´ v·ª±ng v√† giao ti·∫øp trong m√¥i tr∆∞·ªùng gia ƒë√¨nh H√†n Qu·ªëc.',
    level: 'beginner',
    category: 'T·ª´ v·ª±ng',
    duration: '2.5 th√°ng',
    price: 1400000
  }
];

// H√†m t·∫°o d·ªØ li·ªáu demo
async function createDemoData() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu demo...');

    // 1. T·∫°o 20 gi·∫£ng vi√™n
    console.log('\nüìö T·∫°o gi·∫£ng vi√™n...');
    const teachers = [];
    
    for (let i = 0; i < teachersData.length; i++) {
      const teacherData = teachersData[i];
      
      // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingTeacher = await User.findOne({ email: teacherData.email });
      if (existingTeacher) {
        console.log(`‚ö†Ô∏è Gi·∫£ng vi√™n ${teacherData.email} ƒë√£ t·ªìn t·∫°i, b·ªè qua...`);
        teachers.push(existingTeacher);
        continue;
      }

      const hashedPassword = await bcrypt.hash('teacher123', 10);
      
      const teacher = new User({
        email: teacherData.email,
        password: hashedPassword,
        fullName: teacherData.fullName,
        role: 'teacher',
        level: 'advanced',
        koreanLevel: teacherData.koreanLevel,
        gender: Math.random() > 0.5 ? 'male' : 'female',
        dateOfBirth: new Date(1985 + Math.floor(Math.random() * 15), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
        phone: '0' + Math.floor(Math.random() * 900000000 + 100000000),
        address: 'H√†n Qu·ªëc',
        learningGoal: `Chuy√™n gia gi·∫£ng d·∫°y ${teacherData.specialization}`,
        interests: [teacherData.specialization, 'VƒÉn h√≥a H√†n Qu·ªëc', 'Gi√°o d·ª•c'],
        subscription: {
          type: 'premium',
          expiryDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000) // 1 nƒÉm
        },
        progress: {
          totalPoints: Math.floor(Math.random() * 5000) + 5000
        },
        emailVerified: true,
        isActive: true
      });

      await teacher.save();
      teachers.push(teacher);
      console.log(`‚úÖ ƒê√£ t·∫°o gi·∫£ng vi√™n: ${teacher.fullName} (${teacher.email})`);
    }

    // 2. T·∫°o kh√≥a h·ªçc
    console.log('\nüéì T·∫°o kh√≥a h·ªçc...');
    const courses = [];
    
    for (let i = 0; i < coursesData.length; i++) {
      const courseData = coursesData[i];
      
      // Ki·ªÉm tra kh√≥a h·ªçc ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingCourse = await Course.findOne({ title: courseData.title });
      if (existingCourse) {
        console.log(`‚ö†Ô∏è Kh√≥a h·ªçc "${courseData.title}" ƒë√£ t·ªìn t·∫°i, b·ªè qua...`);
        courses.push(existingCourse);
        continue;
      }

      // Ch·ªçn ng·∫´u nhi√™n m·ªôt gi·∫£ng vi√™n
      const randomTeacher = teachers[Math.floor(Math.random() * teachers.length)];
      
      const course = new Course({
        title: courseData.title,
        description: courseData.description,
        level: courseData.level,
        category: courseData.category,
        duration: courseData.duration,
        price: courseData.price,
        instructor: randomTeacher._id,
        status: 'active',
        enrolledCount: Math.floor(Math.random() * 50) + 10
      });

      await course.save();
      courses.push(course);
      console.log(`‚úÖ ƒê√£ t·∫°o kh√≥a h·ªçc: ${course.title} - Gi·∫£ng vi√™n: ${randomTeacher.fullName}`);
    }

    // 3. T·∫°o l·ªõp h·ªçc
    console.log('\nüè´ T·∫°o l·ªõp h·ªçc...');
    const classes = [];
    
    for (let i = 0; i < courses.length; i++) {
      const course = courses[i];
      
      // T·∫°o 1-2 l·ªõp cho m·ªói kh√≥a h·ªçc
      const numClasses = Math.floor(Math.random() * 2) + 1;
      
      for (let j = 0; j < numClasses; j++) {
        const className = `${course.title} - L·ªõp ${String.fromCharCode(65 + j)}`;
        
        // Ki·ªÉm tra l·ªõp h·ªçc ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingClass = await Class.findOne({ name: className });
        if (existingClass) {
          console.log(`‚ö†Ô∏è L·ªõp h·ªçc "${className}" ƒë√£ t·ªìn t·∫°i, b·ªè qua...`);
          classes.push(existingClass);
          continue;
        }

        const startDate = new Date();
        startDate.setDate(startDate.getDate() + Math.floor(Math.random() * 30)); // B·∫Øt ƒë·∫ßu trong 30 ng√†y t·ªõi
        
        const endDate = new Date(startDate);
        endDate.setMonth(endDate.getMonth() + 3); // K√©o d√†i 3 th√°ng

        const classObj = new Class({
          name: className,
          course: course._id,
          description: `L·ªõp h·ªçc cho kh√≥a ${course.title}. ${course.description}`,
          teacher: course.instructor,
          students: [], // S·∫Ω th√™m sinh vi√™n sau
          startDate: startDate,
          endDate: endDate,
          schedule: {
            days: ['Monday', 'Wednesday', 'Friday'],
            time: `${Math.floor(Math.random() * 4) + 18}:00-${Math.floor(Math.random() * 4) + 20}:00`
          },
          status: 'active',
          maxStudents: Math.floor(Math.random() * 20) + 15,
          classImage: classImages[Math.floor(Math.random() * classImages.length)]
        });

        await classObj.save();
        classes.push(classObj);
        console.log(`‚úÖ ƒê√£ t·∫°o l·ªõp h·ªçc: ${classObj.name}`);
      }
    }

    // 4. L·∫•y danh s√°ch sinh vi√™n hi·ªán c√≥
    console.log('\nüë• L·∫•y danh s√°ch sinh vi√™n...');
    const students = await User.find({ role: 'student' }).limit(50);
    console.log(`üìä T√¨m th·∫•y ${students.length} sinh vi√™n hi·ªán c√≥`);

    if (students.length === 0) {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ sinh vi√™n n√†o trong h·ªá th·ªëng. Vui l√≤ng t·∫°o sinh vi√™n tr∆∞·ªõc.');
      return;
    }

    // 5. T·∫°o h√≥a ƒë∆°n v√† ƒëƒÉng k√Ω sinh vi√™n v√†o l·ªõp
    console.log('\nüí∞ T·∫°o h√≥a ƒë∆°n v√† ƒëƒÉng k√Ω sinh vi√™n...');
    let invoiceCount = 0;
    let enrollmentCount = 0;

    for (const classObj of classes) {
      const course = await Course.findById(classObj.course);
      const numStudentsToEnroll = Math.floor(Math.random() * 10) + 5; // 5-14 sinh vi√™n m·ªói l·ªõp
      
      // Ch·ªçn ng·∫´u nhi√™n sinh vi√™n
      const selectedStudents = students
        .sort(() => 0.5 - Math.random())
        .slice(0, Math.min(numStudentsToEnroll, students.length));

      for (const student of selectedStudents) {
        // Ki·ªÉm tra xem sinh vi√™n ƒë√£ mua kh√≥a h·ªçc n√†y ch∆∞a
        const existingInvoice = await Invoice.findOne({
          student: student._id,
          course: course._id,
          status: 'paid'
        });

        if (existingInvoice) {
          console.log(`‚ö†Ô∏è Sinh vi√™n ${student.fullName} ƒë√£ mua kh√≥a h·ªçc ${course.title}, b·ªè qua...`);
          continue;
        }

        // T·∫°o h√≥a ƒë∆°n
        const paymentMethods = ['zalopay_app', 'zalopay_qr', 'zalopay_cc', 'zalopay_atm'];
        const invoice = new Invoice({
          student: student._id,
          course: course._id,
          amount: course.price,
          paymentMethod: paymentMethods[Math.floor(Math.random() * paymentMethods.length)],
          status: 'paid',
          transactionId: `TXN${Date.now()}${Math.floor(Math.random() * 1000)}`,
          paidAt: new Date(Date.now() - Math.floor(Math.random() * 30 * 24 * 60 * 60 * 1000)) // ƒê√£ thanh to√°n trong 30 ng√†y qua
        });

        await invoice.save();
        invoiceCount++;

        // Th√™m sinh vi√™n v√†o l·ªõp h·ªçc
        if (!classObj.students.includes(student._id)) {
          classObj.students.push(student._id);
          enrollmentCount++;
        }

        // C·∫≠p nh·∫≠t enrolledCount c·ªßa course
        if (!course.enrolledStudents.includes(student._id)) {
          course.enrolledStudents.push(student._id);
          course.enrolledCount = course.enrolledStudents.length;
          await course.save();
        }
      }

      await classObj.save();
      console.log(`‚úÖ ƒê√£ ƒëƒÉng k√Ω ${selectedStudents.length} sinh vi√™n v√†o l·ªõp: ${classObj.name}`);
    }

    console.log('\nüéâ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu demo!');
    console.log(`üìä Th·ªëng k√™:`);
    console.log(`   - Gi·∫£ng vi√™n: ${teachers.length}`);
    console.log(`   - Kh√≥a h·ªçc: ${courses.length}`);
    console.log(`   - L·ªõp h·ªçc: ${classes.length}`);
    console.log(`   - H√≥a ƒë∆°n: ${invoiceCount}`);
    console.log(`   - ƒêƒÉng k√Ω: ${enrollmentCount}`);

    console.log('\n‚úÖ T·∫•t c·∫£ d·ªØ li·ªáu demo ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu demo:', error);
  } finally {
    mongoose.connection.close();
  }
}

// Ch·∫°y script
createDemoData();

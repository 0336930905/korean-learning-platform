<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Học từ vựng | <%= vocabulary.theme %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <!-- Add Web Speech API polyfill for better browser compatibility -->
    <script src="https://cdn.jsdelivr.net/npm/speech-synthesis-polyfill@1.0.0/dist/speech-synthesis-polyfill.min.js"></script>
    <style>
        .glass-card {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .floating-animation {
            animation: float 3s ease-in-out infinite;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-8px); }
        }
        
        .slide-in {
            animation: slideIn 0.6s ease-out forwards;
        }
        
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .gradient-text {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .header-icon {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 32px;
            margin-bottom: 24px;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        }
        
        .vocab-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 25px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            position: relative;
            margin-bottom: 32px;
        }
        
        .vocab-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, #667eea, #764ba2);
        }
        
        .word-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 25px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            position: relative;
            transition: all 0.4s ease;
            cursor: pointer;
        }
        
        .word-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, #10b981, #34d399);
        }
        
        .word-card:hover {
            transform: translateY(-12px) scale(1.02);
            box-shadow: 0 35px 80px rgba(0, 0, 0, 0.15);
        }
        
        .word-card:hover .word-image {
            transform: scale(1.1);
        }
        
        .word-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            transition: all 0.6s ease;
            border-radius: 0;
        }
        
        .image-container {
            position: relative;
            overflow: hidden;
            height: 200px;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
        }
        
        .image-overlay {
            position: absolute;
            inset: 0;
            background: linear-gradient(45deg, transparent, rgba(0, 0, 0, 0.3));
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .word-card:hover .image-overlay {
            opacity: 1;
        }
        
        .word-number {
            position: absolute;
            top: 16px;
            left: 16px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 14px;
            color: #374151;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        .audio-btn {
            position: absolute;
            top: 16px;
            right: 16px;
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, #3b82f6, #60a5fa);
            border: none;
            border-radius: 50%;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
            opacity: 0;
            transform: translateY(-10px);
        }
        
        .word-card:hover .audio-btn {
            opacity: 1;
            transform: translateY(0);
        }
        
        .audio-btn:hover {
            transform: translateY(-3px) scale(1.1);
            box-shadow: 0 12px 35px rgba(59, 130, 246, 0.4);
        }
        
        .audio-btn.playing {
            animation: pulse-audio 1s ease-in-out infinite;
        }
        
        @keyframes pulse-audio {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }
        
        .word-content {
            padding: 24px;
            position: relative;
        }
        
        .korean-text {
            font-size: 32px;
            font-weight: 700;
            color: #374151;
            margin-bottom: 16px;
            text-align: center;
            position: relative;
        }
        
        .korean-text::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 50%;
            transform: translateX(-50%);
            width: 40px;
            height: 3px;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 2px;
        }
        
        .word-details {
            space-y: 16px;
        }
        
        .detail-item {
            display: flex;
            align-items: flex-start;
            gap: 12px;
            padding: 12px 16px;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.05), rgba(118, 75, 162, 0.05));
            border-radius: 12px;
            border: 1px solid rgba(102, 126, 234, 0.1);
            transition: all 0.3s ease;
            margin-bottom: 12px;
        }
        
        .detail-item:hover {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            transform: translateX(4px);
        }
        
        .detail-icon {
            width: 20px;
            height: 20px;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 10px;
            flex-shrink: 0;
            margin-top: 2px;
        }
        
        .pronunciation-icon {
            background: linear-gradient(135deg, #f59e0b, #fbbf24);
        }
        
        .meaning-icon {
            background: linear-gradient(135deg, #10b981, #34d399);
        }
        
        .detail-label {
            font-weight: 600;
            color: #6b7280;
            min-width: 80px;
            font-size: 14px;
        }
        
        .detail-value {
            font-weight: 500;
            color: #374151;
            flex: 1;
            line-height: 1.5;
        }
        
        .level-badge {
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 16px;
        }
        
        .level-basic {
            background: linear-gradient(135deg, rgba(34, 197, 94, 0.1), rgba(101, 163, 13, 0.1));
            color: #16a34a;
            border: 1px solid rgba(34, 197, 94, 0.3);
        }
        
        .level-intermediate {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(96, 165, 250, 0.1));
            color: #2563eb;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }
        
        .level-advanced {
            background: linear-gradient(135deg, rgba(147, 51, 234, 0.1), rgba(168, 85, 247, 0.1));
            color: #7c3aed;
            border: 1px solid rgba(147, 51, 234, 0.3);
        }
        
        .voice-selector {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(102, 126, 234, 0.2);
            border-radius: 12px;
            padding: 10px 16px;
            font-size: 14px;
            color: #374151;
            transition: all 0.3s ease;
            min-width: 280px;
            max-width: 400px;
        }
        
        .voice-selector:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
            outline: none;
            background: white;
        }
        
        .voice-selector option {
            padding: 8px 12px;
            color: #374151;
        }
        
        .voice-selector option:disabled {
            background-color: #f3f4f6;
            color: #6b7280;
            font-weight: 600;
        }
        
        .voice-info {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 4px;
            font-size: 12px;
            color: #6b7280;
        }
        
        .voice-quality-indicator {
            display: inline-flex;
            align-items: center;
            gap: 4px;
            padding: 2px 6px;
            border-radius: 8px;
            font-size: 10px;
            font-weight: 600;
        }
        
        .quality-excellent {
            background: linear-gradient(135deg, rgba(34, 197, 94, 0.1), rgba(101, 163, 13, 0.1));
            color: #16a34a;
        }
        
        .quality-good {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(96, 165, 250, 0.1));
            color: #2563eb;
        }
        
        .quality-fair {
            background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(251, 191, 36, 0.1));
            color: #d97706;
        }
        
        /* Quiz Modal Styles */
        .quiz-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            z-index: 9999;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .quiz-modal.active {
            opacity: 1;
            visibility: visible;
        }
        
        .quiz-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border-radius: 25px;
            box-shadow: 0 30px 80px rgba(0, 0, 0, 0.2);
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            transform: translateY(50px);
            transition: all 0.3s ease;
        }
        
        .quiz-modal.active .quiz-container {
            transform: translateY(0);
        }
        
        .quiz-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 24px;
            text-align: center;
            border-radius: 25px 25px 0 0;
        }
        
        .quiz-body {
            padding: 32px;
        }
        
        .quiz-question {
            text-align: center;
            margin-bottom: 32px;
        }
        
        .quiz-word {
            font-size: 48px;
            font-weight: 700;
            color: #374151;
            margin-bottom: 16px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .quiz-type {
            font-size: 16px;
            color: #6b7280;
            font-weight: 500;
        }
        
        .quiz-options {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
            margin-bottom: 24px;
        }
        
        .quiz-option {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.05), rgba(118, 75, 162, 0.05));
            border: 2px solid rgba(102, 126, 234, 0.2);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            color: #374151;
        }
        
        .quiz-option:hover {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
        }
        
        .quiz-option.selected {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-color: #667eea;
        }
        
        .quiz-option.correct {
            background: linear-gradient(135deg, #10b981, #34d399);
            color: white;
            border-color: #10b981;
        }
        
        .quiz-option.incorrect {
            background: linear-gradient(135deg, #ef4444, #f87171);
            color: white;
            border-color: #ef4444;
        }
        
        .quiz-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 24px;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
        }
        
        .quiz-progress {
            display: flex;
            align-items: center;
            gap: 12px;
            color: #6b7280;
            font-weight: 500;
        }
        
        .quiz-btn {
            padding: 12px 24px;
            border-radius: 12px;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .quiz-btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }
        
        .quiz-btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }
        
        .quiz-btn-secondary {
            background: rgba(107, 114, 128, 0.1);
            color: #6b7280;
            border: 1px solid rgba(107, 114, 128, 0.3);
        }
        
        .quiz-btn-secondary:hover {
            background: rgba(107, 114, 128, 0.2);
        }
        
        .quiz-score {
            text-align: center;
            padding: 24px;
        }
        
        .score-circle {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background: linear-gradient(135deg, #10b981, #34d399);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 24px;
            color: white;
            font-size: 32px;
            font-weight: 700;
            box-shadow: 0 20px 60px rgba(16, 185, 129, 0.3);
        }
        
        .quiz-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 16px;
            margin-top: 24px;
        }
        
        .quiz-stat {
            text-align: center;
            padding: 16px;
            background: rgba(0, 0, 0, 0.05);
            border-radius: 12px;
        }
        
        .quiz-stat-value {
            font-size: 24px;
            font-weight: 700;
            color: #374151;
        }
        
        .quiz-stat-label {
            font-size: 14px;
            color: #6b7280;
            margin-top: 4px;
        }
        
        .close-btn {
            width: 48px;
            height: 48px;
            background: rgba(107, 114, 128, 0.1);
            border: 2px solid rgba(107, 114, 128, 0.2);
            border-radius: 50%;
            color: #6b7280;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .close-btn:hover {
            background: rgba(239, 68, 68, 0.1);
            border-color: rgba(239, 68, 68, 0.3);
            color: #ef4444;
            transform: rotate(90deg);
        }
        
        .stats-section {
            display: flex;
            gap: 24px;
            align-items: center;
            margin-bottom: 16px;
        }
        
        .stat-item {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            border-radius: 20px;
            border: 1px solid rgba(102, 126, 234, 0.2);
        }
        
        .stat-icon {
            font-size: 16px;
            color: #667eea;
        }
        
        .stat-text {
            font-weight: 600;
            color: #374151;
            font-size: 14px;
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 4px;
            overflow: hidden;
            margin-top: 16px;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #10b981, #34d399);
            border-radius: 4px;
            transition: width 0.8s ease;
            width: 0%;
        }
        
        .quick-actions {
            position: fixed;
            bottom: 32px;
            right: 32px;
            display: flex;
            flex-direction: column;
            gap: 16px;
            z-index: 1000;
        }
        
        .quick-btn {
            width: 56px;
            height: 56px;
            border-radius: 50%;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
            position: relative;
            overflow: hidden;
        }
        
        .quick-btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            transition: all 0.3s ease;
            transform: translate(-50%, -50%);
        }
        
        .quick-btn:hover::before {
            width: 200%;
            height: 200%;
        }
        
        .quick-btn:hover {
            transform: translateY(-4px) scale(1.1);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        }
        
        .btn-practice {
            background: linear-gradient(135deg, #f59e0b, #fbbf24);
            color: white;
        }
        
        .btn-quiz {
            background: linear-gradient(135deg, #8b5cf6, #a78bfa);
            color: white;
        }
        
        .btn-review {
            background: linear-gradient(135deg, #06b6d4, #67e8f9);
            color: white;
        }
        
        .tooltip {
            position: absolute;
            right: 70px;
            top: 50%;
            transform: translateY(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 12px;
            white-space: nowrap;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .tooltip::after {
            content: '';
            position: absolute;
            left: 100%;
            top: 50%;
            transform: translateY(-50%);
            border: 6px solid transparent;
            border-left-color: rgba(0, 0, 0, 0.8);
        }
        
        .quick-btn:hover .tooltip {
            opacity: 1;
            visibility: visible;
        }
        
        .word-card.memorized {
            border: 2px solid #10b981;
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.05), rgba(52, 211, 153, 0.05));
        }
        
        .word-card.memorized::before {
            background: linear-gradient(90deg, #10b981, #34d399);
        }
        
        .memorized-badge {
            position: absolute;
            top: 16px;
            right: 16px;
            background: linear-gradient(135deg, #10b981, #34d399);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        .fade-in {
            animation: fadeIn 0.8s ease-out forwards;
        }
        
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @media (max-width: 768px) {
            .header-icon {
                width: 60px;
                height: 60px;
                font-size: 24px;
            }
            
            .vocab-header {
                margin: 16px;
                border-radius: 20px;
            }
            
            .word-card {
                margin: 0 16px 24px;
                border-radius: 20px;
            }
            
            .word-content {
                padding: 20px;
            }
            
            .korean-text {
                font-size: 24px;
            }
            
            .stats-section {
                flex-direction: column;
                gap: 12px;
                align-items: stretch;
            }
            
            .quick-actions {
                bottom: 24px;
                right: 24px;
                flex-direction: row;
            }
            
            .tooltip {
                display: none;
            }
            
            /* Quiz mobile styles */
            .quiz-container {
                width: 95%;
                max-height: 90vh;
                margin: 0 auto;
            }
            
            .quiz-header {
                padding: 16px;
            }
            
            .quiz-body {
                padding: 20px;
            }
            
            .quiz-word {
                font-size: 36px;
            }
            
            .quiz-options {
                grid-template-columns: 1fr;
                gap: 12px;
            }
            
            .quiz-option {
                padding: 16px;
            }
            
            .quiz-controls {
                flex-direction: column;
                gap: 16px;
            }
            
            .quiz-stats {
                grid-template-columns: repeat(3, 1fr);
                gap: 12px;
            }
            
            .score-circle {
                width: 100px;
                height: 100px;
                font-size: 28px;
            }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 min-h-screen">
    <div class="flex h-screen">
        <%- include('../partials/student_sidebar', { user: user }) %>
        
        <div class="flex-1 flex flex-col overflow-hidden">
            <%- include('../partials/dashboards_header', { user: user }) %>

            <main class="flex-1 overflow-x-hidden overflow-y-auto">
                <!-- Hero Section -->
                <div class="text-center py-8 slide-in">
                    <div class="header-icon floating-animation mx-auto">
                        <i class="fas fa-language"></i>
                    </div>
                    <h1 class="text-4xl font-bold gradient-text mb-4">Học từ vựng</h1>
                    <p class="text-xl text-gray-600">Khám phá và ghi nhớ từ vựng tiếng Hàn</p>
                </div>

                <!-- Vocabulary Header -->
                <div class="container mx-auto px-6 mb-8">
                    <div class="vocab-header slide-in fade-in">
                        <div class="p-8">
                            <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6">
                                <div class="flex-1">
                                    <div class="flex items-center gap-4 mb-6">
                                        <div class="w-16 h-16 bg-gradient-to-br from-green-500 to-green-600 rounded-xl flex items-center justify-center">
                                            <i class="fas fa-book-open text-white text-2xl"></i>
                                        </div>
                                        <div>
                                            <h2 class="text-3xl font-bold gradient-text mb-2"><%= vocabulary.theme %></h2>
                                            <div class="stats-section">
                                                <div class="stat-item">
                                                    <i class="fas fa-list stat-icon"></i>
                                                    <span class="stat-text"><%= vocabulary.words.length %> từ vựng</span>
                                                </div>
                                                
                                                <div class="level-badge level-<%= vocabulary.level %>">
                                                    <i class="fas fa-layer-group"></i>
                                                    <%= vocabulary.level === 'basic' ? 'Cơ bản' :
                                                       vocabulary.level === 'intermediate' ? 'Trung cấp' :
                                                       'Nâng cao' %>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Progress Bar -->
                                    <div class="mb-4">
                                        <div class="flex justify-between items-center mb-2">
                                            <span class="text-sm font-medium text-gray-600">Tiến độ học tập</span>
                                            <span class="text-sm font-bold text-green-600">0/<%= vocabulary.words.length %></span>
                                        </div>
                                        <div class="progress-bar">
                                            <div class="progress-fill" id="progressFill"></div>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="flex items-center gap-4">
                                    <div class="flex flex-col gap-2">
                                        <div class="flex items-center gap-3">
                                            <label for="voiceSelect" class="text-gray-600 font-medium flex items-center gap-2">
                                                <i class="fas fa-microphone-alt text-blue-500"></i>
                                                Giọng đọc:
                                            </label>
                                            <select id="voiceSelect" class="voice-selector">
                                                <option value="">🔄 Đang tải giọng nói...</option>
                                            </select>
                                        </div>
                                        <div class="voice-info" id="voiceInfo">
                                            <i class="fas fa-info-circle text-blue-400"></i>
                                            <span>Chọn giọng phù hợp để học phát âm tốt nhất</span>
                                        </div>
                                    </div>
                                    <button onclick="history.back()" class="close-btn">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Words Grid -->
                <div class="container mx-auto px-6 pb-32">
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                        <% vocabulary.words.forEach((word, index) => { %>
                            <div class="word-card slide-in fade-in" 
                                 data-word-id="<%= word._id || index %>"
                                 style="animation-delay: <%= index * 0.1 %>s;">
                                
                                <!-- Image Container -->
                                <div class="image-container">
                                    <% if (word.imageUrl) { %>
                                        <img src="<%= word.imageUrl %>" 
                                             alt="<%= word.korean %>"
                                             onerror="this.onerror=null; this.src='/images/default-word.png';"
                                             class="word-image">
                                    <% } else { %>
                                        <div class="word-image bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center">
                                            <i class="fas fa-language text-6xl text-blue-500"></i>
                                        </div>
                                    <% } %>
                                    
                                    <div class="image-overlay"></div>
                                    
                                    <!-- Word Number Badge -->
                                    <div class="word-number">
                                        Từ #<%= index + 1 %>
                                    </div>
                                    
                                    <!-- Audio Button with enhanced error handling -->
                                    <button onclick="event.stopPropagation(); playAudio('<%- word.korean.replace(/'/g, '\\\'') %>', this)" 
                                            class="audio-btn"
                                            title="Phát âm từ vựng"
                                            type="button">
                                        <i class="fas fa-volume-up"></i>
                                    </button>
                                </div>
                                
                                <!-- Word Content -->
                                <div class="word-content">
                                    <div class="korean-text"><%= word.korean %></div>
                                    
                                    <div class="word-details">
                                        <div class="detail-item">
                                            <div class="detail-icon pronunciation-icon">
                                                <i class="fas fa-volume-up"></i>
                                            </div>
                                            <span class="detail-label">Phiên âm:</span>
                                            <span class="detail-value"><%= word.pronunciation %></span>
                                        </div>
                                        
                                        <div class="detail-item">
                                            <div class="detail-icon meaning-icon">
                                                <i class="fas fa-language"></i>
                                            </div>
                                            <span class="detail-label">Nghĩa:</span>
                                            <span class="detail-value"><%= word.meaning %></span>
                                        </div>
                                    </div>
                                    
                                    <!-- Action Buttons -->
                                    <div class="flex justify-between items-center mt-6">
                                        <button onclick="toggleMemorized(this, '<%= word._id || index %>')"
                                                class="flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-green-100 text-gray-700 hover:text-green-700 rounded-lg transition-colors">
                                            <i class="fas fa-check"></i>
                                            <span>Đã nhớ</span>
                                        </button>
                                        
                                        <button onclick="repeatWord('<%= word.korean %>')"
                                                class="flex items-center gap-2 px-4 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg transition-colors">
                                            <i class="fas fa-redo"></i>
                                            <span>Lặp lại</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions">
        <button class="quick-btn btn-practice" onclick="startPractice()">
            <i class="fas fa-dumbbell"></i>
            <div class="tooltip">Luyện tập</div>
        </button>
        
        <button class="quick-btn btn-quiz" onclick="startQuiz()">
            <i class="fas fa-question-circle"></i>
            <div class="tooltip">Kiểm tra</div>
        </button>
        
        <button class="quick-btn btn-review" onclick="reviewWords()">
            <i class="fas fa-eye"></i>
            <div class="tooltip">Ôn tập</div>
        </button>
    </div>

    <%- include('../partials/student_footer') %>
    
    <script>
        let voices = [];
        let selectedVoice = null;
        let memorizedWords = JSON.parse(localStorage.getItem('memorizedWords') || '[]');
        let currentAudio = null;
        let speechSynthesis = window.speechSynthesis;

        // Enhanced voice loading with more voice options
        function loadVoices() {
            console.log('Loading voices...');
            const allVoices = speechSynthesis.getVoices();
            
            // Categorize voices by priority for Korean language learning
            const koreanVoices = [];
            const asianVoices = [];
            const englishVoices = [];
            const otherVoices = [];
            
            allVoices.forEach(voice => {
                const lang = voice.lang.toLowerCase();
                const name = voice.name.toLowerCase();
                
                // Korean voices (highest priority)
                if (lang.includes('ko') || name.includes('korean')) {
                    koreanVoices.push(voice);
                }
                // Asian languages that might work well with Korean
                else if (lang.includes('ja') || lang.includes('zh') || lang.includes('th') || 
                         name.includes('japanese') || name.includes('chinese') || name.includes('thai')) {
                    asianVoices.push(voice);
                }
                // English voices (common fallback)
                else if (lang.includes('en') || name.includes('english')) {
                    englishVoices.push(voice);
                }
                // Other voices
                else {
                    otherVoices.push(voice);
                }
            });
            
            // Combine voices in priority order
            voices = [...koreanVoices, ...asianVoices, ...englishVoices, ...otherVoices];
            
            const voiceSelect = document.getElementById('voiceSelect');
            if (!voiceSelect) return;
            
            voiceSelect.innerHTML = '';
            
            // Add default option
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = 'Giọng mặc định của hệ thống';
            voiceSelect.appendChild(defaultOption);
            
            if (voices.length === 0) {
                const option = document.createElement('option');
                option.value = '';
                option.textContent = 'Không tìm thấy giọng nói - Sử dụng mặc định';
                voiceSelect.appendChild(option);
                console.log('No voices found, using default');
                return;
            }
            
            console.log('Found voices:', voices.length);
            console.log('Korean voices:', koreanVoices.length);
            console.log('Asian voices:', asianVoices.length);
            console.log('English voices:', englishVoices.length);
            
            // Add voice categories
            let currentCategory = '';
            
            voices.forEach((voice, idx) => {
                const lang = voice.lang.toLowerCase();
                const name = voice.name.toLowerCase();
                
                // Determine category
                let category = '';
                let priority = '';
                if (lang.includes('ko') || name.includes('korean')) {
                    category = '🇰🇷 Giọng Hàn Quốc';
                    priority = ' (Khuyến nghị)';
                } else if (lang.includes('ja') || name.includes('japanese')) {
                    category = '🇯🇵 Giọng Nhật Bản';
                    priority = ' (Tương thích tốt)';
                } else if (lang.includes('zh') || name.includes('chinese')) {
                    category = '🇨🇳 Giọng Trung Quốc';
                    priority = ' (Tương thích)';
                } else if (lang.includes('en') || name.includes('english')) {
                    category = '🇺🇸 Giọng Tiếng Anh';
                    priority = ' (Fallback)';
                } else {
                    category = '🌍 Giọng khác';
                    priority = '';
                }
                
                // Add category header if changed
                if (category !== currentCategory) {
                    const categoryOption = document.createElement('option');
                    categoryOption.disabled = true;
                    categoryOption.style.fontWeight = 'bold';
                    categoryOption.style.backgroundColor = '#f3f4f6';
                    categoryOption.textContent = `--- ${category} ---`;
                    voiceSelect.appendChild(categoryOption);
                    currentCategory = category;
                }
                
                const option = document.createElement('option');
                option.value = idx;
                
                // Format voice name with additional info
                let displayName = voice.name;
                let additionalInfo = [];
                
                // Add language info
                additionalInfo.push(voice.lang.toUpperCase());
                
                // Add service type
                if (voice.localService) {
                    additionalInfo.push('Cục bộ');
                } else {
                    additionalInfo.push('Online');
                }
                
                // Add gender if available (some browsers provide this)
                if (name.includes('female') || name.includes('woman')) {
                    additionalInfo.push('Nữ');
                } else if (name.includes('male') || name.includes('man')) {
                    additionalInfo.push('Nam');
                }
                
                option.textContent = `${displayName}${priority} (${additionalInfo.join(', ')})`;
                voiceSelect.appendChild(option);
            });
            
            // Set best Korean voice as default if available
            if (koreanVoices.length > 0) {
                selectedVoice = koreanVoices[0];
                const koreanIndex = voices.indexOf(koreanVoices[0]);
                voiceSelect.value = koreanIndex;
                console.log('Selected default Korean voice:', selectedVoice.name);
            } else if (asianVoices.length > 0) {
                selectedVoice = asianVoices[0];
                const asianIndex = voices.indexOf(asianVoices[0]);
                voiceSelect.value = asianIndex;
                console.log('Selected default Asian voice:', selectedVoice.name);
            }
        }

        // Enhanced audio playing with better error handling
        function playAudio(word, button = null) {
            console.log('Playing audio for:', word);
            
            if (!speechSynthesis) {
                showNotification('Trình duyệt không hỗ trợ phát âm', 'error');
                return;
            }

            // Cancel any current speech
            speechSynthesis.cancel();

            try {
                const utterance = new SpeechSynthesisUtterance(word);
                
                // Enhanced utterance settings
                utterance.lang = 'ko-KR';
                utterance.rate = 0.7; // Slower for learning
                utterance.pitch = 1.0;
                utterance.volume = 1.0;
                
                // Use selected voice if available
                if (selectedVoice) {
                    utterance.voice = selectedVoice;
                    console.log('Using voice:', selectedVoice.name);
                } else {
                    console.log('Using default voice');
                }

                // Enhanced visual feedback
                if (button) {
                    button.classList.add('playing');
                    const icon = button.querySelector('i');
                    if (icon) {
                        icon.className = 'fas fa-pause';
                    }
                    button.disabled = true;
                }

                // Enhanced event handlers
                utterance.onstart = function() {
                    console.log('Speech started');
                    currentAudio = utterance;
                };

                utterance.onend = function() {
                    console.log('Speech ended');
                    if (button) {
                        button.classList.remove('playing');
                        const icon = button.querySelector('i');
                        if (icon) {
                            icon.className = 'fas fa-volume-up';
                        }
                        button.disabled = false;
                    }
                    currentAudio = null;
                };

                utterance.onerror = function(event) {
                    console.error('Speech error:', event.error);
                    let errorMessage = 'Lỗi phát âm';
                    
                    switch(event.error) {
                        case 'network':
                            errorMessage = 'Lỗi mạng. Vui lòng kiểm tra kết nối internet.';
                            break;
                        case 'not-allowed':
                            errorMessage = 'Trình duyệt không cho phép phát âm. Vui lòng kiểm tra cài đặt.';
                            break;
                        case 'language-not-supported':
                            errorMessage = 'Không hỗ trợ tiếng Hàn. Thử chọn giọng khác.';
                            break;
                        default:
                            errorMessage = `Lỗi phát âm: ${event.error}`;
                    }
                    
                    showNotification(errorMessage, 'error');
                    
                    if (button) {
                        button.classList.remove('playing');
                        const icon = button.querySelector('i');
                        if (icon) {
                            icon.className = 'fas fa-volume-up';
                        }
                        button.disabled = false;
                    }
                    currentAudio = null;
                };

                // Speak with timeout fallback
                speechSynthesis.speak(utterance);
                
                // Fallback timeout in case onend doesn't fire
                setTimeout(() => {
                    if (currentAudio === utterance) {
                        console.log('Speech timeout, forcing cleanup');
                        if (button) {
                            button.classList.remove('playing');
                            const icon = button.querySelector('i');
                            if (icon) {
                                icon.className = 'fas fa-volume-up';
                            }
                            button.disabled = false;
                        }
                        currentAudio = null;
                    }
                }, 10000); // 10 second timeout

            } catch (error) {
                console.error('PlayAudio error:', error);
                showNotification('Lỗi khi phát âm: ' + error.message, 'error');
                
                if (button) {
                    button.classList.remove('playing');
                    button.disabled = false;
                }
            }
        }

        // Initialize with enhanced error handling
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Page loaded, initializing...');
            
            // Check for speech synthesis support
            if (!('speechSynthesis' in window)) {
                console.error('Speech synthesis not supported');
                document.getElementById('voiceSelect').innerHTML = '<option>Trình duyệt không hỗ trợ phát âm</option>';
                showNotification('Trình duyệt không hỗ trợ phát âm', 'error');
                return;
            }

            // Load voices with retry mechanism
            loadVoices();
            
            // Set up voice change events
            if (speechSynthesis.onvoiceschanged !== undefined) {
                speechSynthesis.onvoiceschanged = function() {
                    console.log('Voices changed, reloading...');
                    setTimeout(loadVoices, 100); // Small delay to ensure voices are loaded
                };
            }

            // Retry loading voices after a delay (some browsers need this)
            setTimeout(() => {
                if (voices.length === 0) {
                    console.log('Retrying voice loading...');
                    loadVoices();
                }
            }, 1000);

            // Voice selector change handler with enhanced feedback
            const voiceSelect = document.getElementById('voiceSelect');
            const voiceInfo = document.getElementById('voiceInfo');
            
            if (voiceSelect) {
                voiceSelect.addEventListener('change', function(e) {
                    const selectedIndex = e.target.value;
                    if (selectedIndex !== '' && voices[selectedIndex]) {
                        selectedVoice = voices[selectedIndex];
                        console.log('Voice changed to:', selectedVoice.name);
                        
                        // Determine voice type for user feedback
                        const lang = selectedVoice.lang.toLowerCase();
                        const name = selectedVoice.name.toLowerCase();
                        let voiceType = '';
                        let qualityClass = '';
                        let qualityIcon = '';
                        
                        if (lang.includes('ko') || name.includes('korean')) {
                            voiceType = 'Giọng Hàn Quốc - Tuyệt vời cho việc học!';
                            qualityClass = 'quality-excellent';
                            qualityIcon = 'fas fa-star';
                        } else if (lang.includes('ja') || name.includes('japanese')) {
                            voiceType = 'Giọng Nhật - Tương thích tốt với tiếng Hàn';
                            qualityClass = 'quality-good';
                            qualityIcon = 'fas fa-thumbs-up';
                        } else if (lang.includes('zh') || name.includes('chinese')) {
                            voiceType = 'Giọng Trung Quốc - Có thể phát âm được';
                            qualityClass = 'quality-good';
                            qualityIcon = 'fas fa-check';
                        } else if (lang.includes('en') || name.includes('english')) {
                            voiceType = 'Giọng Tiếng Anh - Phát âm cơ bản';
                            qualityClass = 'quality-fair';
                            qualityIcon = 'fas fa-info';
                        } else {
                            voiceType = 'Giọng khác - Thử nghiệm';
                            qualityClass = 'quality-fair';
                            qualityIcon = 'fas fa-question';
                        }
                        
                        // Update voice info display
                        if (voiceInfo) {
                            voiceInfo.innerHTML = `
                                <i class="${qualityIcon} text-blue-400"></i>
                                <span>${selectedVoice.name}</span>
                                <span class="voice-quality-indicator ${qualityClass}">
                                    <i class="${qualityIcon}"></i>
                                    ${voiceType.split(' - ')[1]}
                                </span>
                                <span class="text-xs">(${selectedVoice.localService ? 'Cục bộ' : 'Online'})</span>
                            `;
                        }
                        
                        showNotification(`Đã chọn: ${selectedVoice.name} - ${voiceType}`, 'success');
                        
                        // Test the new voice with a common Korean greeting
                        setTimeout(() => {
                            playAudio('안녕하세요');
                        }, 500);
                    } else {
                        selectedVoice = null;
                        console.log('Using default voice');
                        
                        if (voiceInfo) {
                            voiceInfo.innerHTML = `
                                <i class="fas fa-info-circle text-blue-400"></i>
                                <span>Đang sử dụng giọng mặc định của hệ thống</span>
                            `;
                        }
                        
                        showNotification('Đã chọn giọng mặc định của hệ thống', 'info');
                    }
                });
            }

            // Initialize other features
            updateMemorizedWords();
            updateProgress();
            
            // Add staggered animations
            const elements = document.querySelectorAll('.slide-in');
            elements.forEach((el, index) => {
                el.style.animationDelay = `${index * 0.1}s`;
            });

            console.log('Initialization complete');
        });

        // Play audio with enhanced feedback
        // Repeat word function
        function repeatWord(word) {
            playAudio(word);
            showNotification('Đang phát âm: ' + word, 'info');
        }

        // Toggle memorized status
        function toggleMemorized(button, wordId) {
            const card = button.closest('.word-card');
            const isMemorized = memorizedWords.includes(wordId);
            
            if (isMemorized) {
                memorizedWords = memorizedWords.filter(id => id !== wordId);
                card.classList.remove('memorized');
                button.innerHTML = '<i class="fas fa-check"></i><span>Đã nhớ</span>';
                button.className = button.className.replace('bg-green-100 text-green-700', 'bg-gray-100 text-gray-700');
                showNotification('Đã bỏ đánh dấu từ vựng', 'info');
            } else {
                memorizedWords.push(wordId);
                card.classList.add('memorized');
                
                // Add memorized badge
                if (!card.querySelector('.memorized-badge')) {
                    const badge = document.createElement('div');
                    badge.className = 'memorized-badge';
                    badge.innerHTML = '<i class="fas fa-check-circle"></i><span>Đã nhớ</span>';
                    card.querySelector('.image-container').appendChild(badge);
                }
                
                button.innerHTML = '<i class="fas fa-check-circle"></i><span>Đã nhớ</span>';
                button.className = button.className.replace('bg-gray-100 text-gray-700', 'bg-green-100 text-green-700');
                showNotification('Đã đánh dấu từ vựng đã nhớ!', 'success');
            }
            
            localStorage.setItem('memorizedWords', JSON.stringify(memorizedWords));
            updateProgress();
        }

        // Update memorized words display
        function updateMemorizedWords() {
            memorizedWords.forEach(wordId => {
                const card = document.querySelector(`[data-word-id="${wordId}"]`);
                if (card) {
                    card.classList.add('memorized');
                    const button = card.querySelector('button:first-of-type');
                    if (button) {
                        button.innerHTML = '<i class="fas fa-check-circle"></i><span>Đã nhớ</span>';
                        button.className = button.className.replace('bg-gray-100 text-gray-700', 'bg-green-100 text-green-700');
                    }
                    
                    // Add memorized badge
                    if (!card.querySelector('.memorized-badge')) {
                        const badge = document.createElement('div');
                        badge.className = 'memorized-badge';
                        badge.innerHTML = '<i class="fas fa-check-circle"></i><span>Đã nhớ</span>';
                        card.querySelector('.image-container').appendChild(badge);
                    }
                }
            });
        }

        // Update progress bar
        function updateProgress() {
            const totalWords = <%= vocabulary.words.length %>;
            const memorizedCount = memorizedWords.length;
            const percentage = (memorizedCount / totalWords) * 100;
            
            const progressFill = document.getElementById('progressFill');
            const progressText = document.querySelector('.progress-bar').previousElementSibling.querySelector('span:last-child');
            
            progressFill.style.width = percentage + '%';
            progressText.textContent = `${memorizedCount}/${totalWords}`;
            
            // Update progress text color based on completion
            if (percentage === 100) {
                progressText.className = 'text-sm font-bold text-green-600';
            } else if (percentage >= 50) {
                progressText.className = 'text-sm font-bold text-blue-600';
            } else {
                progressText.className = 'text-sm font-bold text-gray-600';
            }
        }

        // Quick action functions
        function startPractice() {
            // Get current theme ID from URL or vocabulary data
            const currentUrl = window.location.pathname;
            const themeId = currentUrl.split('/')[3]; // Extract theme ID from URL pattern /student/thematic-vocabulary/:themeId/learn
            
            if (themeId) {
                // Redirect to practice page
                window.location.href = `/student/thematic-vocabulary/${themeId}/practice`;
            } else {
                showNotification('Không thể xác định chủ đề để luyện tập!', 'error');
            }
        }

        function startQuiz() {
            // Check if there are enough words for quiz
            const vocabularyWords = <%- JSON.stringify(vocabulary.words) %>;
            if (vocabularyWords.length < 4) {
                showNotification('Cần ít nhất 4 từ vựng để tạo bài kiểm tra!', 'error');
                return;
            }
            
            // Create quiz modal
            createQuizModal();
        }
        
        // Quiz variables
        let quizData = {
            words: [],
            currentQuestion: 0,
            score: 0,
            totalQuestions: 10,
            selectedAnswer: null,
            answers: []
        };
        
        function createQuizModal() {
            // Get vocabulary words
            const vocabularyWords = <%- JSON.stringify(vocabulary.words) %>;
            
            // Generate quiz questions
            quizData.words = generateQuizQuestions(vocabularyWords, quizData.totalQuestions);
            quizData.currentQuestion = 0;
            quizData.score = 0;
            quizData.selectedAnswer = null;
            quizData.answers = [];
            
            // Create modal HTML
            const modalHTML = `
                <div class="quiz-modal" id="quizModal">
                    <div class="quiz-container">
                        <div class="quiz-header">
                            <h2 class="text-2xl font-bold">🧠 Kiểm tra từ vựng</h2>
                            <p class="text-blue-100 mt-2">Chọn nghĩa đúng của từ vựng tiếng Hàn</p>
                        </div>
                        <div class="quiz-body" id="quizBody">
                            <!-- Quiz content will be inserted here -->
                        </div>
                    </div>
                </div>
            `;
            
            // Add modal to page
            document.body.insertAdjacentHTML('beforeend', modalHTML);
            
            // Show modal
            const modal = document.getElementById('quizModal');
            setTimeout(() => {
                modal.classList.add('active');
            }, 100);
            
            // Load first question
            loadQuizQuestion();
        }
        
        function generateQuizQuestions(vocabularyWords, numQuestions) {
            // Shuffle words and take required number
            const shuffled = [...vocabularyWords].sort(() => 0.5 - Math.random());
            return shuffled.slice(0, Math.min(numQuestions, vocabularyWords.length));
        }
        
        function loadQuizQuestion() {
            const currentWord = quizData.words[quizData.currentQuestion];
            const vocabularyWords = <%- JSON.stringify(vocabulary.words) %>;
            
            // Generate options (1 correct + 3 wrong)
            const options = generateQuizOptions(currentWord, vocabularyWords);
            
            const questionHTML = `
                <div class="quiz-question">
                    <div class="quiz-word">${currentWord.korean}</div>
                    <div class="quiz-type">Chọn nghĩa đúng của từ này:</div>
                    <button onclick="playAudio('${currentWord.korean.replace(/'/g, '\\\'')}')" 
                            class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
                        <i class="fas fa-volume-up mr-2"></i>Nghe phát âm
                    </button>
                </div>
                
                <div class="quiz-options" id="quizOptions">
                    ${options.map((option, index) => `
                        <div class="quiz-option" onclick="selectQuizOption(${index}, '${option}', '${currentWord.meaning}')">
                            ${option}
                        </div>
                    `).join('')}
                </div>
                
                <div class="quiz-controls">
                    <div class="quiz-progress">
                        <i class="fas fa-question-circle"></i>
                        <span>Câu ${quizData.currentQuestion + 1}/${quizData.totalQuestions}</span>
                    </div>
                    <div>
                        <button class="quiz-btn quiz-btn-secondary" onclick="closeQuizModal()">
                            <i class="fas fa-times mr-2"></i>Thoát
                        </button>
                        <button class="quiz-btn quiz-btn-primary ml-3" onclick="nextQuizQuestion()" id="nextBtn" disabled>
                            Tiếp theo <i class="fas fa-arrow-right ml-2"></i>
                        </button>
                    </div>
                </div>
            `;
            
            document.getElementById('quizBody').innerHTML = questionHTML;
        }
        
        function generateQuizOptions(correctWord, allWords) {
            // Get correct answer
            const correct = correctWord.meaning;
            
            // Get 3 wrong answers
            const wrongAnswers = allWords
                .filter(word => word.meaning !== correct)
                .map(word => word.meaning)
                .sort(() => 0.5 - Math.random())
                .slice(0, 3);
            
            // Combine and shuffle
            const options = [correct, ...wrongAnswers].sort(() => 0.5 - Math.random());
            
            return options;
        }
        
        function selectQuizOption(index, selectedAnswer, correctAnswer) {
            // Remove previous selections
            document.querySelectorAll('.quiz-option').forEach(option => {
                option.classList.remove('selected');
            });
            
            // Mark selected option
            const selectedOption = document.querySelectorAll('.quiz-option')[index];
            selectedOption.classList.add('selected');
            
            // Store selection
            quizData.selectedAnswer = selectedAnswer;
            
            // Enable next button
            document.getElementById('nextBtn').disabled = false;
        }
        
        function nextQuizQuestion() {
            const currentWord = quizData.words[quizData.currentQuestion];
            const isCorrect = quizData.selectedAnswer === currentWord.meaning;
            
            // Store answer
            quizData.answers.push({
                word: currentWord,
                selected: quizData.selectedAnswer,
                correct: isCorrect
            });
            
            // Update score
            if (isCorrect) {
                quizData.score++;
            }
            
            // Show correct answer animation
            showQuizAnswer(isCorrect, currentWord.meaning);
            
            // Move to next question after delay
            setTimeout(() => {
                quizData.currentQuestion++;
                quizData.selectedAnswer = null;
                
                if (quizData.currentQuestion >= quizData.totalQuestions) {
                    showQuizResults();
                } else {
                    loadQuizQuestion();
                }
            }, 1500);
        }
        
        function showQuizAnswer(isCorrect, correctAnswer) {
            // Highlight correct and incorrect answers
            document.querySelectorAll('.quiz-option').forEach(option => {
                const optionText = option.textContent.trim();
                
                if (optionText === correctAnswer) {
                    option.classList.add('correct');
                } else if (option.classList.contains('selected') && !isCorrect) {
                    option.classList.add('incorrect');
                }
                
                // Disable all options
                option.style.pointerEvents = 'none';
            });
            
            // Disable next button temporarily
            document.getElementById('nextBtn').disabled = true;
            
            // Show feedback notification
            if (isCorrect) {
                showNotification('🎉 Chính xác! Bạn đã chọn đúng!', 'success');
            } else {
                showNotification(`❌ Sai rồi! Đáp án đúng là: ${correctAnswer}`, 'error');
            }
        }
        
        function showQuizResults() {
            const percentage = Math.round((quizData.score / quizData.totalQuestions) * 100);
            const correctAnswers = quizData.score;
            const incorrectAnswers = quizData.totalQuestions - quizData.score;
            
            // Determine grade
            let grade = '';
            let gradeColor = '';
            if (percentage >= 90) {
                grade = 'Xuất sắc!';
                gradeColor = '#10b981';
            } else if (percentage >= 80) {
                grade = 'Giỏi!';
                gradeColor = '#3b82f6';
            } else if (percentage >= 70) {
                grade = 'Khá!';
                gradeColor = '#f59e0b';
            } else if (percentage >= 60) {
                grade = 'Trung bình';
                gradeColor = '#f97316';
            } else {
                grade = 'Cần cố gắng thêm';
                gradeColor = '#ef4444';
            }
            
            const resultsHTML = `
                <div class="quiz-score">
                    <div class="score-circle" style="background: linear-gradient(135deg, ${gradeColor}, ${gradeColor}aa);">
                        ${percentage}%
                    </div>
                    <h3 class="text-2xl font-bold text-gray-800 mb-2">${grade}</h3>
                    <p class="text-gray-600">Bạn đã hoàn thành bài kiểm tra từ vựng!</p>
                    
                    <div class="quiz-stats">
                        <div class="quiz-stat">
                            <div class="quiz-stat-value text-green-600">${correctAnswers}</div>
                            <div class="quiz-stat-label">Đúng</div>
                        </div>
                        <div class="quiz-stat">
                            <div class="quiz-stat-value text-red-500">${incorrectAnswers}</div>
                            <div class="quiz-stat-label">Sai</div>
                        </div>
                        <div class="quiz-stat">
                            <div class="quiz-stat-value text-blue-600">${quizData.totalQuestions}</div>
                            <div class="quiz-stat-label">Tổng cộng</div>
                        </div>
                    </div>
                    
                    <div class="mt-8 flex gap-4 justify-center">
                        <button class="quiz-btn quiz-btn-primary" onclick="startQuiz()">
                            <i class="fas fa-redo mr-2"></i>Làm lại
                        </button>
                        <button class="quiz-btn quiz-btn-secondary" onclick="closeQuizModal()">
                            <i class="fas fa-times mr-2"></i>Đóng
                        </button>
                    </div>
                </div>
            `;
            
            document.getElementById('quizBody').innerHTML = resultsHTML;
            
            // Show success notification
            showNotification(`🎯 Hoàn thành! Điểm số: ${correctAnswers}/${quizData.totalQuestions} (${percentage}%)`, 'success');
        }
        
        function closeQuizModal() {
            const modal = document.getElementById('quizModal');
            if (modal) {
                modal.classList.remove('active');
                setTimeout(() => {
                    modal.remove();
                }, 300);
            }
        }

        function reviewWords() {
            const memorizedWordCards = document.querySelectorAll('.word-card.memorized');
            if (memorizedWordCards.length === 0) {
                showNotification('Bạn chưa đánh dấu từ nào đã nhớ!', 'info');
                return;
            }
            
            // Scroll to first memorized word
            memorizedWordCards[0].scrollIntoView({ 
                behavior: 'smooth', 
                block: 'center' 
            });
            showNotification(`Đang xem lại ${memorizedWordCards.length} từ đã nhớ`, 'success');
        }

        // Notification function
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `fixed top-6 right-6 z-50 px-6 py-4 rounded-lg shadow-lg text-white font-medium transition-all duration-300 transform translate-x-full`;
            
            switch (type) {
                case 'success':
                    notification.className += ' bg-gradient-to-r from-green-500 to-green-600';
                    break;
                case 'error':
                    notification.className += ' bg-gradient-to-r from-red-500 to-red-600';
                    break;
                case 'info':
                    notification.className += ' bg-gradient-to-r from-blue-500 to-blue-600';
                    break;
            }
            
            notification.innerHTML = `
                <div class="flex items-center gap-3">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 
                                   type === 'error' ? 'fa-exclamation-circle' : 
                                   'fa-info-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 100);
            
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            switch(e.key) {
                case 'Escape':
                    history.back();
                    break;
                case ' ':
                    e.preventDefault();
                    // Play first visible word
                    const firstWord = document.querySelector('.word-card .korean-text');
                    if (firstWord) {
                        playAudio(firstWord.textContent);
                    }
                    break;
            }
        });

        // Add click to card for audio
        document.querySelectorAll('.word-card').forEach(card => {
            card.addEventListener('click', function(e) {
                if (!e.target.closest('button')) {
                    const koreanText = this.querySelector('.korean-text').textContent;
                    playAudio(koreanText);
                }
            });
        });
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Dashboard - Học viên</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Custom animations and styles */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .fade-in-up {
            animation: fadeInUp 0.6s ease-out forwards;
        }

        .slide-in {
            animation: slideIn 0.5s ease-out forwards;
        }

        .card-hover {
            transition: all 0.3s ease;
        }

        .card-hover:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .progress-bar {
            background: linear-gradient(90deg, #10b981, #34d399);
            transition: width 0.5s ease;
        }

        /* Chat widget styles */
        .chat-widget {
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }

        .message-animation {
            animation: slideIn 0.3s ease-out;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .chat-widget {
                width: calc(100vw - 2rem);
                right: 1rem;
                left: 1rem;
            }
        }

        /* Notification styles */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            padding: 16px 20px;
            border-radius: 12px;
            color: white;
            font-weight: 600;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: linear-gradient(135deg, #10b981, #34d399);
        }

        .notification.error {
            background: linear-gradient(135deg, #ef4444, #f87171);
        }

        /* Enhanced Chat Widget Styles */
        .chat-widget {
            width: 380px;
            height: 600px;
            max-width: calc(100vw - 2rem);
            max-height: calc(100vh - 2rem);
            min-width: 320px;
            min-height: 400px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            transform-origin: bottom right;
        }

        .chat-widget.minimized {
            height: auto;
        }

        .chat-widget.minimized .chat-messages,
        .chat-widget.minimized #quick-actions,
        .chat-widget.minimized .chat-input-area {
            display: none;
        }

        .chat-widget.maximized {
            width: 600px;
            height: 700px;
        }

        .chat-widget.fullscreen {
            position: fixed;
            top: 1rem;
            left: 1rem;
            right: 1rem;
            bottom: 1rem;
            width: calc(100vw - 2rem);
            height: calc(100vh - 2rem);
            border-radius: 16px;
        }

        /* Chat Messages Styling */
        .chat-messages {
            height: 320px;
            scrollbar-width: thin;
            scrollbar-color: #cbd5e0 #f7fafc;
        }

        .chat-messages::-webkit-scrollbar {
            width: 6px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: #f7fafc;
            border-radius: 3px;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: #cbd5e0;
            border-radius: 3px;
        }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: #a0aec0;
        }

        /* Message Bubbles */
        .message-bubble {
            max-width: 85%;
            word-wrap: break-word;
            position: relative;
            animation: messageSlideIn 0.3s ease-out;
        }

        .message-bubble.user {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 18px 18px 4px 18px;
            margin-left: auto;
        }

        .message-bubble.bot {
            background: white;
            color: #374151;
            border: 1px solid #e5e7eb;
            border-radius: 18px 18px 18px 4px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .message-bubble.system {
            background: #f3f4f6;
            color: #6b7280;
            border-radius: 12px;
            text-align: center;
            font-size: 0.875rem;
            font-style: italic;
            margin: 0 auto;
        }

        /* Message Content */
        .message-content {
            padding: 12px 16px;
            line-height: 1.5;
        }

        .message-timestamp {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 4px;
            text-align: right;
        }

        .message-bubble.bot .message-timestamp {
            text-align: left;
        }

        /* Quick Action Buttons */
        .quick-action-btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 8px 12px;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            font-size: 0.75rem;
            white-space: nowrap;
            transition: all 0.2s;
            min-width: 60px;
        }

        .quick-action-btn:hover {
            background: #f3f4f6;
            border-color: #d1d5db;
            transform: translateY(-1px);
        }

        .quick-action-btn i {
            margin-bottom: 4px;
            font-size: 0.875rem;
            color: #6b7280;
        }

        /* Typing Indicator */
        .typing-indicator {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 18px 18px 18px 4px;
            max-width: 80px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #9ca3af;
            margin: 0 2px;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }

        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }
        .typing-dot:nth-child(3) { animation-delay: 0s; }

        /* Animations */
        @keyframes messageSlideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes typingAnimation {
            0%, 80%, 100% {
                transform: scale(0.8);
                opacity: 0.5;
            }
            40% {
                transform: scale(1);
                opacity: 1;
            }
        }

        /* Resize Handle */
        .resize-handle {
            z-index: 10;
        }

        .resize-handle:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }

        /* Toggle Switch */
        .toggle-switch {
            appearance: none;
            width: 48px;
            height: 24px;
            background: #e5e7eb;
            border-radius: 12px;
            position: relative;
            cursor: pointer;
            transition: background 0.3s;
        }

        .toggle-switch:checked {
            background: #10b981;
        }

        .toggle-switch::before {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: white;
            top: 2px;
            left: 2px;
            transition: transform 0.3s;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
        }

        .toggle-switch:checked::before {
            transform: translateX(24px);
        }

        /* Enhanced Chat Widget Styles */
        .chat-widget {
            width: 380px;
            height: 600px;
            max-width: calc(100vw - 2rem);
            max-height: calc(100vh - 2rem);
            min-width: 320px;
            min-height: 400px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            transform-origin: bottom right;
        }

        .chat-widget.minimized {
            height: auto;
        }

        .chat-widget.minimized .chat-messages,
        .chat-widget.minimized #quick-actions,
        .chat-widget.minimized .chat-input-area {
            display: none;
        }

        .chat-widget.maximized {
            width: 600px;
            height: 700px;
        }

        .chat-widget.fullscreen {
            position: fixed;
            top: 1rem;
            left: 1rem;
            right: 1rem;
            bottom: 1rem;
            width: calc(100vw - 2rem);
            height: calc(100vh - 2rem);
            border-radius: 16px;
        }

        /* Chat Messages Styling */
        .chat-messages {
            height: 320px;
            scrollbar-width: thin;
            scrollbar-color: #cbd5e0 #f7fafc;
        }

        .chat-messages::-webkit-scrollbar {
            width: 6px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: #f7fafc;
            border-radius: 3px;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: #cbd5e0;
            border-radius: 3px;
        }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: #a0aec0;
        }

        /* Message Bubbles */
        .message-bubble {
            max-width: 85%;
            word-wrap: break-word;
            position: relative;
            animation: messageSlideIn 0.3s ease-out;
        }

        .message-bubble.user {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 18px 18px 4px 18px;
            margin-left: auto;
        }

        .message-bubble.bot {
            background: white;
            color: #374151;
            border: 1px solid #e5e7eb;
            border-radius: 18px 18px 18px 4px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .message-bubble.system {
            background: #f3f4f6;
            color: #6b7280;
            border-radius: 12px;
            text-align: center;
            font-size: 0.875rem;
            font-style: italic;
            margin: 0 auto;
        }

        /* Message Content */
        .message-content {
            padding: 12px 16px;
            line-height: 1.5;
        }

        .message-timestamp {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 4px;
            text-align: right;
        }

        .message-bubble.bot .message-timestamp {
            text-align: left;
        }

        /* Quick Action Buttons */
        .quick-action-btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 8px 12px;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            font-size: 0.75rem;
            white-space: nowrap;
            transition: all 0.2s;
            min-width: 60px;
        }

        .quick-action-btn:hover {
            background: #f3f4f6;
            border-color: #d1d5db;
            transform: translateY(-1px);
        }

        .quick-action-btn i {
            margin-bottom: 4px;
            font-size: 0.875rem;
            color: #6b7280;
        }

        /* Typing Indicator */
        .typing-indicator {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 18px 18px 18px 4px;
            max-width: 80px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #9ca3af;
            margin: 0 2px;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }

        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }
        .typing-dot:nth-child(3) { animation-delay: 0s; }

        /* Animations */
        @keyframes messageSlideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes typingAnimation {
            0%, 80%, 100% {
                transform: scale(0.8);
                opacity: 0.5;
            }
            40% {
                transform: scale(1);
                opacity: 1;
            }
        }

        /* Resize Handle */
        .resize-handle {
            z-index: 10;
        }

        .resize-handle:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }

        /* Toggle Switch */
        .toggle-switch {
            appearance: none;
            width: 48px;
            height: 24px;
            background: #e5e7eb;
            border-radius: 12px;
            position: relative;
            cursor: pointer;
            transition: background 0.3s;
        }

        .toggle-switch:checked {
            background: #10b981;
        }

        .toggle-switch::before {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: white;
            top: 2px;
            left: 2px;
            transition: transform 0.3s;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
        }

        .toggle-switch:checked::before {
            transform: translateX(24px);
        }

        /* Chat Widget - Enhanced Version */
        #chat-widget {
            width: 380px;
            height: 600px;
            max-width: calc(100vw - 2rem);
            max-height: calc(100vh - 2rem);
            min-width: 320px;
            min-height: 400px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            transform-origin: bottom right;
        }

        #chat-widget.minimized {
            height: auto;
        }

        #chat-widget.minimized .chat-messages,
        #chat-widget.minimized #quick-actions,
        #chat-widget.minimized .chat-input-area {
            display: none;
        }

        #chat-widget.maximized {
            width: 600px;
            height: 700px;
        }

        #chat-widget.fullscreen {
            position: fixed;
            top: 1rem;
            left: 1rem;
            right: 1rem;
            bottom: 1rem;
            width: calc(100vw - 2rem);
            height: calc(100vh - 2rem);
            border-radius: 16px;
        }

        /* Chat Messages Styling */
        #chat-messages {
            height: 320px;
            scrollbar-width: thin;
            scrollbar-color: #cbd5e0 #f7fafc;
        }

        #chat-messages::-webkit-scrollbar {
            width: 6px;
        }

        #chat-messages::-webkit-scrollbar-track {
            background: #f7fafc;
            border-radius: 3px;
        }

        #chat-messages::-webkit-scrollbar-thumb {
            background: #cbd5e0;
            border-radius: 3px;
        }

        #chat-messages::-webkit-scrollbar-thumb:hover {
            background: #a0aec0;
        }

        /* Message Bubbles */
        .message-bubble {
            max-width: 85%;
            word-wrap: break-word;
            position: relative;
            animation: messageSlideIn 0.3s ease-out;
        }

        .message-bubble.user {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 18px 18px 4px 18px;
            margin-left: auto;
        }

        .message-bubble.bot {
            background: white;
            color: #374151;
            border: 1px solid #e5e7eb;
            border-radius: 18px 18px 18px 4px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .message-bubble.system {
            background: #f3f4f6;
            color: #6b7280;
            border-radius: 12px;
            text-align: center;
            font-size: 0.875rem;
            font-style: italic;
            margin: 0 auto;
        }

        /* Message Content */
        .message-content {
            padding: 12px 16px;
            line-height: 1.5;
        }

        .message-timestamp {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 4px;
            text-align: right;
        }

        .message-bubble.bot .message-timestamp {
            text-align: left;
        }

        /* Typing Indicator */
        .typing-indicator {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 18px 18px 18px 4px;
            max-width: 80px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #9ca3af;
            margin: 0 2px;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }

        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }
        .typing-dot:nth-child(3) { animation-delay: 0s; }

        /* Animations */
        @keyframes messageSlideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes typingAnimation {
            0%, 80%, 100% {
                transform: scale(0.8);
                opacity: 0.5;
            }
            40% {
                transform: scale(1);
                opacity: 1;
            }
        }

        /* Resize Handle */
        .resize-handle {
            z-index: 10;
        }

        .resize-handle:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }

        /* Enhanced Chat Widget Styles */
        .chat-widget {
            width: 380px;
            height: 600px;
            max-width: calc(100vw - 2rem);
            max-height: calc(100vh - 2rem);
            min-width: 320px;
            min-height: 400px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            transform-origin: bottom right;
        }

        .chat-widget.minimized {
            height: auto;
        }

        .chat-widget.minimized .chat-messages,
        .chat-widget.minimized #quick-actions,
        .chat-widget.minimized .chat-input-area {
            display: none;
        }

        .chat-widget.maximized {
            width: 600px;
            height: 700px;
        }

        .chat-widget.fullscreen {
            position: fixed;
            top: 1rem;
            left: 1rem;
            right: 1rem;
            bottom: 1rem;
            width: calc(100vw - 2rem);
            height: calc(100vh - 2rem);
            border-radius: 16px;
        }

        /* Chat Messages Styling */
        #chat-messages {
            height: 320px;
            scrollbar-width: thin;
            scrollbar-color: #cbd5e0 #f7fafc;
        }

        #chat-messages::-webkit-scrollbar {
            width: 6px;
        }

        #chat-messages::-webkit-scrollbar-track {
            background: #f7fafc;
            border-radius: 3px;
        }

        #chat-messages::-webkit-scrollbar-thumb {
            background: #cbd5e0;
            border-radius: 3px;
        }

        #chat-messages::-webkit-scrollbar-thumb:hover {
            background: #a0aec0;
        }

        /* Message Bubbles */
        .message-bubble {
            max-width: 85%;
            word-wrap: break-word;
            position: relative;
            animation: messageSlideIn 0.3s ease-out;
        }

        .message-bubble.user {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 18px 18px 4px 18px;
            margin-left: auto;
        }

        .message-bubble.bot {
            background: white;
            color: #374151;
            border: 1px solid #e5e7eb;
            border-radius: 18px 18px 18px 4px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .message-bubble.system {
            background: #f3f4f6;
            color: #6b7280;
            border-radius: 12px;
            text-align: center;
            font-size: 0.875rem;
            font-style: italic;
            margin: 0 auto;
        }

        /* Message Content */
        .message-content {
            padding: 12px 16px;
            line-height: 1.5;
        }

        .message-timestamp {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 4px;
            text-align: right;
        }

        .message-bubble.bot .message-timestamp {
            text-align: left;
        }

        /* Typing Indicator */
        .typing-indicator {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 18px 18px 18px 4px;
            max-width: 80px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #9ca3af;
            margin: 0 2px;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }

        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }
        .typing-dot:nth-child(3) { animation-delay: 0s; }

        /* Animations */
        @keyframes messageSlideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes typingAnimation {
            0%, 80%, 100% {
                transform: scale(0.8);
                opacity: 0.5;
            }
            40% {
                transform: scale(1);
                opacity: 1;
            }
        }

        /* Resize Handle */
        .resize-handle {
            z-index: 10;
        }

        .resize-handle:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }

        /* File upload styles */
        .file-item {
            display: flex;
            align-items: center;
            padding: 8px;
            background: #f9fafb;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            margin-top: 8px;
        }

        .file-item .file-icon {
            width: 24px;
            height: 24px;
            margin-right: 8px;
            color: #6b7280;
        }

        .file-item .file-name {
            flex: 1;
            font-size: 0.875rem;
            color: #374151;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .file-item .remove-file {
            color: #ef4444;
            cursor: pointer;
            padding: 4px;
        }

        .file-item .remove-file:hover {
            color: #dc2626;
        }

        /* Voice Recording Styles */
        .voice-recording {
            background: linear-gradient(135deg, #fee2e2, #fecaca);
            border: 2px solid #f87171;
        }

        .voice-wave {
            display: inline-flex;
            align-items: center;
            gap: 2px;
        }

        .voice-wave div {
            width: 3px;
            background: #ef4444;
            border-radius: 2px;
            animation: voice-wave 1.5s infinite ease-in-out;
        }

        .voice-wave div:nth-child(1) { animation-delay: 0s; height: 10px; }
        .voice-wave div:nth-child(2) { animation-delay: 0.1s; height: 15px; }
        .voice-wave div:nth-child(3) { animation-delay: 0.2s; height: 8px; }
        .voice-wave div:nth-child(4) { animation-delay: 0.3s; height: 12px; }
        .voice-wave div:nth-child(5) { animation-delay: 0.4s; height: 6px; }

        @keyframes voice-wave {
            0%, 40%, 100% { transform: scaleY(0.4); opacity: 0.5; }
            20% { transform: scaleY(1); opacity: 1; }
        }

        /* Voice button recording state */
        #voice-btn.recording {
            background: linear-gradient(135deg, #fef2f2, #fee2e2) !important;
            border: 2px solid #f87171;
            box-shadow: 0 0 20px rgba(239, 68, 68, 0.3);
        }

        #voice-btn.recording:hover {
            background: linear-gradient(135deg, #fee2e2, #fecaca) !important;
        }

        /* Permission request modal */
        .permission-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            z-index: 1000;
            max-width: 400px;
            width: 90%;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 min-h-screen">
    <div class="flex h-screen">
        <!-- Include Sidebar -->
        <%- include('../partials/student_sidebar', { 
            user: locals.user, 
            path: locals.path 
        }) %>

        <!-- Main Content -->
        <div class="flex-1 flex flex-col overflow-hidden ml-0 ">
            <!-- Include Header -->
            <%- include('../partials/dashboards_header') %>

            <!-- Main Content Area -->
            <main class="flex-1 overflow-x-hidden overflow-y-auto p-4 lg:p-8">
                <!-- Welcome Section -->
                <div class="mb-8 fade-in-up">
                    <div class="gradient-bg rounded-2xl p-6 lg:p-8 text-white">
                        <div class="flex flex-col lg:flex-row items-center justify-between">
                            <div class="mb-4 lg:mb-0">
                                <h1 class="text-2xl lg:text-4xl font-bold mb-2">
                                    Chào mừng, <%= (typeof user !== 'undefined' && user.fullName) ? user.fullName : 'Học viên' %>! 👋
                                </h1>
                                <p class="text-blue-100 text-sm lg:text-lg">
                                    <% if (dashboardData && dashboardData.progressStats) { %>
                                        Bạn đã hoàn thành <%= dashboardData.progressStats.completedLessons %> bài học. Hãy tiếp tục phát huy!
                                    <% } else { %>
                                        Hôm nay là ngày tuyệt vời để học tiếng Hàn. Hãy bắt đầu hành trình học tập của bạn!
                                    <% } %>
                                </p>
                            </div>
                            <div class="text-center">
                                <div class="bg-white bg-opacity-20 rounded-full p-4 mb-2">
                                    <i class="fas fa-graduation-cap text-3xl"></i>
                                </div>
                                <p class="text-sm font-medium">Cấp độ hiện tại</p>
                                <p class="text-lg font-bold">
                                    <% if (user && user.level) { %>
                                        <%= user.level === 'beginner' ? 'Sơ cấp' : user.level === 'intermediate' ? 'Trung cấp' : 'Cao cấp' %>
                                    <% } else { %>
                                        Sơ cấp
                                    <% } %>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Quick Stats -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-8">
                    <div class="bg-white rounded-xl p-6 card-hover fade-in-up" style="animation-delay: 0.1s">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-gray-500 text-sm font-medium">Khóa học đang tham gia</p>
                                <p class="text-2xl font-bold text-gray-900">
                                    <%= dashboardData ? dashboardData.progressStats.totalCourses : 0 %>
                                </p>
                            </div>
                            <div class="bg-blue-100 p-3 rounded-full">
                                <i class="fas fa-book text-blue-600 text-xl"></i>
                            </div>
                        </div>
                    </div>

                    <div class="bg-white rounded-xl p-6 card-hover fade-in-up" style="animation-delay: 0.2s">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-gray-500 text-sm font-medium">Bài học hoàn thành</p>
                                <p class="text-2xl font-bold text-gray-900">
                                    <%= dashboardData ? dashboardData.progressStats.completedLessons : 0 %>
                                </p>
                            </div>
                            <div class="bg-green-100 p-3 rounded-full">
                                <i class="fas fa-tasks text-green-600 text-xl"></i>
                            </div>
                        </div>
                    </div>

                    <div class="bg-white rounded-xl p-6 card-hover fade-in-up" style="animation-delay: 0.3s">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-gray-500 text-sm font-medium">Điểm trung bình</p>
                                <p class="text-2xl font-bold text-gray-900">
                                    <%= dashboardData ? dashboardData.progressStats.averageGrade.toFixed(1) : '0.0' %>
                                </p>
                            </div>
                            <div class="bg-yellow-100 p-3 rounded-full">
                                <i class="fas fa-star text-yellow-600 text-xl"></i>
                            </div>
                        </div>
                    </div>

                    <div class="bg-white rounded-xl p-6 card-hover fade-in-up" style="animation-delay: 0.4s">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-gray-500 text-sm font-medium">Tổng điểm</p>
                                <p class="text-2xl font-bold text-gray-900">
                                    <%= dashboardData ? dashboardData.progressStats.totalPoints : 0 %>
                                </p>
                            </div>
                            <div class="bg-purple-100 p-3 rounded-full">
                                <i class="fas fa-trophy text-purple-600 text-xl"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="bg-white rounded-xl p-6 lg:p-8 mb-8 fade-in-up">
                    <h2 class="text-xl lg:text-2xl font-bold text-gray-900 mb-6 flex items-center">
                        <i class="fas fa-rocket mr-3 text-indigo-600"></i>
                        Truy cập nhanh
                    </h2>
                    <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
                        <a href="/courses" class="flex flex-col items-center p-4 rounded-lg border-2 border-gray-100 hover:border-indigo-300 hover:bg-indigo-50 transition-all duration-300 card-hover">
                            <div class="bg-indigo-100 p-3 rounded-full mb-3">
                                <i class="fas fa-graduation-cap text-indigo-600 text-xl"></i>
                            </div>
                            <span class="text-sm font-medium text-gray-700 text-center">Khóa học</span>
                        </a>

                        <a href="/student/assignments/submit" class="flex flex-col items-center p-4 rounded-lg border-2 border-gray-100 hover:border-green-300 hover:bg-green-50 transition-all duration-300 card-hover">
                            <div class="bg-green-100 p-3 rounded-full mb-3">
                                <i class="fas fa-upload text-green-600 text-xl"></i>
                            </div>
                            <span class="text-sm font-medium text-gray-700 text-center">Nộp bài tập</span>
                        </a>

                        <a href="/student/grades" class="flex flex-col items-center p-4 rounded-lg border-2 border-gray-100 hover:border-yellow-300 hover:bg-yellow-50 transition-all duration-300 card-hover">
                            <div class="bg-yellow-100 p-3 rounded-full mb-3">
                                <i class="fas fa-chart-bar text-yellow-600 text-xl"></i>
                            </div>
                            <span class="text-sm font-medium text-gray-700 text-center">Xem điểm</span>
                        </a>

                        <a href="/student/resources" class="flex flex-col items-center p-4 rounded-lg border-2 border-gray-100 hover:border-purple-300 hover:bg-purple-50 transition-all duration-300 card-hover">
                            <div class="bg-purple-100 p-3 rounded-full mb-3">
                                <i class="fas fa-folder-open text-purple-600 text-xl"></i>
                            </div>
                            <span class="text-sm font-medium text-gray-700 text-center">Tài liệu</span>
                        </a>

                        <a href="/student/forum" class="flex flex-col items-center p-4 rounded-lg border-2 border-gray-100 hover:border-pink-300 hover:bg-pink-50 transition-all duration-300 card-hover">
                            <div class="bg-pink-100 p-3 rounded-full mb-3">
                                <i class="fas fa-comments text-pink-600 text-xl"></i>
                            </div>
                            <span class="text-sm font-medium text-gray-700 text-center">Diễn đàn</span>
                        </a>

                        <a href="/student/thematic-vocabulary" class="flex flex-col items-center p-4 rounded-lg border-2 border-gray-100 hover:border-red-300 hover:bg-red-50 transition-all duration-300 card-hover">
                            <div class="bg-red-100 p-3 rounded-full mb-3">
                                <i class="fas fa-language text-red-600 text-xl"></i>
                            </div>
                            <span class="text-sm font-medium text-gray-700 text-center">Từ vựng</span>
                        </a>
                    </div>
                </div>

                <!-- Recent Activity & Assignments -->
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8 mb-8">
                    <!-- Assignments Due Soon -->
                    <div class="bg-white rounded-xl p-6 lg:p-8 fade-in-up">
                        <h3 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
                            <i class="fas fa-clock mr-3 text-orange-600"></i>
                            Bài tập sắp đến hạn
                        </h3>
                        <div class="space-y-4">
                            <% if (dashboardData && dashboardData.recentAssignments && dashboardData.recentAssignments.length > 0) { %>
                                <% dashboardData.recentAssignments.slice(0, 3).forEach((assignment, index) => { %>
                                    <div class="border-l-4 border-orange-400 pl-4 py-3 bg-orange-50 rounded-r-lg slide-in">
                                        <h4 class="font-semibold text-gray-900"><%= assignment.title %></h4>
                                        <p class="text-sm text-gray-600 mb-2">
                                            <%= assignment.class ? assignment.class.name : 'Lớp học' %>
                                        </p>
                                        <div class="flex items-center justify-between">
                                            <span class="text-xs text-gray-500">
                                                <i class="fas fa-calendar mr-1"></i>
                                                Hạn: <%= new Date(assignment.dueDate).toLocaleDateString('vi-VN') %>
                                            </span>
                                            <% 
                                            let status = 'Chưa nộp';
                                            let statusClass = 'bg-red-100 text-red-800';
                                            const now = new Date();
                                            const dueDate = new Date(assignment.dueDate);
                                            
                                            if (now < dueDate) {
                                                status = 'Đang thực hiện';
                                                statusClass = 'bg-yellow-100 text-yellow-800';
                                            }
                                            %>
                                            <span class="px-2 py-1 rounded-full text-xs font-medium <%= statusClass %>">
                                                <%= status %>
                                            </span>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="text-center py-8">
                                    <i class="fas fa-check-circle text-green-500 text-4xl mb-4"></i>
                                    <p class="text-gray-500">Bạn đã hoàn thành tất cả bài tập!</p>
                                </div>
                            <% } %>
                        </div>
                        <div class="mt-6">
                            <a href="/student/assignments/submit" class="text-indigo-600 hover:text-indigo-800 font-medium text-sm flex items-center">
                                Xem tất cả bài tập
                                <i class="fas fa-arrow-right ml-2"></i>
                            </a>
                        </div>
                    </div>

                    <!-- Learning Progress -->
                    <div class="bg-white rounded-xl p-6 lg:p-8 fade-in-up">
                        <h3 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
                            <i class="fas fa-chart-line mr-3 text-blue-600"></i>
                            Lớp học đang tham gia
                        </h3>
                        <div class="space-y-6">
                            <% if (dashboardData && dashboardData.enrolledClasses && dashboardData.enrolledClasses.length > 0) { %>
                                <% dashboardData.enrolledClasses.slice(0, 3).forEach((classItem, index) => { %>
                                    <div class="border border-gray-100 rounded-lg p-4 hover:shadow-md transition-shadow">
                                        <div class="flex items-center justify-between mb-3">
                                            <h4 class="font-semibold text-gray-900"><%= classItem.name %></h4>
                                            <span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                                                <%= classItem.status === 'active' ? 'Đang học' : classItem.status %>
                                            </span>
                                        </div>
                                        <p class="text-sm text-gray-600 mb-3">
                                            <%= classItem.course ? classItem.course.title : 'Khóa học' %>
                                        </p>
                                        <div class="flex items-center text-xs text-gray-500">
                                            <i class="fas fa-user mr-1"></i>
                                            <span class="mr-4">
                                                GV: <%= classItem.teacher ? classItem.teacher.fullName : 'Chưa có' %>
                                            </span>
                                            <i class="fas fa-users mr-1"></i>
                                            <span><%= classItem.students ? classItem.students.length : 0 %> học viên</span>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="text-center py-8">
                                    <i class="fas fa-graduation-cap text-gray-400 text-4xl mb-4"></i>
                                    <p class="text-gray-500">Bạn chưa tham gia lớp học nào</p>
                                    <a href="/courses" class="text-indigo-600 hover:text-indigo-800 font-medium text-sm mt-2 inline-block">
                                        Khám phá khóa học
                                    </a>
                                </div>
                            <% } %>
                        </div>

                        <div class="mt-6 p-4 bg-blue-50 rounded-lg">
                            <div class="flex items-center">
                                <i class="fas fa-lightbulb text-blue-500 mr-3"></i>
                                <div>
                                    <p class="text-sm font-medium text-blue-900">Mẹo học tập</p>
                                    <p class="text-xs text-blue-700">Hãy dành ít nhất 30 phút mỗi ngày để ôn tập từ vựng!</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Recent Activities -->
                <div class="bg-white rounded-xl p-6 lg:p-8 mb-8 fade-in-up">
                    <h3 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
                        <i class="fas fa-clock mr-3 text-purple-600"></i>
                        Hoạt động gần đây
                    </h3>
                    <div class="space-y-4">
                        <% if (dashboardData && dashboardData.recentActivities && dashboardData.recentActivities.length > 0) { %>
                            <% dashboardData.recentActivities.forEach(function(activity, index) { %>
                                <div class="border-l-4 border-<%= activity.type === 'submission' ? 'green' : activity.type === 'grade' ? 'blue' : 'purple' %>-400 pl-4 py-3 bg-<%= activity.type === 'submission' ? 'green' : activity.type === 'grade' ? 'blue' : 'purple' %>-50 rounded-r-lg">
                                    <h4 class="font-semibold text-gray-900"><%= activity.title %></h4>
                                    <p class="text-sm text-gray-600 mt-1"><%= activity.description %></p>
                                    <span class="text-xs text-gray-500 mt-2 block">
                                        <i class="fas fa-calendar mr-1"></i>
                                        <%= activity.timeAgo %>
                                    </span>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="text-center py-8">
                                <i class="fas fa-info-circle text-4xl text-gray-300 mb-4"></i>
                                <p class="text-gray-500">Chưa có hoạt động nào gần đây</p>
                            </div>
                        <% } %>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Include Footer -->
    <%- include('../partials/student_footer') %>

    <!-- Chat Widget -->
    <div id="chat-widget" class="hidden fixed bottom-4 right-4 bg-white rounded-2xl shadow-2xl z-50 chat-widget resize-container">
        <!-- Header with Controls -->
        <div class="chat-header bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-t-2xl p-4 relative">
            <div class="flex justify-between items-center">
                <div class="flex items-center">
                    <div class="w-10 h-10 bg-white bg-opacity-20 rounded-full flex items-center justify-center mr-3 animate-pulse">
                        <i class="fas fa-robot text-lg"></i>
                    </div>
                    <div>
                        <h3 class="font-semibold text-lg">Hảo100 AI</h3>
                        <div class="flex items-center text-xs opacity-90">
                            <div class="w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse"></div>
                            <span>Đang hoạt động</span>
                        </div>
                    </div>
                </div>
                
                <!-- Control Buttons -->
                <div class="flex items-center space-x-2">
                    <!-- Close Button -->
                    <button id="close-chat" class="w-8 h-8 rounded-full bg-red-500 bg-opacity-80 hover:bg-opacity-100 transition-all duration-200 flex items-center justify-center" title="Đóng">
                        <i class="fas fa-times text-sm"></i>
                    </button>
                </div>
            </div>
            
            <!-- Resize Handle -->
            <div class="resize-handle absolute -bottom-1 -right-1 w-4 h-4 cursor-nw-resize">
                <div class="w-full h-full bg-white bg-opacity-30 rounded-tl-lg flex items-end justify-end p-1">
                    <div class="w-2 h-2 border-r-2 border-b-2 border-white border-opacity-60"></div>
                </div>
            </div>
        </div>

        <!-- Chat Messages Area -->
        <div id="chat-messages" class="chat-messages bg-gradient-to-b from-gray-50 to-white overflow-y-auto p-4 space-y-3 relative">
            <!-- Typing Indicator will be inserted here -->
        </div>

        <!-- Quick Actions -->
        <div id="quick-actions" class="px-4 py-2 bg-gray-50 border-t border-gray-100">
            <div class="flex space-x-2 overflow-x-auto pb-2">
                <button class="quick-action-btn" data-message="Xem điểm số của tôi">
                    <i class="fas fa-chart-bar"></i>
                    <span>Điểm số</span>
                </button>
                <button class="quick-action-btn" data-message="Lịch học hôm nay">
                    <i class="fas fa-calendar"></i>
                    <span>Lịch học</span>
                </button>
                <button class="quick-action-btn" data-message="Bài tập sắp đến hạn">
                    <i class="fas fa-tasks"></i>
                    <span>Bài tập</span>
                </button>
                <button class="quick-action-btn" data-message="Học từ vựng tiếng Hàn">
                    <i class="fas fa-language"></i>
                    <span>Từ vựng</span>
                </button>
            </div>
        </div>

        <!-- Input Area -->
        <div class="chat-input-area bg-white border-t border-gray-100 rounded-b-2xl p-4">
            <form id="chat-form" class="space-y-3">
                <!-- File Upload Area (Hidden by default) -->
                <div id="file-upload-area" class="hidden p-3 bg-blue-50 rounded-lg border border-blue-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <i class="fas fa-paperclip text-blue-500 mr-2"></i>
                            <span class="text-sm text-blue-700">Đính kèm file (hỗ trợ ảnh, PDF, Word)</span>
                        </div>
                        <button type="button" onclick="document.getElementById('file-input').click()" class="text-blue-500 hover:text-blue-700">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                    <input type="file" id="file-input" class="hidden" accept="image/*,.pdf,.doc,.docx" multiple>
                </div>

                <!-- Main Input -->
                <div class="flex space-x-2">

                    <!-- Text Input -->
                    <div class="flex-1 relative">
                        <input 
                            type="text" 
                            id="chat-input"
                            class="w-full p-3 pr-12 border border-gray-300 rounded-xl focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all resize-none"
                            placeholder="Nhập câu hỏi của bạn..."
                            maxlength="500"
                            autocomplete="off"
                        >
                        <!-- Character Counter -->
                        <div class="absolute bottom-1 right-3 text-xs text-gray-400">
                            <span id="char-counter">0</span>/500
                        </div>
                    </div>

                    <!-- Voice Input Button -->
                    <button type="button" id="voice-btn" class="flex-shrink-0 w-10 h-10 bg-green-100 hover:bg-green-200 rounded-xl flex items-center justify-center transition-colors" title="Ghi âm">
                        <i class="fas fa-microphone text-green-600"></i>
                    </button>

                    <!-- Send Button -->
                    <button type="submit" id="send-btn" class="flex-shrink-0 w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:from-blue-600 hover:to-purple-700 transition-all duration-300 flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Chat Toggle Button -->
    <button id="chat-toggle" class="fixed bottom-6 right-6 bg-gradient-to-r from-blue-500 to-purple-600 text-white p-4 rounded-full shadow-lg hover:from-blue-600 hover:to-purple-700 transition-all duration-300 transform hover:scale-110 chat-toggle">
        <i class="fas fa-robot text-xl"></i>
        <!-- Notification Badge -->
        <div id="chat-notification" class="hidden absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
            <span class="text-white text-xs font-bold">1</span>
        </div>
    </button>

    <!-- Settings Modal -->
    <div id="chat-settings-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-60 flex items-center justify-center">
        <div class="bg-white rounded-2xl p-6 w-96 max-w-90vw">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">Cài đặt Chat</h3>
                <button id="close-settings" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="space-y-4">
                <!-- Sound Settings -->
                <div class="flex justify-between items-center">
                    <label class="text-sm font-medium">Âm thanh thông báo</label>
                    <input type="checkbox" id="sound-toggle" class="toggle-switch">
                </div>
                
                <!-- Auto-scroll Settings -->
                <div class="flex justify-between items-center">
                    <label class="text-sm font-medium">Tự động cuộn xuống</label>
                    <input type="checkbox" id="autoscroll-toggle" class="toggle-switch" checked>
                </div>
                
                <!-- Font Size -->
                <div>
                    <label class="text-sm font-medium block mb-2">Kích thước chữ</label>
                    <input type="range" id="font-size-slider" min="12" max="18" value="14" class="w-full">
                </div>
                
                <!-- Clear History -->
                <div class="pt-4 border-t">
                    <button id="clear-history-btn" class="w-full bg-red-500 text-white py-2 rounded-lg hover:bg-red-600 transition-colors">
                        Xóa lịch sử chat
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Page animations
        document.addEventListener('DOMContentLoaded', function() {
            // Animate cards on load
            const cards = document.querySelectorAll('.fade-in-up');
            cards.forEach((card, index) => {
                card.style.animationDelay = `${index * 0.1}s`;
            });

            // Initialize chatbot
            chatbot.init();

            // Add hover effects to quick action links
            const quickActions = document.querySelectorAll('a[href]');
            quickActions.forEach(link => {
                link.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-2px)';
                });
                
                link.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            });
        });

        // Chatbot functionality with API integration
        const chatbot = {
            isTyping: false,
            isRecording: false,
            recognition: null,
            
            init() {
                this.bindEvents();
                this.addWelcomeMessage();
                this.loadChatHistory();
                this.initSpeechRecognition();
            },

            initSpeechRecognition() {
                // Check if browser supports Speech Recognition
                if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                    this.recognition = new SpeechRecognition();
                    
                    this.recognition.continuous = false;
                    this.recognition.interimResults = false;
                    this.recognition.lang = 'vi-VN'; // Vietnamese language
                    
                    this.recognition.onstart = () => {
                        this.isRecording = true;
                        this.updateVoiceButton();
                        this.showVoiceIndicator();
                    };
                    
                    this.recognition.onresult = (event) => {
                        const transcript = event.results[0][0].transcript;
                        const confidence = event.results[0][0].confidence;
                        
                        if (confidence > 0.5) {
                            document.getElementById('chat-input').value = transcript;
                            this.showNotification('✅ Đã nhận diện: ' + transcript, 'success');
                        } else {
                            this.showNotification('⚠️ Không nhận diện rõ, vui lòng thử lại', 'warning');
                        }
                    };
                    
                    this.recognition.onerror = (event) => {
                        console.error('Speech recognition error:', event.error);
                        let errorMessage = 'Lỗi nhận diện giọng nói';
                        
                        switch(event.error) {
                            case 'no-speech':
                                errorMessage = 'Không nghe thấy giọng nói. Vui lòng thử lại.';
                                break;
                            case 'audio-capture':
                                errorMessage = 'Không thể truy cập microphone.';
                                break;
                            case 'not-allowed':
                                errorMessage = 'Vui lòng cho phép truy cập microphone.';
                                break;
                            case 'network':
                                errorMessage = 'Lỗi kết nối mạng.';
                                break;
                        }
                        
                        this.showNotification('❌ ' + errorMessage, 'error');
                    };
                    
                    this.recognition.onend = () => {
                        this.isRecording = false;
                        this.updateVoiceButton();
                        this.hideVoiceIndicator();
                    };
                } else {
                    // Hide voice button if not supported
                    const voiceBtn = document.getElementById('voice-btn');
                    if (voiceBtn) {
                        voiceBtn.style.display = 'none';
                    }
                    console.warn('Speech Recognition not supported in this browser');
                }
            },

            bindEvents() {
                const toggle = document.getElementById('chat-toggle');
                const close = document.getElementById('close-chat');
                const widget = document.getElementById('chat-widget');
                const form = document.getElementById('chat-form');
                const voiceBtn = document.getElementById('voice-btn');

                toggle?.addEventListener('click', () => {
                    widget.classList.remove('hidden');
                    toggle.classList.add('hidden');
                    setTimeout(() => {
                        document.getElementById('chat-input')?.focus();
                    }, 300);
                });

                close?.addEventListener('click', () => {
                    this.closeChat();
                });

                form?.addEventListener('submit', this.handleSubmit.bind(this));

                // Voice recording button
                voiceBtn?.addEventListener('click', () => {
                    this.toggleVoiceRecording();
                });

                // Close chat when clicking outside
                document.addEventListener('click', (e) => {
                    if (!widget?.contains(e.target) && !toggle?.contains(e.target)) {
                        if (!widget?.classList.contains('hidden')) {
                            this.closeChat();
                        }
                    }
                });

                // Add keyboard shortcuts
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape' && !widget?.classList.contains('hidden')) {
                        this.closeChat();
                    }
                    // Press and hold Space to record (when chat input is focused)
                    if (e.code === 'Space' && e.ctrlKey && document.getElementById('chat-input') === document.activeElement) {
                        e.preventDefault();
                        this.startVoiceRecording();
                    }
                });

                // Release Ctrl+Space to stop recording
                document.addEventListener('keyup', (e) => {
                    if (e.code === 'Space' && this.isRecording) {
                        this.stopVoiceRecording();
                    }
                });
            },

            closeChat() {
                document.getElementById('chat-widget')?.classList.add('hidden');
                document.getElementById('chat-toggle')?.classList.remove('hidden');
            },

            async loadChatHistory() {
                try {
                    const response = await fetch('/api/chat/history?limit=5', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        if (data.success && data.history.length > 0) {
                            const messages = document.getElementById('chat-messages');
                            messages.innerHTML = ''; // Clear welcome message
                            
                            data.history.forEach(chat => {
                                this.addMessage('user', chat.message, false);
                                this.addMessage('bot', chat.response, false);
                            });
                            
                            // Add separator
                            this.addMessage('system', '--- Phiên chat mới ---', false);
                        }
                    }
                } catch (error) {
                    console.error('Error loading chat history:', error);
                }
            },

            addWelcomeMessage() {
                const currentHour = new Date().getHours();
                let greeting = 'Xin chào';
                
                if (currentHour < 12) greeting = 'Chào buổi sáng';
                else if (currentHour < 18) greeting = 'Chào buổi chiều';
                else greeting = 'Chào buổi tối';

                this.addMessage('bot', `${greeting}! Tôi là Hảo100 - trợ lý AI của bạn. 🤖\n\nTôi có thể giúp bạn:\n• 📊 Kiểm tra điểm số và tiến độ học tập\n• 📚 Học từ vựng và ngữ pháp tiếng Hàn\n• 📅 Xem lịch học và bài tập\n• 💡 Tư vấn phương pháp học tập hiệu quả\n• ❓ Trả lời các câu hỏi về khóa học\n\n💬 Hãy thử các nút bên dưới hoặc gõ câu hỏi của bạn!`, false);
            },

            async handleSubmit(e) {
                e.preventDefault();
                
                if (this.isTyping) return;
                
                const input = document.getElementById('chat-input');
                const message = input.value.trim();
                
                if (!message) return;

                // Validate message length
                if (message.length > 500) {
                    this.showError('Tin nhắn quá dài (tối đa 500 ký tự)');
                    return;
                }

                this.addMessage('user', message);
                input.value = '';
                input.disabled = true;
                this.isTyping = true;

                // Show typing indicator
                this.showTyping();

                try {
                    const response = await fetch('/api/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ 
                            message,
                            courseId: this.getCurrentCourseId(),
                            assignmentId: this.getCurrentAssignmentId()
                        })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        this.hideTyping();
                        this.addMessage('bot', data.response);
                    } else {
                        throw new Error(data.message || 'Lỗi từ server');
                    }

                } catch (error) {
                    console.error('Chat API error:', error);
                    this.hideTyping();
                    
                    let errorMessage = 'Xin lỗi, đã có lỗi xảy ra. Vui lòng thử lại sau. 😔';
                    
                    if (error.message.includes('fetch')) {
                        errorMessage = 'Không thể kết nối đến server. Vui lòng kiểm tra kết nối mạng.';
                    }
                    
                    this.addMessage('bot', errorMessage);
                    this.showError('Lỗi kết nối. Vui lòng thử lại.');
                    
                } finally {
                    input.disabled = false;
                    input.focus();
                    this.isTyping = false;
                }
            },

            getCurrentCourseId() {
                // Try to get course ID from URL or page context
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get('courseId') || null;
            },

            getCurrentAssignmentId() {
                // Try to get assignment ID from URL or page context
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get('assignmentId') || null;
            },

            // Voice Recording Methods
            toggleVoiceRecording() {
                if (!this.recognition) {
                    this.showNotification('❌ Trình duyệt không hỗ trợ nhận diện giọng nói', 'error');
                    return;
                }

                if (this.isRecording) {
                    this.stopVoiceRecording();
                } else {
                    this.startVoiceRecording();
                }
            },

            startVoiceRecording() {
                if (!this.recognition || this.isRecording) return;

                try {
                    this.recognition.start();
                    this.showNotification('🎤 Đang nghe... Hãy nói câu hỏi của bạn', 'info');
                } catch (error) {
                    console.error('Error starting voice recognition:', error);
                    this.showNotification('❌ Không thể bắt đầu ghi âm', 'error');
                }
            },

            stopVoiceRecording() {
                if (!this.recognition || !this.isRecording) return;

                try {
                    this.recognition.stop();
                } catch (error) {
                    console.error('Error stopping voice recognition:', error);
                }
            },

            updateVoiceButton() {
                const voiceBtn = document.getElementById('voice-btn');
                if (!voiceBtn) return;

                if (this.isRecording) {
                    voiceBtn.classList.remove('bg-green-100', 'hover:bg-green-200');
                    voiceBtn.classList.add('bg-red-100', 'hover:bg-red-200', 'animate-pulse');
                    voiceBtn.innerHTML = '<i class="fas fa-stop text-red-600"></i>';
                    voiceBtn.title = 'Dừng ghi âm';
                } else {
                    voiceBtn.classList.remove('bg-red-100', 'hover:bg-red-200', 'animate-pulse');
                    voiceBtn.classList.add('bg-green-100', 'hover:bg-green-200');
                    voiceBtn.innerHTML = '<i class="fas fa-microphone text-green-600"></i>';
                    voiceBtn.title = 'Ghi âm (Ctrl + Space)';
                }
            },

            showVoiceIndicator() {
                // Add voice recording indicator to chat
                const messages = document.getElementById('chat-messages');
                const indicatorDiv = document.createElement('div');
                indicatorDiv.id = 'voice-indicator';
                indicatorDiv.className = 'flex justify-center my-2 message-animation';
                indicatorDiv.innerHTML = `
                    <div class="bg-red-100 text-red-700 px-4 py-2 rounded-full flex items-center space-x-2 animate-pulse">
                        <i class="fas fa-microphone text-red-600"></i>
                        <span class="text-sm font-medium">Đang ghi âm...</span>
                        <div class="flex space-x-1">
                            <div class="w-1 h-4 bg-red-400 rounded animate-bounce" style="animation-delay: 0s"></div>
                            <div class="w-1 h-4 bg-red-400 rounded animate-bounce" style="animation-delay: 0.1s"></div>
                            <div class="w-1 h-4 bg-red-400 rounded animate-bounce" style="animation-delay: 0.2s"></div>
                        </div>
                    </div>
                `;
                messages.appendChild(indicatorDiv);
                messages.scrollTop = messages.scrollHeight;
            },

            hideVoiceIndicator() {
                const indicator = document.getElementById('voice-indicator');
                if (indicator) {
                    indicator.remove();
                }
            },

            showTyping() {
                const messages = document.getElementById('chat-messages');
                const typingDiv = document.createElement('div');
                typingDiv.id = 'typing-indicator';
                typingDiv.className = 'flex justify-start message-animation';
                typingDiv.innerHTML = `
                    <div class="typing-indicator">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                `;
                messages.appendChild(typingDiv);
                messages.scrollTop = messages.scrollHeight;
            },

            hideTyping() {
                document.getElementById('typing-indicator')?.remove();
            },

            addMessage(sender, text, animate = true) {
                const messages = document.getElementById('chat-messages');
                const messageEl = document.createElement('div');
                
                let className = 'flex message-animation';
                let bubbleClass = 'message-bubble';
                
                if (sender === 'user') {
                    className += ' justify-end';
                    bubbleClass += ' user';
                } else if (sender === 'system') {
                    className += ' justify-center';
                    bubbleClass += ' system';
                } else {
                    className += ' justify-start';
                    bubbleClass += ' bot';
                }
                
                messageEl.className = className;
                
                const timestamp = new Date().toLocaleTimeString('vi-VN', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
                
                const formattedText = text.replace(/\n/g, '<br>');
                
                messageEl.innerHTML = `
                    <div class="${bubbleClass}">
                        <div class="message-content">${formattedText}</div>
                        ${sender !== 'system' ? `<div class="message-timestamp">${timestamp}</div>` : ''}
                    </div>
                `;
                
                messages.appendChild(messageEl);
                
                if (animate) {
                    setTimeout(() => {
                        messages.scrollTop = messages.scrollHeight;
                    }, 50);
                } else {
                    messages.scrollTop = messages.scrollHeight;
                }
            },

            showError(message) {
                // Create a temporary error notification
                const notification = document.createElement('div');
                notification.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
                notification.innerHTML = `
                    <div class="flex items-center">
                        <i class="fas fa-exclamation-triangle mr-2"></i>
                        ${message}
                        <button onclick="this.parentElement.parentElement.remove()" class="ml-2">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, 5000);
            }
        };

        // Quick Actions Handler
        const QuickActionsHandler = {
            init() {
                this.bindEvents();
                this.addTooltips();
                this.addAnimations();
            },

            bindEvents() {
                // Bind click events to quick action buttons
                document.querySelectorAll('.quick-action-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => this.handleQuickAction(e));
                    
                    // Add hover effects
                    btn.addEventListener('mouseenter', (e) => this.onButtonHover(e));
                    btn.addEventListener('mouseleave', (e) => this.onButtonLeave(e));
                });
            },

            handleQuickAction(event) {
                const button = event.currentTarget;
                const message = button.getAttribute('data-message');
                
                if (!message) {
                    console.warn('No message found for quick action button');
                    return;
                }

                // Add click animation
                this.animateClick(button);
                
                // Check if chat widget is open
                const chatWidget = document.getElementById('chat-widget');
                const isHidden = chatWidget?.classList.contains('hidden');
                
                if (isHidden) {
                    // Open chat widget first
                    this.openChatWidget();
                    
                    // Wait for chat to open, then send message
                    setTimeout(() => {
                        this.sendQuickMessage(message);
                    }, 300);
                } else {
                    // Chat is already open, send message immediately
                    this.sendQuickMessage(message);
                }
                
                // Show feedback
                this.showFeedback(button);
            },

            sendQuickMessage(message) {
                const chatInput = document.getElementById('chat-input');
                
                if (chatInput) {
                    // Set the message in input
                    chatInput.value = message;
                    
                    // Focus on input
                    chatInput.focus();
                    
                    // Trigger form submission
                    const chatForm = document.getElementById('chat-form');
                    if (chatForm) {
                        const submitEvent = new Event('submit', { 
                            bubbles: true, 
                            cancelable: true 
                        });
                        chatForm.dispatchEvent(submitEvent);
                    }
                } else {
                    console.error('Chat input not found');
                    this.showError('Không thể gửi tin nhắn. Vui lòng thử lại.');
                }
            },

            openChatWidget() {
                const chatToggle = document.getElementById('chat-toggle');
                if (chatToggle) {
                    chatToggle.click();
                }
            },

            animateClick(button) {
                // Add click animation
                button.style.transform = 'scale(0.95)';
                button.style.transition = 'transform 0.1s ease';
                
                setTimeout(() => {
                    button.style.transform = 'scale(1)';
                }, 100);
                
                // Add ripple effect
                this.createRipple(button);
            },

            createRipple(button) {
                const ripple = document.createElement('div');
                ripple.style.cssText = `
                    position: absolute;
                    border-radius: 50%;
                    background: rgba(59, 130, 246, 0.3);
                    transform: scale(0);
                    animation: ripple 0.6s linear;
                    pointer-events: none;
                    z-index: 1;
                `;
                
                const rect = button.getBoundingClientRect();
                const size = Math.max(rect.width, rect.height);
                ripple.style.width = ripple.style.height = size + 'px';
                ripple.style.left = '50%';
                ripple.style.top = '50%';
                ripple.style.marginLeft = -(size / 2) + 'px';
                ripple.style.marginTop = -(size / 2) + 'px';
                
                button.style.position = 'relative';
                button.style.overflow = 'hidden';
                button.appendChild(ripple);
                
                setTimeout(() => {
                    ripple.remove();
                }, 600);
            },

            onButtonHover(event) {
                const button = event.currentTarget;
                const icon = button.querySelector('i');
                
                // Add hover animation
                button.style.transform = 'translateY(-2px)';
                button.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
                
                // Animate icon
                if (icon) {
                    icon.style.transform = 'scale(1.1)';
                    icon.style.transition = 'transform 0.2s ease';
                }
            },

            onButtonLeave(event) {
                const button = event.currentTarget;
                const icon = button.querySelector('i');
                
                // Reset hover animation
                button.style.transform = 'translateY(0)';
                button.style.boxShadow = '';
                
                // Reset icon
                if (icon) {
                    icon.style.transform = 'scale(1)';
                }
            },

            showFeedback(button) {
                const span = button.querySelector('span');
                const originalText = span.textContent;
                
                // Show feedback
                span.textContent = '✓ Đã gửi';
                button.style.backgroundColor = '#10b981';
                button.style.color = 'white';
                button.style.borderColor = '#10b981';
                
                // Reset after delay
                setTimeout(() => {
                    span.textContent = originalText;
                    button.style.backgroundColor = '';
                    button.style.color = '';
                    button.style.borderColor = '';
                }, 1500);
            },

            addTooltips() {
                document.querySelectorAll('.quick-action-btn').forEach(btn => {
                    const message = btn.getAttribute('data-message');
                    if (message) {
                        btn.title = `Nhấn để hỏi: "${message}"`;
                    }
                });
            },

            addAnimations() {
                // Add staggered entrance animations
                const buttons = document.querySelectorAll('.quick-action-btn');
                buttons.forEach((btn, index) => {
                    btn.style.opacity = '0';
                    btn.style.transform = 'translateY(10px)';
                    btn.style.transition = 'all 0.3s ease';
                    
                    setTimeout(() => {
                        btn.style.opacity = '1';
                        btn.style.transform = 'translateY(0)';
                    }, index * 100 + 500); // Stagger animation
                });
            },

            showError(message) {
                const notification = document.createElement('div');
                notification.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
                notification.innerHTML = `
                    <div class="flex items-center">
                        <i class="fas fa-exclamation-triangle mr-2"></i>
                        ${message}
                        <button onclick="this.parentElement.parentElement.remove()" class="ml-2">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, 5000);
            }
        };

        // Initialize chatbot when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize chatbot
            chatbot.init();
            
            // Initialize Quick Actions
            QuickActionsHandler.init();
            
            // Other existing initialization code...
            const cards = document.querySelectorAll('.fade-in-up');
            cards.forEach((card, index) => {
                card.style.animationDelay = `${index * 0.1}s`;
            });

            // Simulate learning progress updates
            setTimeout(() => {
                const progressBars = document.querySelectorAll('.progress-bar');
                progressBars.forEach(bar => {
                    const width = bar.style.width;
                    bar.style.width = '0%';
                    setTimeout(() => {
                        bar.style.width = width;
                    }, 500);
                });
            }, 1000);
        });

        // Enhanced notification system
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'} mr-2"></i>
                        ${message}
                    </div>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-2 opacity-70 hover:opacity-100">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.classList.add('show');
            }, 100);
            
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.classList.remove('show');
                    setTimeout(() => {
                        if (notification.parentElement) {
                            notification.remove();
                        }
                    }, 300);
                }
            }, 5000);
        }
    </script>
</body>
</html>
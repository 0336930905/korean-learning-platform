<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tạo lớp học mới | Giảng viên</title>
    <link rel="stylesheet" href="/style/style.css">
    <link rel="stylesheet" href="/style/teacher.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        .glass-card {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .card-hover {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .card-hover:hover {
            transform: translateY(-8px);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
        }
        
        .floating-animation {
            animation: float 3s ease-in-out infinite;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-8px); }
        }
        
        .slide-in {
            animation: slideIn 0.6s ease-out forwards;
        }
        
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .gradient-text {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .btn-3d {
            position: relative;
            transform-style: preserve-3d;
            transition: all 0.3s ease;
            overflow: hidden;
        }
        
        .btn-3d::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            transition: all 0.4s ease;
            transform: translate(-50%, -50%);
        }
        
        .btn-3d:hover::before {
            width: 200%;
            height: 200%;
        }
        
        .btn-3d:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        }
        
        .header-icon {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 32px;
            margin-bottom: 24px;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        }
        
        .form-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 25px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        .form-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 32px;
            position: relative;
            overflow: hidden;
        }
        
        .form-header::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 100%;
            height: 200%;
            background: rgba(255, 255, 255, 0.1);
            transform: rotate(45deg);
            animation: shimmer 3s infinite;
        }
        
        @keyframes shimmer {
            0%, 100% { transform: translateX(-100%) rotate(45deg); }
            50% { transform: translateX(100%) rotate(45deg); }
        }
        
        .form-group {
            position: relative;
            margin-bottom: 24px;
        }
        
        .form-label {
            display: block;
            font-size: 16px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 8px;
            position: relative;
        }
        
        .form-label .required {
            color: #ef4444;
            margin-left: 4px;
        }
        
        .form-input {
            width: 100%;
            padding: 16px 20px;
            border: 2px solid rgba(102, 126, 234, 0.2);
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            font-size: 16px;
            color: #374151;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .form-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
            transform: scale(1.02);
            outline: none;
        }
        
        .form-input:invalid {
            border-color: #ef4444;
        }
        
        .form-input:valid {
            border-color: #10b981;
        }
        
        .form-textarea {
            resize: vertical;
            min-height: 120px;
        }
        
        .file-upload {
            position: relative;
            display: block;
            width: 100%;
            cursor: pointer;
        }
        
        .file-upload input[type=file] {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }
        
        .file-upload-area {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 200px;
            border: 3px dashed rgba(102, 126, 234, 0.3);
            border-radius: 16px;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.05), rgba(118, 75, 162, 0.05));
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .file-upload-area::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(102, 126, 234, 0.1), transparent);
            transition: left 0.5s ease;
        }
        
        .file-upload:hover .file-upload-area::before {
            left: 100%;
        }
        
        .file-upload:hover .file-upload-area {
            border-color: #667eea;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            transform: scale(1.02);
        }
        
        .file-upload-icon {
            font-size: 48px;
            color: #667eea;
            margin-bottom: 16px;
            transition: all 0.3s ease;
        }
        
        .file-upload:hover .file-upload-icon {
            transform: scale(1.1);
            color: #5a67d8;
        }
        
        .file-upload-text {
            font-size: 18px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 8px;
        }
        
        .file-upload-hint {
            font-size: 14px;
            color: #6b7280;
        }
        
        .file-preview {
            display: none;
            margin-top: 16px;
            padding: 16px;
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(52, 211, 153, 0.1));
            border: 2px solid #10b981;
            border-radius: 12px;
            animation: slideIn 0.3s ease;
        }
        
        .file-preview-item {
            display: flex;
            align-items: center;
            space-x: 12px;
        }
        
        .file-preview-icon {
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, #10b981, #34d399);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 20px;
        }
        
        .file-preview-info h4 {
            font-weight: 600;
            color: #374151;
            margin: 0;
        }
        
        .file-preview-info p {
            font-size: 14px;
            color: #6b7280;
            margin: 0;
        }
        
        .progress-bar {
            margin-top: 16px;
            background: #e5e7eb;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .progress-fill {
            height: 8px;
            background: linear-gradient(90deg, #10b981, #34d399);
            width: 0%;
            transition: width 0.3s ease;
        }
        
        .course-info {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            border: 2px solid rgba(102, 126, 234, 0.2);
            border-radius: 16px;
            padding: 20px;
            margin-bottom: 32px;
        }
        
        .course-info-header {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
        }
        
        .course-icon {
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 20px;
            margin-right: 16px;
        }
        
        .breadcrumb {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 16px 24px;
            margin-bottom: 24px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        .breadcrumb-item {
            display: inline-flex;
            align-items: center;
            color: #6b7280;
            font-size: 14px;
            font-weight: 500;
        }
        
        .breadcrumb-item.active {
            color: #667eea;
            font-weight: 600;
        }
        
        .breadcrumb-separator {
            margin: 0 12px;
            color: #d1d5db;
        }
        
        .notification {
            position: fixed;
            top: 24px;
            right: 24px;
            padding: 16px 24px;
            border-radius: 12px;
            color: white;
            font-weight: 600;
            z-index: 10000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        .notification.success {
            background: linear-gradient(135deg, #10b981, #34d399);
        }
        
        .notification.error {
            background: linear-gradient(135deg, #ef4444, #f87171);
        }
        
        .fade-in {
            animation: fadeIn 0.8s ease-out forwards;
        }
        
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .form-step {
            opacity: 0;
            transform: translateX(20px);
            animation: slideInRight 0.6s ease-out forwards;
        }
        
        @keyframes slideInRight {
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        .input-icon {
            position: absolute;
            left: 16px;
            top: 50%;
            transform: translateY(-50%);
            color: #667eea;
            font-size: 18px;
        }
        
        .form-input.has-icon {
            padding-left: 50px;
        }
        
        .validation-message {
            display: none;
            margin-top: 8px;
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
        }
        
        .validation-message.error {
            background: rgba(239, 68, 68, 0.1);
            color: #dc2626;
            border: 1px solid rgba(239, 68, 68, 0.2);
        }
        
        .validation-message.success {
            background: rgba(16, 185, 129, 0.1);
            color: #059669;
            border: 1px solid rgba(16, 185, 129, 0.2);
        }
        
        .action-buttons {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 32px;
            border-top: 1px solid rgba(102, 126, 234, 0.1);
        }
        
        .btn-secondary {
            background: rgba(107, 114, 128, 0.1);
            color: #374151;
            border: 2px solid rgba(107, 114, 128, 0.2);
            padding: 12px 24px;
            border-radius: 12px;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            transition: all 0.3s ease;
        }
        
        .btn-secondary:hover {
            background: rgba(107, 114, 128, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(107, 114, 128, 0.2);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 14px 32px;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
            position: relative;
            overflow: hidden;
        }
        
        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .btn-primary:not(:disabled):hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }
        
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(8px);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }
        
        .loading-spinner {
            width: 60px;
            height: 60px;
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .char-counter {
            text-align: right;
            font-size: 12px;
            color: #9ca3af;
            margin-top: 4px;
        }
        
        .char-counter.warning {
            color: #f59e0b;
        }
        
        .char-counter.error {
            color: #ef4444;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 min-h-screen">
    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
    </div>

    <div class="flex h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50">
        <%- include('../partials/teacher_sidebar') %>

        <div class="flex-1 flex flex-col overflow-hidden">
            <%- include('../partials/dashboards_header') %>

            <main class="flex-1 overflow-x-hidden overflow-y-auto p-6">
                <!-- Hero Section -->
                <div class="text-center mb-8 slide-in">
                    <div class="header-icon floating-animation mx-auto">
                        <i class="fas fa-plus-circle"></i>
                    </div>
                    <h1 class="text-4xl font-bold gradient-text mb-4">Tạo lớp học mới</h1>
                    <p class="text-xl text-gray-600">Xây dựng môi trường học tập chuyên nghiệp</p>
                </div>

                <!-- Breadcrumb -->
                <div class="breadcrumb slide-in">
                    <span class="breadcrumb-item">
                        <i class="fas fa-home mr-2"></i>
                        Trang chủ
                    </span>
                    <span class="breadcrumb-separator">/</span>
                    <a href="/teacher/classes" class="breadcrumb-item hover:text-blue-600 transition-colors">
                        <i class="fas fa-chalkboard mr-2"></i>
                        Lớp học
                    </a>
                    <span class="breadcrumb-separator">/</span>
                    <span class="breadcrumb-item active">
                        <i class="fas fa-plus mr-2"></i>
                        Tạo mới
                    </span>
                </div>

                <!-- Course Info -->
                <div class="course-info slide-in card-hover">
                    <div class="course-info-header">
                        <div class="course-icon floating-animation">
                            <i class="fas fa-book"></i>
                        </div>
                        <div>
                            <h3 class="text-xl font-bold text-gray-800 mb-1">Khóa học gốc</h3>
                            <p class="text-gray-600 font-medium"><%= course.title %></p>
                        </div>
                    </div>
                    <p class="text-gray-600">
                        <i class="fas fa-info-circle mr-2 text-blue-500"></i>
                        Lớp học sẽ được tạo dựa trên khóa học này với đầy đủ nội dung và tài liệu
                    </p>
                </div>

                <!-- Main Form -->
                <div class="form-card slide-in fade-in card-hover">
                    <div class="form-header">
                        <div class="relative z-10">
                            <h2 class="text-2xl font-bold mb-2">Thông tin lớp học</h2>
                            <p class="opacity-90">Điền thông tin chi tiết để tạo lớp học chuyên nghiệp</p>
                        </div>
                    </div>

                    <div class="p-8">
                        <form id="createClassForm" action="/teacher/classes" method="POST" enctype="multipart/form-data" class="space-y-6">
                            <input type="hidden" name="courseId" value="<%= course._id %>">
                            
                            <!-- Class Name -->
                            <div class="form-group form-step" style="animation-delay: 0.1s;">
                                <label for="className" class="form-label">
                                    <i class="fas fa-graduation-cap mr-2 text-blue-500"></i>
                                    Tên lớp học
                                    <span class="required">*</span>
                                </label>
                                <div class="relative">
                                    <input 
                                        type="text" 
                                        id="className" 
                                        name="className" 
                                        required 
                                        maxlength="100"
                                        class="form-input has-icon"
                                        placeholder="VD: Tiếng Anh Giao Tiếp Cơ Bản - Nhóm 1"
                                        oninput="validateClassName(this); updateCharCount('className', 'classNameCount', 100)"
                                    >
                                    <i class="fas fa-graduation-cap input-icon"></i>
                                </div>
                                <div class="char-counter" id="classNameCount">0/100</div>
                                <div class="validation-message" id="classNameError"></div>
                            </div>

                            <!-- Description -->
                            <div class="form-group form-step" style="animation-delay: 0.2s;">
                                <label for="description" class="form-label">
                                    <i class="fas fa-align-left mr-2 text-green-500"></i>
                                    Mô tả lớp học
                                    <span class="required">*</span>
                                </label>
                                <textarea 
                                    id="description" 
                                    name="description" 
                                    required 
                                    maxlength="500"
                                    rows="4"
                                    class="form-input form-textarea"
                                    placeholder="Mô tả chi tiết về mục tiêu, nội dung và phương pháp giảng dạy của lớp học..."
                                    oninput="validateDescription(this); updateCharCount('description', 'descriptionCount', 500)"
                                ></textarea>
                                <div class="char-counter" id="descriptionCount">0/500</div>
                                <div class="validation-message" id="descriptionError"></div>
                            </div>

                            <!-- Date Range -->
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div class="form-group form-step" style="animation-delay: 0.3s;">
                                    <label for="startDate" class="form-label">
                                        <i class="fas fa-calendar-plus mr-2 text-purple-500"></i>
                                        Ngày bắt đầu
                                        <span class="required">*</span>
                                    </label>
                                    <div class="relative">
                                        <input 
                                            type="date" 
                                            id="startDate" 
                                            name="startDate" 
                                            required 
                                            class="form-input has-icon"
                                            onchange="validateDates()"
                                        >
                                        <i class="fas fa-calendar-plus input-icon"></i>
                                    </div>
                                    <div class="validation-message" id="startDateError"></div>
                                </div>

                                <div class="form-group form-step" style="animation-delay: 0.4s;">
                                    <label for="endDate" class="form-label">
                                        <i class="fas fa-calendar-check mr-2 text-red-500"></i>
                                        Ngày kết thúc
                                        <span class="required">*</span>
                                    </label>
                                    <div class="relative">
                                        <input 
                                            type="date" 
                                            id="endDate" 
                                            name="endDate" 
                                            required 
                                            class="form-input has-icon"
                                            onchange="validateDates()"
                                        >
                                        <i class="fas fa-calendar-check input-icon"></i>
                                    </div>
                                    <div class="validation-message" id="endDateError"></div>
                                </div>
                            </div>

                            <!-- Max Students -->
                            <div class="form-group form-step" style="animation-delay: 0.5s;">
                                <label for="maxStudents" class="form-label">
                                    <i class="fas fa-users mr-2 text-yellow-500"></i>
                                    Số lượng học viên tối đa
                                    <span class="required">*</span>
                                </label>
                                <div class="relative">
                                    <input 
                                        type="number" 
                                        id="maxStudents" 
                                        name="maxStudents" 
                                        required 
                                        min="1"
                                        max="100"
                                        class="form-input has-icon"
                                        placeholder="Nhập số lượng học viên (1-100)"
                                        oninput="validateMaxStudents(this)"
                                    >
                                    <i class="fas fa-users input-icon"></i>
                                </div>
                                <div class="validation-message" id="maxStudentsError"></div>
                            </div>

                            <!-- Class Image -->
                            <div class="form-group form-step" style="animation-delay: 0.6s;">
                                <label class="form-label">
                                    <i class="fas fa-image mr-2 text-pink-500"></i>
                                    Hình ảnh lớp học
                                    <span class="required">*</span>
                                </label>
                                <div class="file-upload">
                                    <input 
                                        type="file" 
                                        id="classImage" 
                                        name="classImage" 
                                        accept="image/*" 
                                        required 
                                        onchange="handleFileUpload(this)"
                                    >
                                    <div class="file-upload-area">
                                        <i class="fas fa-cloud-upload-alt file-upload-icon floating-animation"></i>
                                        <p class="file-upload-text">Chọn hoặc kéo thả hình ảnh</p>
                                        <p class="file-upload-hint">Hỗ trợ: JPG, PNG, GIF (Tối đa 5MB)</p>
                                    </div>
                                </div>
                                
                                <div class="file-preview" id="filePreview">
                                    <div class="file-preview-item">
                                        <div class="file-preview-icon floating-animation">
                                            <i class="fas fa-image"></i>
                                        </div>
                                        <div class="file-preview-info ml-3">
                                            <h4 id="fileName">Tên file</h4>
                                            <p id="fileSize">Kích thước file</p>
                                        </div>
                                    </div>
                                    <div class="progress-bar">
                                        <div class="progress-fill" id="progressFill"></div>
                                    </div>
                                </div>
                                <div class="validation-message" id="imageError"></div>
                            </div>

                            <!-- Action Buttons -->
                            <div class="action-buttons form-step" style="animation-delay: 0.7s;">
                                <a href="/teacher/classes" class="btn-secondary">
                                    <i class="fas fa-arrow-left mr-2"></i>
                                    Quay lại
                                </a>
                                <button type="submit" class="btn-primary btn-3d" id="submitBtn">
                                    <i class="fas fa-plus-circle mr-2"></i>
                                    Tạo lớp học
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <script>
        // Form validation functions
        function validateClassName(input) {
            const error = document.getElementById('classNameError');
            const value = input.value.trim();

            if (value.length < 5) {
                showValidationError(error, 'Tên lớp học phải có ít nhất 5 ký tự');
                return false;
            } else if (value.length > 100) {
                showValidationError(error, 'Tên lớp học không được vượt quá 100 ký tự');
                return false;
            } else {
                showValidationSuccess(error, 'Tên lớp học hợp lệ');
                return true;
            }
        }

        function validateDescription(input) {
            const error = document.getElementById('descriptionError');
            const value = input.value.trim();

            if (value.length < 20) {
                showValidationError(error, 'Mô tả phải có ít nhất 20 ký tự');
                return false;
            } else if (value.length > 500) {
                showValidationError(error, 'Mô tả không được vượt quá 500 ký tự');
                return false;
            } else {
                showValidationSuccess(error, 'Mô tả hợp lệ');
                return true;
            }
        }

        function validateDates() {
            const startDate = document.getElementById('startDate');
            const endDate = document.getElementById('endDate');
            const startError = document.getElementById('startDateError');
            const endError = document.getElementById('endDateError');
            
            const today = new Date().toISOString().split('T')[0];
            const start = startDate.value;
            const end = endDate.value;

            let isValid = true;

            // Validate start date
            if (start < today) {
                showValidationError(startError, 'Ngày bắt đầu không được trong quá khứ');
                isValid = false;
            } else {
                showValidationSuccess(startError, 'Ngày bắt đầu hợp lệ');
            }

            // Validate end date
            if (end && start && end <= start) {
                showValidationError(endError, 'Ngày kết thúc phải sau ngày bắt đầu');
                isValid = false;
            } else if (end) {
                showValidationSuccess(endError, 'Ngày kết thúc hợp lệ');
            }

            return isValid;
        }

        function validateMaxStudents(input) {
            const error = document.getElementById('maxStudentsError');
            const value = parseInt(input.value);

            if (isNaN(value) || value < 1) {
                showValidationError(error, 'Số lượng học viên phải từ 1 trở lên');
                return false;
            } else if (value > 100) {
                showValidationError(error, 'Số lượng học viên không được vượt quá 100');
                return false;
            } else {
                showValidationSuccess(error, 'Số lượng học viên hợp lệ');
                return true;
            }
        }

        function showValidationError(element, message) {
            element.textContent = message;
            element.className = 'validation-message error';
            element.style.display = 'block';
        }

        function showValidationSuccess(element, message) {
            element.textContent = message;
            element.className = 'validation-message success';
            element.style.display = 'block';
        }

        function updateCharCount(inputId, counterId, maxLength) {
            const input = document.getElementById(inputId);
            const counter = document.getElementById(counterId);
            const currentLength = input.value.length;

            counter.textContent = `${currentLength}/${maxLength}`;

            if (currentLength > maxLength * 0.9) {
                counter.className = 'char-counter error';
            } else if (currentLength > maxLength * 0.7) {
                counter.className = 'char-counter warning';
            } else {
                counter.className = 'char-counter';
            }
        }

        function handleFileUpload(input) {
            const file = input.files[0];
            const preview = document.getElementById('filePreview');
            const error = document.getElementById('imageError');

            if (!file) {
                preview.style.display = 'none';
                return;
            }

            // Validate file type
            const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
            if (!allowedTypes.includes(file.type)) {
                showValidationError(error, 'Chỉ hỗ trợ file ảnh: JPG, PNG, GIF');
                input.value = '';
                preview.style.display = 'none';
                return;
            }

            // Validate file size (5MB)
            const maxSize = 5 * 1024 * 1024;
            if (file.size > maxSize) {
                showValidationError(error, 'Kích thước file không được vượt quá 5MB');
                input.value = '';
                preview.style.display = 'none';
                return;
            }

            // Show preview
            document.getElementById('fileName').textContent = file.name;
            document.getElementById('fileSize').textContent = formatFileSize(file.size);
            preview.style.display = 'block';

            // Simulate upload progress
            const progressFill = document.getElementById('progressFill');
            let progress = 0;
            const interval = setInterval(() => {
                progress += 10;
                progressFill.style.width = progress + '%';

                if (progress >= 100) {
                    clearInterval(interval);
                    showValidationSuccess(error, 'File đã được tải lên thành công');
                }
            }, 100);
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function showLoading(show = true) {
            document.getElementById('loadingOverlay').style.display = show ? 'flex' : 'none';
        }

        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <div class="flex items-center">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'} text-xl mr-3"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 4000);
        }

        // Form submission
        document.getElementById('createClassForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            // Validate all fields
            const isClassNameValid = validateClassName(document.getElementById('className'));
            const isDescriptionValid = validateDescription(document.getElementById('description'));
            const isDatesValid = validateDates();
            const isMaxStudentsValid = validateMaxStudents(document.getElementById('maxStudents'));

            if (!isClassNameValid || !isDescriptionValid || !isDatesValid || !isMaxStudentsValid) {
                showNotification('Vui lòng kiểm tra lại thông tin đã nhập', 'error');
                return;
            }

            const fileInput = document.getElementById('classImage');
            if (!fileInput.files[0]) {
                showNotification('Vui lòng chọn hình ảnh cho lớp học', 'error');
                return;
            }

            showLoading(true);
            const submitBtn = document.getElementById('submitBtn');
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Đang tạo lớp...';

            try {
                const formData = new FormData(this);
                const response = await fetch('/teacher/classes', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showNotification('Tạo lớp học thành công!', 'success');
                    setTimeout(() => {
                        window.location.href = '/teacher/classes';
                    }, 2000);
                } else {
                    throw new Error(result.message || 'Có lỗi xảy ra khi tạo lớp học');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification(error.message || 'Có lỗi xảy ra khi tạo lớp học', 'error');
            } finally {
                showLoading(false);
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="fas fa-plus-circle mr-2"></i>Tạo lớp học';
            }
        });

        // Set minimum date to today
        document.addEventListener('DOMContentLoaded', function() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('startDate').min = today;
            document.getElementById('endDate').min = today;

            // Initialize animations
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };
            
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                    }
                });
            }, observerOptions);
            
            document.querySelectorAll('.slide-in').forEach(el => {
                observer.observe(el);
            });
        });
    </script>
</body>
</html>
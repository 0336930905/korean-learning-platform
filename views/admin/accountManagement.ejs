<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản Lý Tài Khoản - Korea-DB Admin</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        /* Professional UI Styles with Enhanced Color Scheme */
        .gradient-bg {
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 50%, #2563eb 100%);
            position: relative;
            overflow: hidden;
        }
        
        .gradient-bg::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, transparent 100%);
            pointer-events: none;
        }
        
        .glass-card {
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(229, 231, 235, 0.8);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
        }
        
        .hover-scale {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .hover-scale:hover {
            transform: scale(1.02) translateY(-2px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.12);
        }
        
        .animate-fade-in {
            animation: fadeIn 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        @keyframes fadeIn {
            from { 
                opacity: 0; 
                transform: translateY(30px) scale(0.95);
            }
            to { 
                opacity: 1; 
                transform: translateY(0) scale(1);
            }
        }
        
        .loading-spinner {
            border: 3px solid #f1f5f9;
            border-top: 3px solid #4f46e5;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Enhanced Status Indicators */
        .status-indicator {
            position: relative;
            display: inline-block;
        }
        
        .status-indicator::after {
            content: '';
            position: absolute;
            top: -3px;
            right: -3px;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            border: 3px solid white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .status-active::after {
            background: linear-gradient(135deg, #10b981, #059669);
            animation: pulse 2.5s infinite;
        }
        
        .status-inactive::after {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }
        
        @keyframes pulse {
            0% { 
                transform: scale(1); 
                opacity: 1; 
                box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7);
            }
            50% { 
                transform: scale(1.1); 
                opacity: 0.8; 
                box-shadow: 0 0 0 5px rgba(16, 185, 129, 0.3);
            }
            100% { 
                transform: scale(1); 
                opacity: 1; 
                box-shadow: 0 0 0 0 rgba(16, 185, 129, 0);
            }
        }
        
        /* Professional Tooltip */
        .tooltip {
            position: relative;
        }
        
        .tooltip:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 120%;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(135deg, #1f2937, #374151);
            color: white;
            padding: 10px 14px;
            border-radius: 8px;
            font-size: 12px;
            font-weight: 500;
            white-space: nowrap;
            z-index: 1000;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
        }
        
        .tooltip:hover::before {
            content: '';
            position: absolute;
            bottom: 110%;
            left: 50%;
            transform: translateX(-50%);
            border: 6px solid transparent;
            border-top-color: #1f2937;
            z-index: 1001;
        }
        
        /* Enhanced Table Styling */
        .table-row-hover {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border-left: 4px solid transparent;
        }
        
        .table-row-hover:hover {
            background: linear-gradient(90deg, rgba(79, 70, 229, 0.05), rgba(79, 70, 229, 0.08));
            transform: translateX(6px);
            box-shadow: 0 8px 25px rgba(79, 70, 229, 0.1);
            border-left: 4px solid #4f46e5;
        }
        
        /* Professional Role Badges */
        .role-badge {
            position: relative;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            font-weight: 600;
            letter-spacing: 0.025em;
            transition: all 0.3s ease;
        }
        
        .role-badge::before {
            content: '';
            width: 10px;
            height: 10px;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .role-admin::before { 
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
        }
        .role-teacher::before { 
            background: linear-gradient(135deg, #10b981, #059669);
        }
        .role-student::before { 
            background: linear-gradient(135deg, #f59e0b, #d97706);
        }
        
        .role-badge:hover {
            transform: translateY(-1px);
        }
        
        /* Enhanced Search and Filter Section */
        .search-container {
            position: relative;
        }
        
        .search-container input:focus {
            border-color: #4f46e5;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
            transform: translateY(-1px);
        }
        
        .filter-select:focus {
            border-color: #4f46e5;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
            transform: translateY(-1px);
        }
        
        /* Professional Form Controls */
        .form-input, .form-select {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: 2px solid #e5e7eb;
            background: rgba(255, 255, 255, 0.95);
        }
        
        .form-input:hover, .form-select:hover {
            border-color: #d1d5db;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }
        
        .form-input:focus, .form-select:focus {
            border-color: #4f46e5;
            box-shadow: 0 0 0 4px rgba(79, 70, 229, 0.1);
            outline: none;
        }
        
        /* Enhanced Action Buttons */
        .action-button {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            border: 2px solid transparent;
            font-weight: 600;
        }
        
        .action-button::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.4s ease, height 0.4s ease;
            z-index: 0;
        }
        
        .action-button:hover {
            transform: translateY(-2px) scale(1.05);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }
        
        .action-button:hover::before {
            width: 100px;
            height: 100px;
        }
        
        .action-button:active {
            transform: translateY(0) scale(1);
        }
        
        .action-button i {
            position: relative;
            z-index: 1;
        }
        
        /* Specific Action Button Colors */
        .action-lock:hover {
            background: linear-gradient(135deg, #fef2f2, #fee2e2);
            border-color: #f87171;
        }
        
        .action-unlock:hover {
            background: linear-gradient(135deg, #f0fdf4, #dcfce7);
            border-color: #4ade80;
        }
        
        .action-reset:hover {
            background: linear-gradient(135deg, #eff6ff, #dbeafe);
            border-color: #60a5fa;
        }
        
        .action-view:hover {
            background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
            border-color: #0ea5e9;
        }
        
        .action-edit:hover {
            background: linear-gradient(135deg, #fffbeb, #fef3c7);
            border-color: #fbbf24;
        }
        
        /* Enhanced Modal Styles */
        #resetPasswordModal .animate-fade-in,
        #blockUserModal .animate-fade-in {
            animation: modalFadeIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        @keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-30px) scale(0.95);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }
        
        #newPasswordDisplay {
            font-family: 'SF Mono', 'Monaco', 'Consolas', 'Courier New', monospace;
            letter-spacing: 2px;
            font-weight: 600;
            background: linear-gradient(135deg, #f8fafc, #f1f5f9);
            border: 2px solid #e2e8f0;
        }
        
        /* Enhanced Toast Styles */
        .toast-enter {
            transform: translateX(0) translateY(0) scale(1);
            opacity: 1;
            animation: toastSlideIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .toast-exit {
            transform: translateX(120%) scale(0.95);
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        @keyframes toastSlideIn {
            from {
                transform: translateX(120%) scale(0.8);
                opacity: 0;
            }
            to {
                transform: translateX(0) scale(1);
                opacity: 1;
            }
        }
        
        /* Professional Status Badges */
        .status-badge {
            font-weight: 600;
            letter-spacing: 0.025em;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }
        
        .status-badge:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        /* Enhanced Filter Result Count */
        #resultCount {
            font-weight: 600;
            color: #4f46e5;
            background: linear-gradient(135deg, #eef2ff, #e0e7ff);
            padding: 8px 16px;
            border-radius: 8px;
            border: 2px solid #c7d2fe;
        }
        
        /* Loading Overlay Enhancement */
        #loadingOverlay {
            backdrop-filter: blur(8px);
            background: rgba(15, 23, 42, 0.6);
        }
        
        #loadingOverlay .bg-white {
            background: linear-gradient(135deg, #ffffff, #f8fafc);
            border: 2px solid #e2e8f0;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="flex h-screen">
        <%- include('../partials/admin_sidebar', { user: user }) %>
        
        <div class="flex-1 flex flex-col overflow-hidden">
            <%- include('../partials/dashboards_header', { user: user }) %>

            <main class="flex-1 overflow-x-hidden overflow-y-auto bg-gray-50">
                <!-- Enhanced Page Header -->
                <div class="gradient-bg py-8 px-8 text-white">
                    <div class="max-w-7xl mx-auto">
                        <div class="flex items-center justify-between">
                            <div>
                                <h1 class="text-3xl font-bold">Quản Lý Tài Khoản</h1>
                                <p class="text-blue-100 mt-2">Quản lý thông tin và trạng thái tài khoản người dùng</p>
                            </div>
                            <div class="flex space-x-4">
                                <button onclick="window.location.href='/account-management/add'"
                                        class="bg-white text-blue-600 px-6 py-3 rounded-lg font-semibold hover:bg-blue-50 transition-colors flex items-center space-x-2">
                                    <i class="fas fa-user-plus"></i>
                                    <span>Thêm Tài Khoản</span>
                                </button>
                                <button onclick="exportUsers()"
                                        class="bg-blue-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-600 transition-colors flex items-center space-x-2">
                                    <i class="fas fa-download"></i>
                                    <span>Xuất Excel</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="max-w-7xl mx-auto px-8 py-8">
                    <!-- Search and Filter Section -->
                    <div class="glass-card rounded-xl p-6 mb-8">
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                            <!-- Search Input -->
                            <div class="search-container">
                                <label class="block text-sm font-semibold text-gray-700 mb-3">
                                    <i class="fas fa-search mr-2 text-indigo-500"></i>Tìm kiếm
                                </label>
                                <input type="text" id="searchInput" 
                                       placeholder="Tìm theo email, tên hoặc ID..."
                                       class="form-input w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all">
                            </div>
                            
                            <!-- Role Filter -->
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-3">
                                    <i class="fas fa-user-tag mr-2 text-purple-500"></i>Vai trò
                                </label>
                                <select id="roleFilter" class="form-select filter-select w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all">
                                    <option value="">Tất cả vai trò</option>
                                    <option value="admin">Quản trị viên</option>
                                    <option value="teacher">Giáo viên</option>
                                    <option value="student">Học sinh</option>
                                </select>
                            </div>
                            
                            <!-- Status Filter -->
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-3">
                                    <i class="fas fa-toggle-on mr-2 text-green-500"></i>Trạng thái
                                </label>
                                <select id="statusFilter" class="form-select filter-select w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all">
                                    <option value="">Tất cả trạng thái</option>
                                    <option value="active">Hoạt động</option>
                                    <option value="inactive">Vô hiệu</option>
                                </select>
                            </div>
                            
                            <!-- Reset Button -->
                            <div class="flex items-end">
                                <button onclick="resetFilters()" 
                                        class="w-full bg-gradient-to-r from-gray-500 to-gray-600 text-white px-6 py-3 rounded-xl hover:from-gray-600 hover:to-gray-700 transition-all duration-300 font-semibold shadow-lg hover:shadow-xl">
                                    <i class="fas fa-refresh mr-2"></i>Đặt lại
                                </button>
                            </div>
                        </div>
                        
                        <!-- Result Count and Pagination Controls -->
                        <div class="mt-4 pt-4 border-t border-gray-200">
                            <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                                <!-- Result Count and Items Per Page -->
                                <div class="flex flex-col sm:flex-row sm:items-center gap-4">
                                    <p id="resultCount" class="text-sm text-gray-600">
                                        Hiển thị <%= users.length %> tài khoản
                                    </p>
                                    
                                    <!-- Items Per Page Selector -->
                                    <div class="flex items-center gap-2">
                                        <label class="text-sm font-medium text-gray-700">
                                            <i class="fas fa-list mr-1 text-blue-500"></i>Hiển thị:
                                        </label>
                                        <select id="itemsPerPage" class="form-select px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-sm bg-white">
                                            <option value="10">10 mục</option>
                                            <option value="25" selected>25 mục</option>
                                            <option value="50">50 mục</option>
                                            <option value="100">100 mục</option>
                                            <option value="all">Tất cả</option>
                                        </select>
                                    </div>
                                </div>

                                <!-- Pagination Info -->
                                <div id="paginationInfo" class="text-sm text-gray-600">
                                    <span id="pageInfo">Trang 1 / 1</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Users Table -->
                    <div class="glass-card rounded-xl overflow-hidden">
                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Người dùng
                                        </th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Vai trò
                                        </th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Trạng thái
                                        </th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Ngày tạo
                                        </th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Thao tác
                                        </th>
                                    </tr>
                                </thead>
                                <tbody id="userTableBody" class="bg-white divide-y divide-gray-200">
                                    <% users.forEach(user => { %>
                                    <tr class="table-row-hover" data-user-id="<%= user._id %>" data-user-email="<%= user.email %>" data-user-name="<%= user.fullName %>">
                                        <!-- User Info -->
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="flex items-center">
                                                <div class="flex-shrink-0 h-10 w-10 status-indicator <%= user.isActive ? 'status-active' : 'status-inactive' %>">
                                                    <img class="h-10 w-10 rounded-full object-cover" 
                                                         src="<%= user.profileImage || '/images/default-avatar.png' %>" 
                                                         alt="<%= user.fullName %>">
                                                </div>
                                                <div class="ml-4">
                                                    <div class="text-sm font-medium text-gray-900 user-name">
                                                        <%= user.fullName %>
                                                    </div>
                                                    <div class="text-sm text-gray-500 user-email">
                                                        <%= user.email %>
                                                    </div>
                                                </div>
                                            </div>
                                        </td>
                                        
                                        <!-- Role -->
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="role-badge role-<%= user.role %> px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-<%= user.role === 'admin' ? 'purple' : user.role === 'teacher' ? 'green' : 'yellow' %>-100 text-<%= user.role === 'admin' ? 'purple' : user.role === 'teacher' ? 'green' : 'yellow' %>-800">
                                                <% if (user.role === 'admin') { %>
                                                    <i class="fas fa-user-shield mr-1"></i>Quản trị viên
                                                <% } else if (user.role === 'teacher') { %>
                                                    <i class="fas fa-chalkboard-teacher mr-1"></i>Giáo viên
                                                <% } else { %>
                                                    <i class="fas fa-user-graduate mr-1"></i>Học sinh
                                                <% } %>
                                            </span>
                                        </td>
                                        
                                        <!-- Status -->
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="status-badge px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full <%= user.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' %>">
                                                <i class="fas <%= user.isActive ? 'fa-check-circle' : 'fa-times-circle' %> mr-1"></i>
                                                <%= user.isActive ? 'Hoạt động' : 'Vô hiệu' %>
                                            </span>
                                        </td>
                                        
                                        <!-- Created Date -->
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <%= new Date(user.createdAt).toLocaleDateString('vi-VN') %>
                                        </td>
                                        
                                        <!-- Actions -->
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                            <div class="flex items-center space-x-2">
                                                <!-- Toggle Status Button -->
                                                <button onclick="toggleUserStatus('<%= user._id %>')" 
                                                        class="action-button <%= user.isActive ? 'action-lock bg-red-50 hover:bg-red-100' : 'action-unlock bg-green-50 hover:bg-green-100' %> px-4 py-3 rounded-xl transition-all duration-300 tooltip"
                                                        data-tooltip="<%= user.isActive ? 'Khóa tài khoản' : 'Mở khóa tài khoản' %>">
                                                    <i class="fas <%= user.isActive ? 'fa-lock text-red-600' : 'fa-unlock text-green-600' %> text-lg"></i>
                                                </button>
                                                
                                                <!-- Reset Password Button -->
                                                <button onclick="resetPassword('<%= user._id %>')"
                                                        class="action-button action-reset bg-blue-50 hover:bg-blue-100 px-4 py-3 rounded-xl transition-all duration-300 tooltip"
                                                        data-tooltip="Đặt lại mật khẩu">
                                                    <i class="fas fa-key text-blue-600 text-lg"></i>
                                                </button>
                                                
                                                <!-- View Details Button -->
                                                <a href="/account-management/viewAccount/<%= user._id %>" 
                                                   class="action-button action-view text-sky-600 hover:text-sky-700 bg-sky-50 hover:bg-sky-100 px-4 py-3 rounded-xl transition-all duration-300 tooltip"
                                                   data-tooltip="Xem chi tiết">
                                                    <i class="fas fa-eye text-lg"></i>
                                                </a>
                                                
                                                <!-- Edit Button -->
                                                <button onclick="window.location.href='/account-management/edit/<%= user._id %>'"
                                                        class="action-button action-edit bg-yellow-50 hover:bg-yellow-100 px-4 py-3 rounded-xl transition-all duration-300 tooltip"
                                                        data-tooltip="Chỉnh sửa">
                                                    <i class="fas fa-edit text-yellow-600 text-lg"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination Controls -->
                        <div id="paginationContainer" class="bg-gray-50 px-6 py-4 border-t border-gray-200">
                            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                                <!-- Pagination Info -->
                                <div class="flex items-center gap-4">
                                    <div class="text-sm text-gray-700">
                                        Hiển thị <span id="fromItem" class="font-medium">1</span> đến <span id="toItem" class="font-medium">25</span> 
                                        trong tổng số <span id="totalItems" class="font-medium"><%= users.length %></span> mục
                                    </div>
                                </div>

                                <!-- Pagination Buttons -->
                                <div class="flex items-center gap-2">
                                    <!-- Previous Button -->
                                    <button id="prevBtn" onclick="goToPage(currentPage - 1)" 
                                            class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 hover:text-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all">
                                        <i class="fas fa-chevron-left mr-1"></i>Trước
                                    </button>

                                    <!-- Page Numbers -->
                                    <div id="pageNumbers" class="flex items-center gap-1">
                                        <!-- Dynamic page numbers will be inserted here -->
                                    </div>

                                    <!-- Next Button -->
                                    <button id="nextBtn" onclick="goToPage(currentPage + 1)" 
                                            class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 hover:text-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all">
                                        Tiếp<i class="fas fa-chevron-right ml-1"></i>
                                    </button>

                                    <!-- Jump to Page -->
                                    <div class="flex items-center gap-2 ml-4">
                                        <span class="text-sm text-gray-600">Đi tới:</span>
                                        <input type="number" id="jumpToPage" min="1" max="1" 
                                               class="w-16 px-2 py-1 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                               onkeypress="if(event.key==='Enter') jumpToPageNumber()">
                                        <button onclick="jumpToPageNumber()" 
                                                class="px-2 py-1 text-sm bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors">
                                            <i class="fas fa-arrow-right"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Toast Notification Container -->
    <div id="toastContainer" class="fixed top-4 right-4 z-50 space-y-2"></div>

    <!-- Block User Modal -->
    <div id="blockUserModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900">Xác nhận khóa tài khoản</h3>
            </div>
            
            <div class="px-6 py-4">
                <p class="text-gray-600 mb-4">Vui lòng nhập lý do khóa tài khoản:</p>
                <textarea id="blockReason" 
                          placeholder="Nhập lý do khóa tài khoản..."
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          rows="3"></textarea>
            </div>
            
            <div class="px-6 py-4 bg-gray-50 border-t border-gray-200 flex justify-end space-x-3">
                <button onclick="closeBlockModal()" 
                        class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors">
                    Hủy
                </button>
                <button onclick="confirmBlockUser()" 
                        class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                    Xác nhận khóa
                </button>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg p-8 flex items-center space-x-4">
            <div class="loading-spinner"></div>
            <span class="text-gray-700">Đang xử lý...</span>
        </div>
    </div>

    <!-- Reset Password Modal -->
    <div id="resetPasswordModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-xl p-6 max-w-md w-full mx-4">
            <div class="text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 mb-4">
                    <i class="fas fa-check text-green-600 text-xl"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-900 mb-4">Mật khẩu mới đã được tạo</h3>
                
                <div class="space-y-3 mb-6">
                    <div class="bg-gray-50 rounded-lg p-3">
                        <p class="text-sm text-gray-600 mb-1">Tài khoản:</p>
                        <p class="font-medium" id="resetUserEmail">user@example.com</p>
                    </div>
                    
                    <div class="bg-gray-50 rounded-lg p-3">
                        <p class="text-sm text-gray-600 mb-1">Mật khẩu mới:</p>
                        <div class="flex items-center space-x-2">
                            <input type="text" id="newPasswordDisplay" readonly 
                                   class="flex-1 bg-white border border-gray-300 rounded px-3 py-2 font-mono text-center"
                                   value="">
                            <button onclick="copyPasswordToClipboard()" 
                                    class="px-3 py-2 bg-blue-100 text-blue-600 rounded hover:bg-blue-200 transition-colors"
                                    title="Sao chép">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
                    <p class="text-sm text-blue-700">
                        <i class="fas fa-info-circle mr-1"></i>
                        Vui lòng lưu mật khẩu này và thông báo cho người dùng
                    </p>
                </div>
                
                <button onclick="closeResetPasswordModal()" 
                        class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                    Đã hiểu
                </button>
            </div>
        </div>
    </div>

    <!-- JavaScript -->
    <script>
        // ACCOUNT LOCK FUNCTIONALITY
        window.ACCOUNT_LOCK = {
            modal: null,
            reasonInput: null,
            currentUserId: null,

            init() {
                this.modal = document.getElementById('blockUserModal');
                this.reasonInput = document.getElementById('blockReason');
                console.log('✅ Account lock system initialized');
                return true;
            },

            show(userId) {
                this.currentUserId = userId;
                this.reasonInput.value = '';
                this.modal.classList.remove('hidden');
                this.reasonInput.focus();
                console.log('🔒 Showing block modal for user:', userId);
            },

            hide() {
                this.modal.classList.add('hidden');
                this.currentUserId = null;
                console.log('❌ Block modal hidden');
            },

            async confirmBlock() {
                const reason = this.reasonInput.value.trim();
                
                if (!reason) {
                    this.showToast('Vui lòng nhập lý do khóa tài khoản', 'warning');
                    return;
                }

                if (!this.currentUserId) {
                    this.showToast('Không tìm thấy ID người dùng', 'error');
                    return;
                }

                console.log('🔄 Sending block request...', { userId: this.currentUserId, reason });

                try {
                    const response = await fetch(`/account-management/toggle-status/${this.currentUserId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ blockReason: reason })
                    });

                    const data = await response.json();
                    console.log('📨 Server response:', data);

                    if (response.ok && data.success) {
                        this.showToast(data.message, 'success');
                        this.hide();
                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    } else {
                        this.showToast(data.message || 'Có lỗi xảy ra', 'error');
                    }
                } catch (error) {
                    console.error('❌ Network error:', error);
                    this.showToast('Lỗi kết nối. Vui lòng thử lại.', 'error');
                }
            },

            showToast(message, type = 'info') {
                const toastContainer = document.getElementById('toastContainer');
                const toastId = 'toast-' + Date.now();
                
                const bgColors = {
                    success: 'bg-green-500',
                    error: 'bg-red-500', 
                    warning: 'bg-yellow-500',
                    info: 'bg-blue-500'
                };
                
                const toast = document.createElement('div');
                toast.id = toastId;
                toast.className = `${bgColors[type]} text-white px-6 py-3 rounded-lg shadow-lg mb-2 toast-enter max-w-sm`;
                toast.innerHTML = `
                    <div class="flex items-center justify-between">
                        <span class="flex-1">${message}</span>
                        <button onclick="document.getElementById('${toastId}').remove()" class="text-white hover:text-gray-200 ml-4">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                
                toastContainer.appendChild(toast);
                
                // Auto remove after 5 seconds
                setTimeout(() => {
                    toast.classList.remove('toast-enter');
                    toast.classList.add('toast-exit');
                    setTimeout(() => toast.remove(), 300);
                }, 5000);
            }
        };

        // Global functions required by HTML onclick handlers
        function toggleUserStatus(userId) {
            console.log('🎯 toggleUserStatus called with:', userId);
            ACCOUNT_LOCK.show(userId);
        }

        function closeBlockModal() {
            ACCOUNT_LOCK.hide();
        }

        function confirmBlockUser() {
            ACCOUNT_LOCK.confirmBlock();
        }

        function resetPassword(userId) {
            console.log('🔑 Reset password for user:', userId);
            
            // Show confirmation dialog
            if (!confirm('Bạn có chắc chắn muốn đặt lại mật khẩu cho người dùng này không?')) {
                return;
            }
            
            // Show loading
            showLoadingOverlay(true);
            ACCOUNT_LOCK.showToast('Đang đặt lại mật khẩu...', 'info');
            
            // Call API
            fetch(`/account-management/reset-password/${userId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('Reset password response:', data);
                
                if (data.success) {
                    // Get user info from table row
                    const userRow = document.querySelector(`tr[data-user-id="${userId}"]`);
                    const userEmail = userRow ? userRow.getAttribute('data-user-email') : 'Không xác định';
                    
                    // Show password modal
                    showResetPasswordModal(data.data.newPassword, userEmail);
                    ACCOUNT_LOCK.showToast('Đặt lại mật khẩu thành công!', 'success');
                } else {
                    ACCOUNT_LOCK.showToast(data.message || 'Có lỗi xảy ra khi đặt lại mật khẩu', 'error');
                }
            })
            .catch(error => {
                console.error('Reset password error:', error);
                ACCOUNT_LOCK.showToast('Có lỗi xảy ra khi đặt lại mật khẩu', 'error');
            })
            .finally(() => {
                showLoadingOverlay(false);
            });
        }

        function exportUsers() {
            console.log('📄 Export users function called');
            ACCOUNT_LOCK.showToast('Chức năng xuất Excel đang được phát triển', 'info');
        }

        // PAGINATION SYSTEM
        window.PAGINATION = {
            currentPage: 1,
            itemsPerPage: 25,
            totalItems: 0,
            filteredItems: [],
            allRows: [],

            init() {
                console.log('📄 Initializing pagination system...');
                
                // Get all table rows
                this.allRows = Array.from(document.querySelectorAll('#userTableBody tr'));
                this.totalItems = this.allRows.length;
                this.filteredItems = [...this.allRows];
                
                // Initialize items per page selector
                const itemsPerPageSelect = document.getElementById('itemsPerPage');
                if (itemsPerPageSelect) {
                    itemsPerPageSelect.addEventListener('change', (e) => {
                        this.itemsPerPage = e.target.value === 'all' ? this.filteredItems.length : parseInt(e.target.value);
                        this.currentPage = 1;
                        this.updateDisplay();
                        ACCOUNT_LOCK.showToast(`Hiển thị ${this.itemsPerPage === this.filteredItems.length ? 'tất cả' : this.itemsPerPage} mục/trang`, 'info');
                    });
                }
                
                this.updateDisplay();
                console.log('✅ Pagination system initialized');
                return true;
            },

            updateFilteredItems(filteredRows) {
                this.filteredItems = filteredRows;
                this.currentPage = 1;
                this.updateDisplay();
            },

            updateDisplay() {
                const totalPages = this.itemsPerPage >= this.filteredItems.length ? 1 : Math.ceil(this.filteredItems.length / this.itemsPerPage);
                
                // Hide all rows first
                this.allRows.forEach(row => {
                    row.style.display = 'none';
                    row.classList.remove('animate-fade-in');
                });
                
                // Show current page rows with animation
                if (this.itemsPerPage >= this.filteredItems.length) {
                    // Show all filtered items
                    this.filteredItems.forEach((row, index) => {
                        row.style.display = '';
                        row.style.animationDelay = `${index * 50}ms`;
                        row.classList.add('animate-fade-in');
                    });
                } else {
                    // Show paginated items
                    const startIndex = (this.currentPage - 1) * this.itemsPerPage;
                    const endIndex = Math.min(startIndex + this.itemsPerPage, this.filteredItems.length);
                    
                    for (let i = startIndex; i < endIndex; i++) {
                        if (this.filteredItems[i]) {
                            this.filteredItems[i].style.display = '';
                            this.filteredItems[i].style.animationDelay = `${(i - startIndex) * 50}ms`;
                            this.filteredItems[i].classList.add('animate-fade-in');
                        }
                    }
                }
                
                this.updatePaginationControls(totalPages);
                this.updatePaginationInfo(totalPages);
            },

            updatePaginationControls(totalPages) {
                const prevBtn = document.getElementById('prevBtn');
                const nextBtn = document.getElementById('nextBtn');
                const pageNumbers = document.getElementById('pageNumbers');
                const jumpToPage = document.getElementById('jumpToPage');
                
                // Update prev/next buttons
                if (prevBtn) {
                    prevBtn.disabled = this.currentPage <= 1;
                    prevBtn.classList.toggle('opacity-50', this.currentPage <= 1);
                    prevBtn.classList.toggle('cursor-not-allowed', this.currentPage <= 1);
                }
                
                if (nextBtn) {
                    nextBtn.disabled = this.currentPage >= totalPages;
                    nextBtn.classList.toggle('opacity-50', this.currentPage >= totalPages);
                    nextBtn.classList.toggle('cursor-not-allowed', this.currentPage >= totalPages);
                }
                
                // Update jump to page input
                if (jumpToPage) {
                    jumpToPage.max = totalPages;
                    jumpToPage.value = '';
                }
                
                // Update page numbers
                if (pageNumbers) {
                    pageNumbers.innerHTML = '';
                    
                    if (totalPages <= 1) return;
                    
                    // Generate page numbers with smart truncation
                    const maxVisiblePages = 5;
                    let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));
                    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
                    
                    // Adjust start if we're near the end
                    if (endPage - startPage < maxVisiblePages - 1) {
                        startPage = Math.max(1, endPage - maxVisiblePages + 1);
                    }
                    
                    // First page + ellipsis
                    if (startPage > 1) {
                        this.createPageButton(1, pageNumbers);
                        if (startPage > 2) {
                            this.createEllipsis(pageNumbers);
                        }
                    }
                    
                    // Page range
                    for (let i = startPage; i <= endPage; i++) {
                        this.createPageButton(i, pageNumbers);
                    }
                    
                    // Ellipsis + last page
                    if (endPage < totalPages) {
                        if (endPage < totalPages - 1) {
                            this.createEllipsis(pageNumbers);
                        }
                        this.createPageButton(totalPages, pageNumbers);
                    }
                }
            },

            createPageButton(pageNum, container) {
                const button = document.createElement('button');
                button.textContent = pageNum;
                button.onclick = () => this.goToPage(pageNum);
                
                const isCurrentPage = pageNum === this.currentPage;
                button.className = `px-3 py-2 text-sm font-medium rounded-lg transition-all duration-200 ${
                    isCurrentPage 
                        ? 'bg-indigo-600 text-white shadow-lg transform scale-105' 
                        : 'text-gray-700 bg-white border border-gray-300 hover:bg-gray-50 hover:text-indigo-600 hover:border-indigo-300'
                }`;
                
                container.appendChild(button);
            },

            createEllipsis(container) {
                const ellipsis = document.createElement('span');
                ellipsis.textContent = '...';
                ellipsis.className = 'px-2 py-2 text-sm text-gray-500';
                container.appendChild(ellipsis);
            },

            updatePaginationInfo(totalPages) {
                const fromItem = document.getElementById('fromItem');
                const toItem = document.getElementById('toItem');
                const totalItemsSpan = document.getElementById('totalItems');
                const pageInfo = document.getElementById('pageInfo');
                
                if (this.filteredItems.length === 0) {
                    if (fromItem) fromItem.textContent = '0';
                    if (toItem) toItem.textContent = '0';
                    if (totalItemsSpan) totalItemsSpan.textContent = '0';
                    if (pageInfo) pageInfo.textContent = 'Không có dữ liệu';
                    return;
                }
                
                const start = this.itemsPerPage >= this.filteredItems.length ? 1 : ((this.currentPage - 1) * this.itemsPerPage) + 1;
                const end = this.itemsPerPage >= this.filteredItems.length ? this.filteredItems.length : Math.min(this.currentPage * this.itemsPerPage, this.filteredItems.length);
                
                if (fromItem) fromItem.textContent = start;
                if (toItem) toItem.textContent = end;
                if (totalItemsSpan) totalItemsSpan.textContent = this.filteredItems.length;
                if (pageInfo) pageInfo.textContent = `Trang ${this.currentPage} / ${totalPages}`;
            },

            goToPage(pageNum) {
                const totalPages = this.itemsPerPage >= this.filteredItems.length ? 1 : Math.ceil(this.filteredItems.length / this.itemsPerPage);
                
                if (pageNum >= 1 && pageNum <= totalPages) {
                    this.currentPage = pageNum;
                    this.updateDisplay();
                    
                    // Smooth scroll to top of table
                    document.getElementById('userTableBody').scrollIntoView({ 
                        behavior: 'smooth', 
                        block: 'start' 
                    });
                    
                    console.log(`📄 Moved to page ${pageNum}`);
                }
            }
        };

        // Global pagination functions
        function goToPage(pageNum) {
            PAGINATION.goToPage(pageNum);
        }

        function jumpToPageNumber() {
            const jumpInput = document.getElementById('jumpToPage');
            const pageNum = parseInt(jumpInput.value);
            
            if (pageNum && pageNum > 0) {
                PAGINATION.goToPage(pageNum);
                jumpInput.value = '';
                ACCOUNT_LOCK.showToast(`Chuyển đến trang ${pageNum}`, 'info');
            } else {
                ACCOUNT_LOCK.showToast('Vui lòng nhập số trang hợp lệ', 'warning');
                jumpInput.focus();
            }
        }

        // Helper functions for Reset Password
        function showResetPasswordModal(newPassword, userEmail) {
            const modal = document.getElementById('resetPasswordModal');
            const emailElement = document.getElementById('resetUserEmail');
            const passwordElement = document.getElementById('newPasswordDisplay');
            
            if (modal && emailElement && passwordElement) {
                emailElement.textContent = userEmail;
                passwordElement.value = newPassword;
                modal.classList.remove('hidden');
            }
        }

        function closeResetPasswordModal() {
            const modal = document.getElementById('resetPasswordModal');
            if (modal) {
                modal.classList.add('hidden');
            }
        }

        function copyPasswordToClipboard() {
            const passwordInput = document.getElementById('newPasswordDisplay');
            if (passwordInput) {
                passwordInput.select();
                passwordInput.setSelectionRange(0, 99999); // For mobile devices
                
                try {
                    document.execCommand('copy');
                    ACCOUNT_LOCK.showToast('Đã sao chép mật khẩu vào clipboard!', 'success');
                    
                    // Visual feedback
                    const copyButton = event.target.closest('button');
                    const icon = copyButton.querySelector('i');
                    const originalClass = icon.className;
                    icon.className = 'fas fa-check text-green-600';
                    
                    setTimeout(() => {
                        icon.className = originalClass;
                    }, 2000);
                } catch (err) {
                    console.error('Copy failed:', err);
                    // Fallback for older browsers
                    passwordInput.focus();
                    passwordInput.select();
                    ACCOUNT_LOCK.showToast('Vui lòng sao chép mật khẩu thủ công (Ctrl+C)', 'warning');
                }
            }
        }

        function showLoadingOverlay(show) {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                if (show) {
                    overlay.classList.remove('hidden');
                } else {
                    overlay.classList.add('hidden');
                }
            }
        }

        // Enhanced setup with better performance and error handling
        function setupAccountManagement() {
            console.log('🚀 Setting up enhanced account management...');
            
            try {
                // Initialize account lock system
                if (!ACCOUNT_LOCK.init()) {
                    console.error('❌ Failed to initialize account lock system');
                    return;
                }

                // Initialize pagination system
                if (!PAGINATION.init()) {
                    console.error('❌ Failed to initialize pagination system');
                    return;
                }

                // Enhanced search functionality with debouncing
                const searchInput = document.getElementById('searchInput');
                if (searchInput) {
                    let searchTimeout;
                    let lastSearchValue = '';
                    
                    // Add visual feedback for search
                    const searchContainer = searchInput.parentElement;
                    const searchIcon = searchContainer.querySelector('i');
                    
                    searchInput.addEventListener('input', function(e) {
                        const currentValue = e.target.value.trim();
                        
                        // Clear previous timeout
                        clearTimeout(searchTimeout);
                        
                        // Visual feedback
                        if (currentValue !== lastSearchValue) {
                            searchIcon.className = 'fas fa-spinner fa-spin mr-2 text-indigo-500';
                            
                            searchTimeout = setTimeout(() => {
                                lastSearchValue = currentValue;
                                applyFilters();
                                searchIcon.className = 'fas fa-search mr-2 text-indigo-500';
                            }, 300);
                        }
                    });
                    
                    // Handle Enter key for immediate search
                    searchInput.addEventListener('keypress', function(e) {
                        if (e.key === 'Enter') {
                            clearTimeout(searchTimeout);
                            applyFilters();
                            searchIcon.className = 'fas fa-search mr-2 text-indigo-500';
                        }
                    });
                    
                    // Add clear search functionality
                    searchInput.addEventListener('keyup', function(e) {
                        if (e.key === 'Escape') {
                            this.value = '';
                            applyFilters();
                        }
                    });
                } else {
                    console.warn('⚠️ Search input not found');
                }

                // Enhanced filter functionality with change detection
                const roleFilter = document.getElementById('roleFilter');
                const statusFilter = document.getElementById('statusFilter');
                
                if (roleFilter) {
                    roleFilter.addEventListener('change', function() {
                        console.log('🔄 Role filter changed:', this.value);
                        applyFilters();
                        
                        // Visual feedback
                        this.style.borderColor = '#4f46e5';
                        setTimeout(() => {
                            this.style.borderColor = '';
                        }, 1000);
                    });
                } else {
                    console.warn('⚠️ Role filter not found');
                }
                
                if (statusFilter) {
                    statusFilter.addEventListener('change', function() {
                        console.log('🔄 Status filter changed:', this.value);
                        applyFilters();
                        
                        // Visual feedback
                        this.style.borderColor = '#4f46e5';
                        setTimeout(() => {
                            this.style.borderColor = '';
                        }, 1000);
                    });
                } else {
                    console.warn('⚠️ Status filter not found');
                }

                // Enhanced keyboard shortcuts
                document.addEventListener('keydown', function(e) {
                    // Ctrl+F to focus search
                    if (e.ctrlKey && e.key === 'f') {
                        e.preventDefault();
                        searchInput?.focus();
                        ACCOUNT_LOCK.showToast('🔍 Sử dụng Ctrl+F để tìm kiếm', 'info');
                    }
                    
                    // Ctrl+R to reset filters
                    if (e.ctrlKey && e.key === 'r') {
                        e.preventDefault();
                        resetFilters();
                    }
                    
                    // Escape to clear search
                    if (e.key === 'Escape') {
                        if (searchInput && searchInput === document.activeElement) {
                            searchInput.blur();
                        }
                    }
                });

                // Add filter statistics tracking
                window.filterStats = {
                    totalSearches: 0,
                    lastFilterTime: null,
                    performanceLog: []
                };

                // Enhanced tooltip initialization
                initializeTooltips();
                
                // Initialize result count
                updateResultCount();
                
                console.log('✅ Enhanced account management setup complete');
                
                // Show welcome message
                setTimeout(() => {
                    ACCOUNT_LOCK.showToast('🎉 Hệ thống quản lý tài khoản đã sẵn sàng', 'success');
                }, 1000);
                
            } catch (error) {
                console.error('❌ Error setting up account management:', error);
                ACCOUNT_LOCK.showToast('Có lỗi xảy ra khi khởi tạo hệ thống', 'error');
            }
        }

        // Initialize enhanced tooltips
        function initializeTooltips() {
            const tooltipElements = document.querySelectorAll('[data-tooltip]');
            console.log(`🎯 Initializing ${tooltipElements.length} tooltips`);
            
            tooltipElements.forEach(element => {
                element.addEventListener('mouseenter', function() {
                    this.style.position = 'relative';
                });
            });
        }

        // Enhanced performance monitoring
        function logFilterPerformance(duration, resultCount) {
            if (window.filterStats) {
                window.filterStats.totalSearches++;
                window.filterStats.lastFilterTime = Date.now();
                window.filterStats.performanceLog.push({
                    timestamp: Date.now(),
                    duration: duration,
                    resultCount: resultCount
                });
                
                // Keep only last 100 entries
                if (window.filterStats.performanceLog.length > 100) {
                    window.filterStats.performanceLog.shift();
                }
            }
        }

        // Enhanced filter functionality with better performance and pagination
        function applyFilters() {
            const roleFilter = document.getElementById('roleFilter').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
            const searchQuery = document.getElementById('searchInput').value.toLowerCase().trim();
            const rows = document.querySelectorAll('#userTableBody tr');
            
            const startTime = performance.now();
            const filteredRows = [];
            
            // Show loading state for large datasets
            if (rows.length > 50) {
                showFilterLoading(true);
            }
            
            // Use requestAnimationFrame for better performance
            requestAnimationFrame(() => {
                rows.forEach((row, index) => {
                    let visible = true;
                    
                    try {
                        // Search filter - Enhanced search across multiple fields
                        if (searchQuery) {
                            const userEmail = row.querySelector('.user-email')?.textContent?.toLowerCase() || '';
                            const userName = row.querySelector('.user-name')?.textContent?.toLowerCase() || '';
                            const userId = row.getAttribute('data-user-id')?.toLowerCase() || '';
                            const roleText = row.querySelector('.role-badge')?.textContent?.toLowerCase() || '';
                            
                            const searchFields = [userEmail, userName, userId, roleText].join(' ');
                            visible = visible && searchFields.includes(searchQuery);
                        }
                        
                        // Role filter - Improved role matching
                        if (roleFilter && roleFilter !== '') {
                            const roleCell = row.querySelector('.role-badge');
                            if (roleCell) {
                                const roleText = roleCell.textContent.toLowerCase();
                                let roleMatches = false;
                                
                                switch (roleFilter) {
                                    case 'admin':
                                        roleMatches = roleText.includes('quản trị') || roleText.includes('admin');
                                        break;
                                    case 'teacher':
                                        roleMatches = roleText.includes('giáo viên') || roleText.includes('teacher');
                                        break;
                                    case 'student':
                                        roleMatches = roleText.includes('học sinh') || roleText.includes('student');
                                        break;
                                    default:
                                        roleMatches = true;
                                }
                                visible = visible && roleMatches;
                            }
                        }
                        
                        // Status filter - Enhanced status detection
                        if (statusFilter && statusFilter !== '') {
                            const statusCell = row.querySelector('.status-badge');
                            if (statusCell) {
                                const statusText = statusCell.textContent.toLowerCase();
                                const isActive = statusText.includes('hoạt động') || statusText.includes('active');
                                const isInactive = statusText.includes('vô hiệu') || statusText.includes('inactive') || statusText.includes('khóa');
                                
                                if (statusFilter === 'active') {
                                    visible = visible && isActive;
                                } else if (statusFilter === 'inactive') {
                                    visible = visible && isInactive;
                                }
                            }
                        }
                        
                        // Add to filtered results if visible
                        if (visible) {
                            filteredRows.push(row);
                        }
                        
                    } catch (error) {
                        console.error('Error filtering row:', error);
                        // Fallback - include the row if there's an error
                        filteredRows.push(row);
                    }
                });
                
                // Update pagination with filtered results
                if (window.PAGINATION) {
                    PAGINATION.updateFilteredItems(filteredRows);
                }
                
                // Update result count with animation
                updateResultCount(filteredRows.length);
                
                // Hide loading state
                showFilterLoading(false);
                
                // Performance logging
                const endTime = performance.now();
                console.log(`✅ Filter applied in ${(endTime - startTime).toFixed(2)}ms - ${filteredRows.length} results`);
                
                // Show filter performance toast for large datasets
                if (rows.length > 100) {
                    ACCOUNT_LOCK.showToast(`Đã lọc ${filteredRows.length} kết quả trong ${(endTime - startTime).toFixed(0)}ms`, 'info');
                }
            });
        }

        // Enhanced result count update with smooth animation
        function updateResultCount(count = null) {
            const resultCountElement = document.getElementById('resultCount');
            if (!resultCountElement) return;
            
            if (count === null) {
                const visibleRows = document.querySelectorAll('#userTableBody tr:not([style*="display: none"])');
                count = visibleRows.length;
            }
            
            // Animate the count change
            resultCountElement.style.transform = 'scale(1.05)';
            resultCountElement.style.transition = 'all 0.3s ease';
            
            setTimeout(() => {
                resultCountElement.textContent = `Hiển thị ${count} tài khoản`;
                resultCountElement.style.transform = 'scale(1)';
                
                // Color coding based on result count
                if (count === 0) {
                    resultCountElement.className = 'text-sm font-semibold text-red-600 bg-red-50 px-4 py-2 rounded-lg border border-red-200';
                } else if (count < 5) {
                    resultCountElement.className = 'text-sm font-semibold text-yellow-600 bg-yellow-50 px-4 py-2 rounded-lg border border-yellow-200';
                } else {
                    resultCountElement.className = 'text-sm font-semibold text-indigo-600 bg-indigo-50 px-4 py-2 rounded-lg border border-indigo-200';
                }
            }, 150);
        }

        // Show/hide filter loading state
        function showFilterLoading(show) {
            const resultCount = document.getElementById('resultCount');
            if (!resultCount) return;
            
            if (show) {
                resultCount.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Đang lọc...';
                resultCount.className = 'text-sm font-semibold text-blue-600 bg-blue-50 px-4 py-2 rounded-lg border border-blue-200';
            }
        }

        // Enhanced reset filters with smooth animation and pagination
        function resetFilters() {
            console.log('🔄 Resetting all filters...');
            
            // Reset form values with animation
            const inputs = ['searchInput', 'roleFilter', 'statusFilter'];
            inputs.forEach((inputId, index) => {
                const element = document.getElementById(inputId);
                if (element) {
                    setTimeout(() => {
                        element.style.transform = 'scale(1.05)';
                        element.value = '';
                        setTimeout(() => {
                            element.style.transform = 'scale(1)';
                        }, 200);
                    }, index * 100);
                }
            });
            
            // Reset pagination to show all items
            if (window.PAGINATION) {
                PAGINATION.filteredItems = [...PAGINATION.allRows];
                PAGINATION.currentPage = 1;
                PAGINATION.updateDisplay();
            }
            
            // Update count
            setTimeout(() => {
                ACCOUNT_LOCK.showToast('✨ Đã đặt lại tất cả bộ lọc', 'success');
            }, 500);
        }

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            setupAccountManagement();
        });
    </script>
</body>
</html>

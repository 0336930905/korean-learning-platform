<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>B√°o c√°o th·ªëng k√™ - H·ªá th·ªëng h·ªçc ti·∫øng H√†n</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Th√™m th∆∞ vi·ªán cho xu·∫•t Excel/PDF -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <style>
        .h100 {
            height: 100% !important;
        }
        .glass-card {
            background: rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .gradient-bg {
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #d946ef 100%);
            position: relative;
            overflow: hidden;
        }
        
        .stat-card {
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }
        
        .loading-spinner {
            border: 3px solid #f3f4f6;
            border-top: 3px solid #6366f1;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Enhanced Chart Styles */
        .chart-container {
            position: relative;
            height: 500px;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 20px;
            transition: all 0.3s ease;
        }

        .chart-container:hover {
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
            transform: translateY(-2px);
        }

        .secondary-chart {
            height: 300px !important;
        }

        /* Date Filter Styles */
        .date-filter-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        /* Enhanced Button Styles */
        .btn-primary {
            background: linear-gradient(45deg, #6366f1, #8b5cf6);
            border: none;
            color: white;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background: linear-gradient(45deg, #4f46e5, #7c3aed);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4);
        }

        /* Table Enhancement */
        .data-table {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            overflow: hidden;
        }

        /* Animation for new elements */
        .fade-in {
            animation: fadeIn 0.6s ease-in-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .custom-select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
            border: 2px solid #e5e7eb;
            transition: all 0.3s ease;
        }
        
        .custom-select:focus {
            border-color: #6366f1;
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
            outline: none;
        }
        
        .table-modern {
            border-collapse: separate;
            border-spacing: 0;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        }
        
        .table-modern thead th {
            background: linear-gradient(135deg, #f8fafc, #e2e8f0);
            font-weight: 600;
            color: #374151;
            border-bottom: 2px solid #e5e7eb;
        }
        
        .table-modern tbody tr {
            transition: all 0.2s ease;
        }
        
        .table-modern tbody tr:hover {
            background-color: #f8fafc;
            transform: scale(1.01);
        }
        
        .btn-modern {
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            border: none;
            color: white;
            font-weight: 600;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .btn-modern:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4);
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="flex h-screen">
        <%- include('../partials/admin_sidebar', { user: user }) %>
        <div class="flex-1 flex flex-col overflow-hidden">
            <%- include('../partials/dashboards_header', { user: user }) %>
            <main class="flex-1 overflow-x-hidden overflow-y-auto bg-gray-50">
                <!-- Page Header -->
                <div class="gradient-bg py-12 px-8 text-white">
                    <div class="max-w-7xl mx-auto relative z-10">
                        <div class="flex items-center justify-between mb-6">
                            <div>
                                <h1 class="text-4xl font-bold mb-3 flex items-center gap-3">
                                    <i class="fas fa-chart-line text-white drop-shadow-lg"></i> 
                                    B√°o c√°o th·ªëng k√™
                                </h1>
                                <p class="text-lg text-white/90 max-w-2xl">
                                    Theo d√µi v√† ph√¢n t√≠ch doanh thu, hi·ªáu su·∫•t h·ªçc t·∫≠p v√† th·ªëng k√™ t√†i kho·∫£n m·ªôt c√°ch chi ti·∫øt
                                </p>
                            </div>
                            <div class="hidden lg:flex items-center gap-4">
                                <div class="flex items-center gap-2 bg-white/20 rounded-lg px-4 py-2">
                                    <i class="fas fa-calendar-alt text-white/80"></i>
                                    <span class="text-white/90 font-medium" id="currentDate"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="max-w-7xl mx-auto px-4 py-8">
                    <!-- Filter Section -->
                    <div class="glass-card rounded-xl shadow-lg overflow-hidden mb-8">
                        <div class="bg-gradient-to-r from-indigo-50 to-purple-50 p-6 border-b border-gray-200">
                            <h3 class="text-lg font-semibold text-gray-800 flex items-center gap-2">
                                <i class="fas fa-filter text-indigo-600"></i>
                                B·ªô l·ªçc b√°o c√°o
                            </h3>
                            <p class="text-gray-600 text-sm mt-1">T√πy ch·ªânh c√°c th√¥ng s·ªë ƒë·ªÉ t·∫°o b√°o c√°o ph√π h·ª£p</p>
                        </div>
                        <div class="p-6">
                            <div class="grid grid-cols-1 md:grid-cols-5 gap-6">
                                <div>
                                    <label for="reportType" class="block text-sm font-semibold text-gray-700 mb-2">
                                        <i class="fas fa-chart-pie text-indigo-500 mr-1"></i>
                                        Lo·∫°i b√°o c√°o
                                    </label>
                                    <select class="custom-select w-full rounded-lg p-3 bg-white" id="reportType">
                                        <option value="revenue">üìä Doanh thu</option>
                                        <option value="academic">üéì H·ªçc l·ª±c theo l·ªõp</option>
                                        <option value="accounts">üë• Th·ªëng k√™ t√†i kho·∫£n</option>
                                    </select>
                                </div>
                                
                                <!-- Date Range Filter for Revenue Report -->
                                <div id="dateRangeFilter" style="display: none;">
                                    <label for="dateRange" class="block text-sm font-semibold text-gray-700 mb-2">
                                        <i class="fas fa-calendar text-blue-500 mr-1"></i>
                                        Kho·∫£ng th·ªùi gian
                                    </label>
                                    <select class="custom-select w-full rounded-lg p-3 bg-white" id="dateRange">
                                        <option value="7days">7 ng√†y qua</option>
                                        <option value="30days">30 ng√†y qua</option>
                                        <option value="3months">3 th√°ng qua</option>
                                        <option value="6months">6 th√°ng qua</option>
                                        <option value="1year" selected>1 nƒÉm qua</option>
                                        <option value="custom">T√πy ch·ªânh</option>
                                    </select>
                                </div>
                                
                                <!-- Custom Date Range -->
                                <div id="customDateFilter" style="display: none;">
                                    <label for="startDate" class="block text-sm font-semibold text-gray-700 mb-2">
                                        <i class="fas fa-calendar-day text-green-500 mr-1"></i>
                                        T·ª´ ng√†y
                                    </label>
                                    <input type="date" id="startDate" class="w-full rounded-lg p-3 border-2 border-gray-200 focus:border-blue-500 focus:ring-0 transition-all">
                                </div>
                                
                                <div id="customDateToFilter" style="display: none;">
                                    <label for="endDate" class="block text-sm font-semibold text-gray-700 mb-2">
                                        <i class="fas fa-calendar-check text-red-500 mr-1"></i>
                                        ƒê·∫øn ng√†y
                                    </label>
                                    <input type="date" id="endDate" class="w-full rounded-lg p-3 border-2 border-gray-200 focus:border-blue-500 focus:ring-0 transition-all">
                                </div>
                                
                                <div id="classFilterDiv">
                                    <label for="filterClass" class="block text-sm font-semibold text-gray-700 mb-2">
                                        <i class="fas fa-users text-green-500 mr-1"></i>
                                        L·ªõp h·ªçc
                                    </label>
                                    <select class="custom-select w-full rounded-lg p-3 bg-white" id="filterClass">
                                        <option value="">T·∫•t c·∫£ l·ªõp h·ªçc</option>
                                    </select>
                                </div>
                                
                                <div class="flex items-end gap-3">
                                    <button type="button" class="btn-modern px-6 py-3 rounded-lg shadow-lg hover:scale-105 transition-all flex items-center gap-2" onclick="loadReport()">
                                        <i class="fas fa-search"></i> 
                                        T·∫°o b√°o c√°o
                                    </button>
                                    <!-- N√∫t xu·∫•t b√°o c√°o -->
                                    <div class="relative group">
                                       
                                        <!-- Menu xu·∫•t -->
                                        <div id="exportMenu" class="absolute top-full right-0 mt-2 bg-white rounded-lg shadow-xl border border-gray-200 min-w-56 z-50 hidden">
                                            <div class="py-2">
                                                <button onclick="exportToExcel()" class="w-full text-left px-4 py-2 hover:bg-gray-50 flex items-center gap-2">
                                                    <i class="fas fa-file-excel text-green-600"></i>
                                                    Xu·∫•t Excel (.xlsx)
                                                </button>
                                                <button onclick="exportToPDF()" class="w-full text-left px-4 py-2 hover:bg-gray-50 flex items-center gap-2">
                                                    <i class="fas fa-file-pdf text-red-600"></i>
                                                    Xu·∫•t PDF
                                                </button>
                                                <hr class="my-2">
                                                <button onclick="exportAllCharts()" class="w-full text-left px-4 py-2 hover:bg-gray-50 flex items-center gap-2">
                                                    <i class="fas fa-chart-bar text-blue-600"></i>
                                                    Xu·∫•t t·∫•t c·∫£ bi·ªÉu ƒë·ªì
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Loading -->
                    <div id="loading" class="text-center py-12" style="display: none;">
                        <div class="inline-flex flex-col items-center">
                            <div class="loading-spinner mb-4"></div>
                            <p class="text-indigo-600 font-semibold text-lg">ƒêang t·∫°o b√°o c√°o...</p>
                            <p class="text-gray-500 text-sm mt-1">Vui l√≤ng ch·ªù trong gi√¢y l√°t</p>
                        </div>
                    </div>

                    <!-- Report Content -->
                    <div id="reportContent" class="space-y-8">
                        <!-- Revenue Report -->
                        <div id="revenueReport" class="report-section" style="display: none;">
                            <!-- Revenue Overview Cards v·ªõi design m·ªõi -->
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                                <!-- Card 1: T·ªïng doanh thu -->
                                <div class="relative overflow-hidden bg-white rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 group">
                                    <!-- Background gradient -->
                                    <div class="absolute inset-0 bg-gradient-to-br from-blue-500 via-purple-600 to-indigo-700"></div>
                                    
                                    <!-- Glass overlay -->
                                    <div class="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
                                    
                                    <!-- Content -->
                                    <div class="relative p-8 text-white">
                                        <!-- Header v·ªõi icon -->
                                        <div class="flex items-center justify-between mb-6">
                                            <div class="bg-white/20 p-4 rounded-2xl backdrop-blur-sm group-hover:scale-110 transition-transform duration-300">
                                                <i class="fas fa-money-bill-wave text-2xl"></i>
                                            </div>
                                            <div class="bg-white/10 p-2 rounded-xl backdrop-blur-sm">
                                                <i class="fas fa-chart-line text-lg opacity-70"></i>
                                            </div>
                                        </div>
                                        
                                        <!-- Main content -->
                                        <div class="mb-4">
                                            <h3 class="text-4xl font-black mb-2" id="totalRevenue">0 VNƒê</h3>
                                            <h6 class="text-lg font-semibold opacity-90">T·ªïng doanh thu</h6>
                                        </div>
                                        
                                        <!-- Status indicator -->
                                        <div class="flex items-center gap-2 text-sm">
                                            <div class="flex items-center gap-1">
                                                <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                                                <i class="fas fa-trending-up text-green-300"></i>
                                            </div>
                                            <span class="text-green-300 font-medium">+12.5% so v·ªõi th√°ng tr∆∞·ªõc</span>
                                        </div>
                                    </div>
                                    
                                    <!-- Decorative elements -->
                                    <div class="absolute -top-4 -right-4 w-24 h-24 bg-white/5 rounded-full blur-2xl"></div>
                                    <div class="absolute -bottom-4 -left-4 w-32 h-32 bg-white/5 rounded-full blur-3xl"></div>
                                </div>

                                <!-- Card 2: S·ªë ƒë∆°n h√†ng -->
                                <div class="relative overflow-hidden bg-white rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 group">
                                    <!-- Background gradient -->
                                    <div class="absolute inset-0 bg-gradient-to-br from-emerald-500 via-green-600 to-teal-700"></div>
                                    
                                    <!-- Glass overlay -->
                                    <div class="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
                                    
                                    <!-- Content -->
                                    <div class="relative p-8 text-white">
                                        <!-- Header v·ªõi icon -->
                                        <div class="flex items-center justify-between mb-6">
                                            <div class="bg-white/20 p-4 rounded-2xl backdrop-blur-sm group-hover:scale-110 transition-transform duration-300">
                                                <i class="fas fa-shopping-cart text-2xl"></i>
                                            </div>
                                            <div class="bg-white/10 p-2 rounded-xl backdrop-blur-sm">
                                                <i class="fas fa-box text-lg opacity-70"></i>
                                            </div>
                                        </div>
                                        
                                        <!-- Main content -->
                                        <div class="mb-4">
                                            <h3 class="text-4xl font-black mb-2" id="totalOrders">0</h3>
                                            <h6 class="text-lg font-semibold opacity-90">S·ªë ƒë∆°n h√†ng</h6>
                                        </div>
                                        
                                        <!-- Status indicator -->
                                        <div class="flex items-center gap-2 text-sm">
                                            <div class="flex items-center gap-1">
                                                <div class="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
                                                <i class="fas fa-check-circle text-blue-300"></i>
                                            </div>
                                            <span class="text-blue-300 font-medium">ƒê∆°n h√†ng th√†nh c√¥ng</span>
                                        </div>
                                    </div>
                                    
                                    <!-- Decorative elements -->
                                    <div class="absolute -top-4 -right-4 w-24 h-24 bg-white/5 rounded-full blur-2xl"></div>
                                    <div class="absolute -bottom-4 -left-4 w-32 h-32 bg-white/5 rounded-full blur-3xl"></div>
                                </div>

                                <!-- Card 3: Gi√° tr·ªã trung b√¨nh -->
                                <div class="relative overflow-hidden bg-white rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 group">
                                    <!-- Background gradient -->
                                    <div class="absolute inset-0 bg-gradient-to-br from-purple-600 via-pink-600 to-rose-700"></div>
                                    
                                    <!-- Glass overlay -->
                                    <div class="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
                                    
                                    <!-- Content -->
                                    <div class="relative p-8 text-white">
                                        <!-- Header v·ªõi icon -->
                                        <div class="flex items-center justify-between mb-6">
                                            <div class="bg-white/20 p-4 rounded-2xl backdrop-blur-sm group-hover:scale-110 transition-transform duration-300">
                                                <i class="fas fa-calculator text-2xl"></i>
                                            </div>
                                            <div class="bg-white/10 p-2 rounded-xl backdrop-blur-sm">
                                                <i class="fas fa-percentage text-lg opacity-70"></i>
                                            </div>
                                        </div>
                                        
                                        <!-- Main content -->
                                        <div class="mb-4">
                                            <h3 class="text-4xl font-black mb-2" id="averageOrder">0 VNƒê</h3>
                                            <h6 class="text-lg font-semibold opacity-90">Gi√° tr·ªã trung b√¨nh</h6>
                                        </div>
                                        
                                        <!-- Status indicator -->
                                        <div class="flex items-center gap-2 text-sm">
                                            <div class="flex items-center gap-1">
                                                <div class="w-2 h-2 bg-yellow-400 rounded-full animate-pulse"></div>
                                                <i class="fas fa-chart-bar text-yellow-300"></i>
                                            </div>
                                            <span class="text-yellow-300 font-medium">Trung b√¨nh m·ªói ƒë∆°n</span>
                                        </div>
                                    </div>
                                    
                                    <!-- Decorative elements -->
                                    <div class="absolute -top-4 -right-4 w-24 h-24 bg-white/5 rounded-full blur-2xl"></div>
                                    <div class="absolute -bottom-4 -left-4 w-32 h-32 bg-white/5 rounded-full blur-3xl"></div>
                                </div>
                            </div>

                            <!-- Course Revenue Table - Moved to Top with Enhanced Filter -->
                            <div class="bg-white/90 backdrop-blur-xl rounded-2xl shadow-xl border border-white/30 overflow-hidden mb-8">
                                <div class="bg-gradient-to-r from-indigo-50 to-purple-50 p-6 border-b border-gray-200">
                                    <div class="flex items-center justify-between mb-4">
                                        <div class="flex items-center gap-3">
                                            <div class="bg-gradient-to-r from-indigo-500 to-purple-600 p-3 rounded-xl">
                                                <i class="fas fa-table text-white"></i>
                                            </div>
                                            <div>
                                                <h4 class="text-xl font-bold text-gray-800">Chi ti·∫øt doanh thu theo kh√≥a h·ªçc</h4>
                                                <p class="text-gray-600 text-sm">B·∫£ng t√≥m t·∫Øt doanh thu t·ª´ng kh√≥a h·ªçc theo th·ªùi gian c·ª• th·ªÉ</p>
                                            </div>
                                        </div>
                                        <button onclick="exportRevenueTable()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg font-medium transition-all hover:scale-105 hover:shadow-lg flex items-center gap-2 group" title="Xu·∫•t b·∫£ng doanh thu ra file Excel">
                                            <i class="fas fa-file-excel group-hover:animate-bounce"></i>
                                            Xu·∫•t Excel
                                        </button>
                                    </div>
                                    
                                    <!-- Enhanced Time Filter with Specific Date Range -->
                                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                                        <div>
                                            <label for="courseTimeFilter" class="block text-sm font-semibold text-gray-700 mb-2">
                                                <i class="fas fa-clock text-indigo-500 mr-1"></i>
                                                Kho·∫£ng th·ªùi gian
                                            </label>
                                            <select id="courseTimeFilter" class="custom-select bg-white border border-gray-300 rounded-lg px-3 py-2 text-sm w-full">
                                                <option value="custom">T√πy ch·ªçn</option>
                                                <option value="7days">7 ng√†y qua</option>
                                                <option value="30days">30 ng√†y qua</option>
                                                <option value="3months">3 th√°ng qua</option>
                                                <option value="6months">6 th√°ng qua</option>
                                                <option value="1year">1 nƒÉm qua</option>
                                                <option value="all">T·∫•t c·∫£</option>
                                            </select>
                                        </div>
                                        
                                        <div>
                                            <label for="courseStartDate" class="block text-sm font-semibold text-gray-700 mb-2">
                                                <i class="fas fa-calendar-day text-green-500 mr-1"></i>
                                                T·ª´ ng√†y
                                            </label>
                                            <input type="date" id="courseStartDate" class="w-full rounded-lg px-3 py-2 border border-gray-300 focus:border-indigo-500 focus:ring-0 transition-all text-sm">
                                        </div>
                                        
                                        <div>
                                            <label for="courseEndDate" class="block text-sm font-semibold text-gray-700 mb-2">
                                                <i class="fas fa-calendar-check text-red-500 mr-1"></i>
                                                ƒê·∫øn ng√†y
                                            </label>
                                            <input type="date" id="courseEndDate" class="w-full rounded-lg px-3 py-2 border border-gray-300 focus:border-indigo-500 focus:ring-0 transition-all text-sm">
                                        </div>
                                        
                                        <div class="flex items-end">
                                            <button id="applyCourseFilter" class="w-full bg-indigo-500 hover:bg-indigo-600 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center justify-center gap-2">
                                                <i class="fas fa-filter"></i>
                                                √Åp d·ª•ng
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="overflow-x-auto max-h-96">
                                    <table class="table-modern w-full text-sm">
                                        <thead>
                                            <tr class="bg-gray-50">
                                                <th class="px-4 py-3 text-left font-semibold text-gray-700">#</th>
                                                <th class="px-4 py-3 text-left font-semibold text-gray-700">Kh√≥a h·ªçc</th>
                                                <th class="px-4 py-3 text-center font-semibold text-gray-700">Doanh thu</th>
                                            </tr>
                                        </thead>
                                        <tbody id="courseRevenueTable" class="divide-y divide-gray-100">
                                            <!-- Data s·∫Ω ƒë∆∞·ª£c load ƒë·ªông -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>

                            <!-- Main Revenue Analytics Dashboard -->
                            <div class="space-y-8">
                                <!-- Primary Revenue Chart - Large Size -->
                                <div class="bg-white/90 backdrop-blur-xl rounded-3xl p-8 shadow-2xl border border-white/30 hover:shadow-3xl transition-all duration-500">
                                    <div class="flex items-center justify-between mb-8">
                                        <div class="flex items-center gap-4">
                                            <div class="bg-gradient-to-r from-blue-500 to-purple-600 p-4 rounded-2xl shadow-lg">
                                                <i class="fas fa-chart-line text-white text-2xl"></i>
                                            </div>
                                            <div>
                                                <h3 class="font-bold text-3xl text-gray-800 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                                                    Bi·ªÉu ƒë·ªì Doanh thu Chi ti·∫øt
                                                </h3>
                                                <p class="text-gray-600 text-lg mt-1">Ph√¢n t√≠ch xu h∆∞·ªõng doanh thu theo th·ªùi gian</p>
                                            </div>
                                        </div>
                                        <div class="flex items-center gap-3">
                                            <div class="bg-gradient-to-r from-blue-100 to-purple-100 px-6 py-3 rounded-xl">
                                                <span class="text-blue-700 font-semibold">ÔøΩ Xu h∆∞·ªõng tƒÉng tr∆∞·ªüng</span>
                                            </div>
                                            <button onclick="downloadChart('revenueChart')" class="bg-gray-100 hover:bg-gray-200 p-3 rounded-xl transition-colors group relative" title="T·∫£i xu·ªëng bi·ªÉu ƒë·ªì d∆∞·ªõi d·∫°ng PNG">
                                                <i class="fas fa-download text-gray-600 group-hover:text-gray-800"></i>
                                                <!-- Tooltip -->
                                                <div class="absolute bottom-full right-0 mb-2 hidden group-hover:block">
                                                    <div class="bg-gray-800 text-white text-xs rounded py-1 px-2 whitespace-nowrap">
                                                        T·∫£i xu·ªëng bi·ªÉu ƒë·ªì
                                                        <div class="absolute top-full right-2 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-800"></div>
                                                    </div>
                                                </div>
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <!-- Large Chart Container -->
                                    <div class="relative bg-gradient-to-br from-blue-50/50 to-purple-50/50 rounded-2xl p-6 border border-blue-100">
                                        <canvas id="revenueChart" style="width: 100%; height: 500px; max-height: 500px;"></canvas>
                                        
                                        <!-- Chart overlay effects -->
                                        <div class="absolute inset-0 bg-gradient-to-t from-blue-50/30 to-transparent pointer-events-none rounded-2xl"></div>
                                        
                                        <!-- Chart stats overlay -->
                                        <div class="absolute top-4 right-4 bg-white/80 backdrop-blur-sm rounded-xl p-4 shadow-lg">
                                            <div class="text-sm">
                                                <div class="flex items-center gap-2 mb-2">
                                                    <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
                                                    <span class="text-gray-700 font-medium">Doanh thu</span>
                                                </div>
                                                <div class="text-2xl font-bold text-blue-600" id="chartMaxValue">0 VNƒê</div>
                                                <div class="text-xs text-gray-500">Cao nh·∫•t</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Secondary Charts Grid -->
                                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                                    <!-- Payment Methods Chart -->
                                    <div class="bg-white/90 backdrop-blur-xl rounded-3xl p-8 shadow-2xl border border-white/30 hover:shadow-3xl transition-all duration-500">
                                        <div class="flex items-center justify-between mb-6">
                                            <div class="flex items-center gap-3">
                                                <div class="bg-gradient-to-r from-emerald-500 to-teal-600 p-3 rounded-2xl">
                                                    <i class="fas fa-credit-card text-white text-xl"></i>
                                                </div>
                                                <div>
                                                    <h4 class="font-bold text-xl text-gray-800">Ph∆∞∆°ng th·ª©c thanh to√°n</h4>
                                                    <p class="text-gray-600 text-sm">Ph√¢n b·ªï theo lo·∫°i thanh to√°n</p>
                                                </div>
                                            </div>
                                            <div class="bg-gradient-to-r from-emerald-100 to-teal-100 px-4 py-2 rounded-xl">
                                                <span class="text-emerald-700 font-semibold text-sm">üí≥ Ph√¢n t√≠ch</span>
                                            </div>
                                        </div>
                                        <div class="relative">
                                            <canvas id="paymentChart" style="width: 100%; height: 300px; max-height: 300px;"></canvas>
                                            <div class="absolute inset-0 bg-gradient-to-t from-emerald-50/50 to-transparent pointer-events-none rounded-2xl"></div>
                                        </div>
                                    </div>

                                    <!-- Course Performance Chart -->
                                    <div class="bg-white/90 backdrop-blur-xl rounded-3xl p-8 shadow-2xl border border-white/30 hover:shadow-3xl transition-all duration-500">
                                        <div class="flex items-center justify-between mb-6">
                                            <div class="flex items-center gap-3">
                                                <div class="bg-gradient-to-r from-orange-500 to-red-600 p-3 rounded-2xl">
                                                    <i class="fas fa-book-open text-white text-xl"></i>
                                                </div>
                                                <div>
                                                    <h4 class="font-bold text-xl text-gray-800">Top kh√≥a h·ªçc</h4>
                                                    <p class="text-gray-600 text-sm">Doanh thu theo kh√≥a h·ªçc</p>
                                                </div>
                                            </div>
                                            <div class="bg-gradient-to-r from-orange-100 to-red-100 px-4 py-2 rounded-xl">
                                                <span class="text-orange-700 font-semibold text-sm">üèÜ Hi·ªáu su·∫•t</span>
                                            </div>
                                        </div>
                                        <div class="relative">
                                            <canvas id="courseChart" style="width: 100%; height: 300px; max-height: 300px;"></canvas>
                                            <div class="absolute inset-0 bg-gradient-to-t from-orange-50/50 to-transparent pointer-events-none rounded-2xl"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                         
                        </div>                        <!-- Academic Report -->
                        <div id="academicReport" class="report-section" style="display: none;">
                            <!-- Scoring System Info -->
                            <div class="bg-gradient-to-r from-blue-50 via-indigo-50 to-purple-50 rounded-2xl p-6 shadow-lg mb-8 border border-blue-200">
                                <div class="flex items-center gap-3 mb-4">
                                    <div class="bg-blue-500 p-3 rounded-xl">
                                        <i class="fas fa-calculator text-white text-xl"></i>
                                    </div>
                                    <h5 class="font-bold text-xl text-blue-800">H·ªá th·ªëng t√≠nh ƒëi·ªÉm t·ªïng h·ª£p</h5>
                                </div>
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <div class="bg-white/70 backdrop-blur-sm rounded-xl p-4 border border-blue-100">
                                        <h6 class="font-semibold text-blue-700 mb-3 flex items-center gap-2">
                                            <i class="fas fa-formula text-blue-500"></i>
                                            C√¥ng th·ª©c t√≠nh ƒëi·ªÉm
                                        </h6>
                                        <div class="text-sm text-blue-700 space-y-2">
                                            <div class="bg-blue-100 p-3 rounded-lg font-semibold text-blue-800">
                                                ƒêi·ªÉm t·ªïng h·ª£p = B√†i t·∫≠p (60%) + Ki·ªÉm tra (40%)
                                            </div>
                                            <p>‚Ä¢ N·∫øu ch·ªâ c√≥ b√†i t·∫≠p ho·∫∑c ki·ªÉm tra: t√≠nh theo ƒëi·ªÉm c√≥ s·∫µn</p>
                                        </div>
                                    </div>
                                    <div class="bg-white/70 backdrop-blur-sm rounded-xl p-4 border border-purple-100">
                                        <h6 class="font-semibold text-purple-700 mb-3 flex items-center gap-2">
                                            <i class="fas fa-medal text-purple-500"></i>
                                            Thang ƒëi·ªÉm x·∫øp lo·∫°i
                                        </h6>
                                        <div class="text-sm space-y-1">
                                            <div class="flex justify-between"><span class="text-red-600 font-semibold">Xu·∫•t s·∫Øc:</span> <span>‚â• 9.0</span></div>
                                            <div class="flex justify-between"><span class="text-orange-600 font-semibold">Gi·ªèi:</span> <span>‚â• 8.0</span></div>
                                            <div class="flex justify-between"><span class="text-blue-600 font-semibold">Kh√°:</span> <span>‚â• 6.5</span></div>
                                            <div class="flex justify-between"><span class="text-green-600 font-semibold">Trung b√¨nh:</span> <span>‚â• 5.0</span></div>
                                            <div class="flex justify-between"><span class="text-gray-600 font-semibold">Y·∫øu:</span> <span>< 5.0</span></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Class Selection Filter -->
                            <div class="bg-white/90 backdrop-blur-xl rounded-2xl shadow-xl border border-white/30 overflow-hidden mb-8">
                                <div class="bg-gradient-to-r from-purple-50 to-blue-50 p-6 border-b border-gray-200">
                                    <div class="flex items-center justify-between mb-4">
                                        <div class="flex items-center gap-3">
                                            <div class="bg-gradient-to-r from-purple-500 to-blue-600 p-3 rounded-xl">
                                                <i class="fas fa-school text-white"></i>
                                            </div>
                                            <div>
                                                <h4 class="text-xl font-bold text-gray-800">L·ªçc th√¥ng tin l·ªõp h·ªçc</h4>
                                                <p class="text-gray-600 text-sm">Ch·ªçn l·ªõp h·ªçc ƒë·ªÉ xem th·ªëng k√™ chi ti·∫øt</p>
                                            </div>
                                        </div>
                                        <button onclick="resetClassFilter()" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center gap-2">
                                            <i class="fas fa-refresh"></i>
                                            ƒê·∫∑t l·∫°i
                                        </button>
                                    </div>
                                    
                                    <!-- Class Filter Controls -->
                                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                        <div>
                                            <label for="filterClassSelect" class="block text-sm font-semibold text-gray-700 mb-2">
                                                <i class="fas fa-users text-purple-500 mr-1"></i>
                                                Ch·ªçn l·ªõp h·ªçc
                                            </label>
                                            <select id="filterClassSelect" class="custom-select bg-white border border-gray-300 rounded-lg px-3 py-2 text-sm w-full">
                                                <option value="">T·∫•t c·∫£ l·ªõp h·ªçc</option>
                                            </select>
                                        </div>
                                        
                                        <div>
                                            <label for="classStartDate" class="block text-sm font-semibold text-gray-700 mb-2">
                                                <i class="fas fa-calendar-day text-green-500 mr-1"></i>
                                                T·ª´ ng√†y
                                            </label>
                                            <input type="date" id="classStartDate" class="w-full rounded-lg px-3 py-2 border border-gray-300 focus:border-purple-500 focus:ring-0 transition-all text-sm">
                                        </div>
                                        
                                        <div class="flex items-end">
                                            <button id="applyClassFilter" class="w-full bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center justify-center gap-2">
                                                <i class="fas fa-search"></i>
                                                T√¨m ki·∫øm
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Class Overview -->
                            <div id="classOverview" class="mb-8"></div>

                            <!-- Academic Statistics Grid -->
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
                                <!-- Assignment Statistics -->
                                <div class="bg-gradient-to-br from-blue-50 to-indigo-100 rounded-2xl p-6 shadow-lg border border-blue-200">
                                    <div class="flex items-center gap-3 mb-6">
                                        <div class="bg-blue-500 p-3 rounded-xl">
                                            <i class="fas fa-tasks text-white text-xl"></i>
                                        </div>
                                        <h5 class="font-bold text-xl text-blue-800">Th·ªëng k√™ b√†i t·∫≠p</h5>
                                    </div>
                                    <div class="bg-white/80 backdrop-blur-sm rounded-xl overflow-hidden border border-blue-100">
                                        <div class="overflow-x-auto">
                                            <table class="min-w-full text-sm">
                                                <thead class="bg-blue-500 text-white">
                                                    <tr>
                                                        <th class="px-4 py-3 text-left font-semibold">B√†i t·∫≠p</th>
                                                        <th class="px-4 py-3 text-center font-semibold">ƒêi·ªÉm t·ªëi ƒëa</th>
                                                        <th class="px-4 py-3 text-center font-semibold">B√†i n·ªôp</th>
                                                        <th class="px-4 py-3 text-center font-semibold">ƒê√£ ch·∫•m</th>
                                                        <th class="px-4 py-3 text-center font-semibold">Ch∆∞a ch·∫•m</th>
                                                        <th class="px-4 py-3 text-center font-semibold">ƒêTB</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="assignmentStatsTable" class="divide-y divide-blue-100"></tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>

                                <!-- Test Statistics -->
                                <div class="bg-gradient-to-br from-green-50 to-emerald-100 rounded-2xl p-6 shadow-lg border border-green-200">
                                    <div class="flex items-center gap-3 mb-6">
                                        <div class="bg-green-500 p-3 rounded-xl">
                                            <i class="fas fa-clipboard-check text-white text-xl"></i>
                                        </div>
                                        <h5 class="font-bold text-xl text-green-800">Th·ªëng k√™ ki·ªÉm tra</h5>
                                    </div>
                                    <div class="bg-white/80 backdrop-blur-sm rounded-xl overflow-hidden border border-green-100">
                                        <div class="overflow-x-auto">
                                            <table class="min-w-full text-sm">
                                                <thead class="bg-green-500 text-white">
                                                    <tr>
                                                        <th class="px-4 py-3 text-left font-semibold">H·ªçc sinh</th>
                                                        <th class="px-4 py-3 text-center font-semibold">S·ªë b√†i</th>
                                                        <th class="px-4 py-3 text-center font-semibold">ƒêTB</th>
                                                        <th class="px-4 py-3 text-center font-semibold">Cao nh·∫•t</th>
                                                        <th class="px-4 py-3 text-center font-semibold">Th·∫•p nh·∫•t</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="testStatsTable" class="divide-y divide-green-100"></tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Gender Statistics Section -->
                            <div class="bg-gradient-to-br from-pink-50 to-rose-100 rounded-2xl p-6 shadow-lg border border-pink-200 mb-8">
                                <div class="flex items-center gap-3 mb-6">
                                    <div class="bg-gradient-to-r from-pink-500 to-rose-500 p-3 rounded-xl">
                                        <i class="fas fa-venus-mars text-white text-xl"></i>
                                    </div>
                                    <h5 class="font-bold text-xl text-pink-800">Th·ªëng k√™ gi·ªõi t√≠nh h·ªçc vi√™n theo l·ªõp</h5>
                                    <div class="ml-auto bg-pink-100 px-3 py-1 rounded-full text-xs font-semibold text-pink-700">
                                        Ph√¢n t√≠ch d√¢n s·ªë
                                    </div>
                                </div>
                                
                                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                    <!-- Gender Statistics Table -->
                                    <div class="bg-white/80 backdrop-blur-sm rounded-xl overflow-hidden border border-pink-100">
                                        <div class="overflow-x-auto">
                                            <table class="min-w-full text-sm">
                                                <thead class="bg-gradient-to-r from-pink-500 to-rose-500 text-white">
                                                    <tr>
                                                        <th class="px-4 py-3 text-left font-semibold">Gi·ªõi t√≠nh</th>
                                                        <th class="px-4 py-3 text-center font-semibold">S·ªë l∆∞·ª£ng</th>
                                                        <th class="px-4 py-3 text-center font-semibold">T·ª∑ l·ªá (%)</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="genderStatsTable" class="divide-y divide-pink-100">
                                                    <!-- Data will be loaded dynamically -->
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    
                                    <!-- Gender Distribution Chart -->
                                    <div class="bg-white/80 backdrop-blur-sm rounded-xl p-6 border border-pink-100">
                                        <div class="flex items-center justify-between mb-4">
                                            <h6 class="font-semibold text-pink-800">Ph√¢n b·ªï gi·ªõi t√≠nh</h6>
                                            <div class="bg-pink-100 px-3 py-1 rounded-full text-xs font-semibold text-pink-700">
                                                Bi·ªÉu ƒë·ªì tr√≤n
                                            </div>
                                        </div>
                                        <div class="relative" style="height: 250px;">
                                            <canvas id="genderChart" style="width: 100%; height: 100%;"></canvas>
                                        </div>
                                        
                                        <!-- Gender Legend -->
                                        <div class="mt-4 grid grid-cols-3 gap-2 text-xs">
                                            <div class="flex items-center gap-2 p-2 bg-blue-50 rounded-lg">
                                                <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
                                                <span class="font-medium text-blue-800">Nam</span>
                                                <span id="maleCount" class="ml-auto font-bold">0</span>
                                            </div>
                                            <div class="flex items-center gap-2 p-2 bg-pink-50 rounded-lg">
                                                <div class="w-3 h-3 bg-pink-500 rounded-full"></div>
                                                <span class="font-medium text-pink-800">N·ªØ</span>
                                                <span id="femaleCount" class="ml-auto font-bold">0</span>
                                            </div>
                                            <div class="flex items-center gap-2 p-2 bg-gray-50 rounded-lg">
                                                <div class="w-3 h-3 bg-gray-500 rounded-full"></div>
                                                <span class="font-medium text-gray-800">Kh√°c</span>
                                                <span id="otherCount" class="ml-auto font-bold">0</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Gender Insights -->
                                <div class="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
                                    <div class="bg-blue-100 p-4 rounded-xl border border-blue-200">
                                        <div class="flex items-center gap-3">
                                            <div class="bg-blue-500 p-2 rounded-lg">
                                                <i class="fas fa-male text-white"></i>
                                            </div>
                                            <div>
                                                <div class="text-2xl font-bold text-blue-800" id="totalMalePercent">0%</div>
                                                <div class="text-sm text-blue-600">T·ª∑ l·ªá nam gi·ªõi</div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="bg-pink-100 p-4 rounded-xl border border-pink-200">
                                        <div class="flex items-center gap-3">
                                            <div class="bg-pink-500 p-2 rounded-lg">
                                                <i class="fas fa-female text-white"></i>
                                            </div>
                                            <div>
                                                <div class="text-2xl font-bold text-pink-800" id="totalFemalePercent">0%</div>
                                                <div class="text-sm text-pink-600">T·ª∑ l·ªá n·ªØ gi·ªõi</div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="bg-gray-100 p-4 rounded-xl border border-gray-200">
                                        <div class="flex items-center gap-3">
                                            <div class="bg-gray-500 p-2 rounded-lg">
                                                <i class="fas fa-balance-scale text-white"></i>
                                            </div>
                                            <div>
                                                <div class="text-lg font-bold text-gray-800" id="genderRatio">1:1</div>
                                                <div class="text-sm text-gray-600">T·ª∑ l·ªá Nam:N·ªØ</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Student Performance Ranking -->
                            <div class="bg-gradient-to-br from-purple-50 to-pink-100 rounded-2xl p-6 shadow-lg border border-purple-200">
                                <div class="flex items-center gap-3 mb-6">
                                    <div class="bg-purple-500 p-3 rounded-xl">
                                        <i class="fas fa-trophy text-white text-xl"></i>
                                    </div>
                                    <h5 class="font-bold text-xl text-purple-800">B·∫£ng x·∫øp h·∫°ng h·ªçc sinh</h5>
                                    <div class="ml-auto bg-purple-100 px-3 py-1 rounded-full text-xs font-semibold text-purple-700">
                                        ƒêi·ªÉm t·ªïng h·ª£p
                                    </div>
                                </div>
                                <div class="bg-white/80 backdrop-blur-sm rounded-xl overflow-hidden border border-purple-100">
                                    <div class="overflow-x-auto">
                                        <table class="min-w-full text-sm">
                                            <thead class="bg-gradient-to-r from-purple-500 to-pink-500 text-white">
                                                <tr>
                                                    <th class="px-4 py-3 text-left font-semibold">H·ªçc sinh</th>
                                                    <th class="px-4 py-3 text-center font-semibold">BT</th>
                                                    <th class="px-4 py-3 text-center font-semibold">KT</th>
                                                    <th class="px-4 py-3 text-center font-semibold">ƒêTB BT</th>
                                                    <th class="px-4 py-3 text-center font-semibold">ƒêTB KT</th>
                                                    <th class="px-4 py-3 text-center font-semibold bg-white/20">
                                                        <i class="fas fa-star mr-1"></i>T·ªïng h·ª£p
                                                    </th>
                                                    <th class="px-4 py-3 text-center font-semibold">X·∫øp lo·∫°i</th>
                                                    <th class="px-4 py-3 text-center font-semibold">N·ªôp b√†i</th>
                                                </tr>
                                            </thead>
                                            <tbody id="studentStatsTable" class="divide-y divide-purple-100"></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Account Statistics Report -->
                        <div id="accountReport" class="report-section" style="display: none;">
                            <!-- Account Overview Cards v·ªõi design gi·ªëng Revenue Report -->
                            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                                <!-- Card 1: T·ªïng t√†i kho·∫£n -->
                                <div class="relative overflow-hidden bg-white rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 group">
                                    <!-- Background gradient -->
                                    <div class="absolute inset-0 bg-gradient-to-br from-blue-500 via-purple-600 to-indigo-700"></div>
                                    
                                    <!-- Glass overlay -->
                                    <div class="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
                                    
                                    <!-- Content -->
                                    <div class="relative p-8 text-white">
                                        <div class="flex items-center justify-between mb-4">
                                            <div class="bg-white/20 p-4 rounded-2xl backdrop-blur-sm">
                                                <i class="fas fa-users text-3xl text-white"></i>
                                            </div>
                                            <div class="text-right">
                                                <span class="text-4xl font-black mb-1 block" id="totalAccounts">0</span>
                                                <span class="text-lg font-bold opacity-90">T·ªïng t√†i kho·∫£n</span>
                                            </div>
                                        </div>
                                        <div class="flex items-center gap-2 text-sm">
                                            <div class="w-3 h-3 bg-white/50 rounded-full animate-pulse"></div>
                                            <span class="font-semibold opacity-90">Ho·∫°t ƒë·ªông t√≠ch c·ª±c</span>
                                        </div>
                                    </div>
                                    
                                    <!-- Decorative elements -->
                                    <div class="absolute -bottom-4 -right-4 w-32 h-32 bg-white/10 rounded-full blur-2xl"></div>
                                    <div class="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-white/20 to-transparent rounded-full"></div>
                                </div>

                                <!-- Card 2: H·ªçc vi√™n -->
                                <div class="relative overflow-hidden bg-white rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 group">
                                    <!-- Background gradient -->
                                    <div class="absolute inset-0 bg-gradient-to-br from-green-500 via-emerald-600 to-teal-700"></div>
                                    
                                    <!-- Glass overlay -->
                                    <div class="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
                                    
                                    <!-- Content -->
                                    <div class="relative p-8 text-white">
                                        <div class="flex items-center justify-between mb-4">
                                            <div class="bg-white/20 p-4 rounded-2xl backdrop-blur-sm">
                                                <i class="fas fa-user-graduate text-3xl text-white"></i>
                                            </div>
                                            <div class="text-right">
                                                <span class="text-4xl font-black mb-1 block" id="totalStudents">0</span>
                                                <span class="text-lg font-bold opacity-90">H·ªçc vi√™n</span>
                                            </div>
                                        </div>
                                        <div class="flex items-center gap-2 text-sm">
                                            <div class="w-3 h-3 bg-green-300 rounded-full animate-pulse"></div>
                                            <span class="font-semibold opacity-90">ƒêang h·ªçc t·∫≠p</span>
                                        </div>
                                    </div>
                                    
                                    <!-- Decorative elements -->
                                    <div class="absolute -bottom-4 -right-4 w-32 h-32 bg-white/10 rounded-full blur-2xl"></div>
                                    <div class="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-white/20 to-transparent rounded-full"></div>
                                </div>

                                <!-- Card 3: Gi√°o vi√™n -->
                                <div class="relative overflow-hidden bg-white rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 group">
                                    <!-- Background gradient -->
                                    <div class="absolute inset-0 bg-gradient-to-br from-orange-500 via-red-600 to-pink-700"></div>
                                    
                                    <!-- Glass overlay -->
                                    <div class="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
                                    
                                    <!-- Content -->
                                    <div class="relative p-8 text-white">
                                        <div class="flex items-center justify-between mb-4">
                                            <div class="bg-white/20 p-4 rounded-2xl backdrop-blur-sm">
                                                <i class="fas fa-chalkboard-teacher text-3xl text-white"></i>
                                            </div>
                                            <div class="text-right">
                                                <span class="text-4xl font-black mb-1 block" id="totalTeachers">0</span>
                                                <span class="text-lg font-bold opacity-90">Gi√°o vi√™n</span>
                                            </div>
                                        </div>
                                        <div class="flex items-center gap-2 text-sm">
                                            <div class="w-3 h-3 bg-yellow-300 rounded-full animate-pulse"></div>
                                            <span class="font-semibold opacity-90">ƒêang gi·∫£ng d·∫°y</span>
                                        </div>
                                    </div>
                                    
                                    <!-- Decorative elements -->
                                    <div class="absolute -bottom-4 -right-4 w-32 h-32 bg-white/10 rounded-full blur-2xl"></div>
                                    <div class="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-white/20 to-transparent rounded-full"></div>
                                </div>

                                <!-- Card 4: Qu·∫£n tr·ªã vi√™n -->
                                <div class="relative overflow-hidden bg-white rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 group">
                                    <!-- Background gradient -->
                                    <div class="absolute inset-0 bg-gradient-to-br from-purple-500 via-violet-600 to-purple-700"></div>
                                    
                                    <!-- Glass overlay -->
                                    <div class="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
                                    
                                    <!-- Content -->
                                    <div class="relative p-8 text-white">
                                        <div class="flex items-center justify-between mb-4">
                                            <div class="bg-white/20 p-4 rounded-2xl backdrop-blur-sm">
                                                <i class="fas fa-user-shield text-3xl text-white"></i>
                                            </div>
                                            <div class="text-right">
                                                <span class="text-4xl font-black mb-1 block" id="totalAdmins">0</span>
                                                <span class="text-lg font-bold opacity-90">Qu·∫£n tr·ªã vi√™n</span>
                                            </div>
                                        </div>
                                        <div class="flex items-center gap-2 text-sm">
                                            <div class="w-3 h-3 bg-red-300 rounded-full animate-pulse"></div>
                                            <span class="font-semibold opacity-90">Qu·∫£n l√Ω h·ªá th·ªëng</span>
                                        </div>
                                    </div>
                                    
                                    <!-- Decorative elements -->
                                    <div class="absolute -bottom-4 -right-4 w-32 h-32 bg-white/10 rounded-full blur-2xl"></div>
                                    <div class="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-white/20 to-transparent rounded-full"></div>
                                </div>
                            </div>

                            <!-- Th·ªëng k√™ ƒëƒÉng k√Ω theo th√°ng - Main Chart gi·ªëng Revenue -->
                            <div class="bg-white/90 backdrop-blur-xl rounded-2xl shadow-xl border border-white/30 overflow-hidden mb-8">
                                <div class="bg-gradient-to-r from-purple-50 to-pink-50 p-8 border-b border-gray-200">
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center gap-4">
                                            <div class="bg-gradient-to-r from-purple-600 to-pink-600 p-4 rounded-2xl">
                                                <i class="fas fa-chart-line text-white text-2xl"></i>
                                            </div>
                                            <div>
                                                <h4 class="text-2xl font-bold text-gray-800">Th·ªëng k√™ ƒëƒÉng k√Ω 30 ng√†y g·∫ßn nh·∫•t</h4>
                                                <p class="text-gray-600 text-lg mt-1">Bi·ªÉu ƒë·ªì c·ªôt k·∫øt h·ª£p ƒë∆∞·ªùng - Ph√¢n t√≠ch xu h∆∞·ªõng ƒëƒÉng k√Ω theo ng√†y v√† t·ªïng t√≠ch l≈©y</p>
                                            </div>
                                        </div>
                                        <div class="flex items-center gap-3">
                                            <div class="bg-gradient-to-r from-purple-100 to-pink-100 px-6 py-3 rounded-xl">
                                                <span class="text-purple-700 font-semibold">ÔøΩ 30 c·ªôt + ƒë∆∞·ªùng t√≠ch l≈©y</span>
                                            </div>
                                            <button onclick="downloadChart('registrationChart')" class="bg-gray-100 hover:bg-gray-200 p-3 rounded-xl transition-colors group relative" title="T·∫£i xu·ªëng bi·ªÉu ƒë·ªì ƒëƒÉng k√Ω">
                                                <i class="fas fa-download text-gray-600 group-hover:text-gray-800"></i>
                                                <!-- Tooltip -->
                                                <div class="absolute bottom-full right-0 mb-2 hidden group-hover:block">
                                                    <div class="bg-gray-800 text-white text-xs rounded py-1 px-2 whitespace-nowrap">
                                                        T·∫£i xu·ªëng bi·ªÉu ƒë·ªì
                                                        <div class="absolute top-full right-2 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-800"></div>
                                                    </div>
                                                </div>
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <!-- Large Chart Container -->
                                    <div class="relative bg-gradient-to-br from-purple-50/50 to-pink-50/50 rounded-2xl p-6 border border-purple-100 mt-6">
                                        <canvas id="registrationChart" style="width: 100%; height: 500px; max-height: 500px;"></canvas>
                                        
                                        <!-- Chart overlay effects -->
                                        <div class="absolute inset-0 bg-gradient-to-t from-purple-50/30 to-transparent pointer-events-none rounded-2xl"></div>
                                        
                                        <!-- Chart stats overlay -->
                                        <div class="absolute top-4 left-4 bg-white/90 backdrop-blur-sm rounded-xl p-4 border border-purple-100">
                                            <div class="text-sm text-gray-600 mb-1">T·ªïng ng∆∞·ªùi d√πng m·ªõi (30 ng√†y)</div>
                                            <div class="text-2xl font-bold text-purple-600" id="chartMaxUsers">0</div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Charts Grid v·ªõi Enhanced Design -->
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
                                <!-- User Level Chart -->
                                <div class="bg-white/90 backdrop-blur-xl rounded-2xl shadow-xl border border-white/30 overflow-hidden">
                                    <div class="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 border-b border-gray-200">
                                        <div class="flex items-center justify-between">
                                            <h5 class="font-bold text-xl text-gray-800 flex items-center gap-3">
                                                <div class="bg-gradient-to-r from-blue-600 to-indigo-600 p-3 rounded-xl">
                                                    <i class="fas fa-chart-pie text-white text-lg"></i>
                                                </div>
                                                <span>Ph√¢n b·ªë theo tr√¨nh ƒë·ªô h·ªçc t·∫≠p</span>
                                            </h5>
                                            <button onclick="downloadChart('userLevelChart')" class="bg-gray-100 hover:bg-gray-200 p-2 rounded-lg transition-colors">
                                                <i class="fas fa-download text-gray-600"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="p-6 relative">
                                        <canvas id="userLevelChart" style="width: 100%; height: 300px;"></canvas>
                                        <div class="absolute inset-0 bg-gradient-to-t from-blue-50/30 to-transparent pointer-events-none rounded-b-2xl"></div>
                                    </div>
                                </div>

                                <!-- Korean Level Chart -->
                                <div class="bg-white/90 backdrop-blur-xl rounded-2xl shadow-xl border border-white/30 overflow-hidden">
                                    <div class="bg-gradient-to-r from-emerald-50 to-green-50 p-6 border-b border-gray-200">
                                        <div class="flex items-center justify-between">
                                            <h5 class="font-bold text-xl text-gray-800 flex items-center gap-3">
                                                <div class="bg-gradient-to-r from-emerald-600 to-green-600 p-3 rounded-xl">
                                                    <i class="fas fa-language text-white text-lg"></i>
                                                </div>
                                                <span>Ph√¢n b·ªë theo tr√¨nh ƒë·ªô TOPIK</span>
                                            </h5>
                                            <button onclick="downloadChart('koreanLevelChart')" class="bg-gray-100 hover:bg-gray-200 p-2 rounded-lg transition-colors">
                                                <i class="fas fa-download text-gray-600"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="p-6 relative">
                                        <canvas id="koreanLevelChart" style="width: 100%; height: 300px;"></canvas>
                                        <div class="absolute inset-0 bg-gradient-to-t from-emerald-50/30 to-transparent pointer-events-none rounded-b-2xl"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Gender Statistics Section -->
                            <div class="bg-white/90 backdrop-blur-xl rounded-2xl shadow-xl border border-white/30 overflow-hidden">
                                <div class="bg-gradient-to-r from-pink-50 to-rose-50 p-6 border-b border-gray-200">
                                    <h5 class="font-bold text-xl text-gray-800 flex items-center gap-3">
                                        <div class="bg-gradient-to-r from-pink-600 to-rose-600 p-3 rounded-xl">
                                            <i class="fas fa-users text-white text-lg"></i>
                                        </div>
                                        <span>Th·ªëng k√™ theo gi·ªõi t√≠nh</span>
                                    </h5>
                                </div>
                                <div class="p-6">
                                    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                                        <!-- Gender Stats Cards -->
                                        <div class="lg:col-span-2">
                                            <div class="grid grid-cols-3 gap-4 mb-6">
                                                <div class="bg-blue-50 rounded-xl p-4 text-center">
                                                    <div class="text-2xl font-bold text-blue-600" id="maleCountMini">0</div>
                                                    <div class="text-sm text-gray-600">Nam</div>
                                                    <div class="text-xs text-blue-500 font-semibold" id="totalMalePercent">0%</div>
                                                </div>
                                                <div class="bg-pink-50 rounded-xl p-4 text-center">
                                                    <div class="text-2xl font-bold text-pink-600" id="femaleCountMini">0</div>
                                                    <div class="text-sm text-gray-600">N·ªØ</div>
                                                    <div class="text-xs text-pink-500 font-semibold" id="totalFemalePercent">0%</div>
                                                </div>
                                                <div class="bg-gray-50 rounded-xl p-4 text-center">
                                                    <div class="text-2xl font-bold text-gray-600" id="otherCountMini">0</div>
                                                    <div class="text-sm text-gray-600">Kh√°c</div>
                                                    <div class="text-xs text-gray-500 font-semibold" id="genderRatio">0:0</div>
                                                </div>
                                            </div>
                                        </div>
                                        <!-- Gender Chart -->
                                        <div class="relative">
                                            <canvas id="genderChartMini" style="width: 100%; height: 200px;"></canvas>
                                            <button onclick="downloadChart('genderChartMini')" class="absolute top-2 right-2 bg-white hover:bg-gray-50 p-2 rounded-lg shadow-sm transition-colors">
                                                <i class="fas fa-download text-gray-600 text-sm"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <script>
        // Global variables
        let revenueChart = null;
        let paymentChart = null;
        let courseChart = null;
        let userLevelChart = null;
        let koreanLevelChart = null;
        let registrationChart = null;

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Display current date
            const currentDate = new Date().toLocaleDateString('vi-VN', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            document.getElementById('currentDate').textContent = currentDate;

            // Load classes for filter
            loadClasses();

            // Handle report type change
            document.getElementById('reportType').addEventListener('change', function() {
                const classFilterDiv = document.getElementById('classFilterDiv');
                const dateRangeFilter = document.getElementById('dateRangeFilter');
                
                if (this.value === 'academic') {
                    classFilterDiv.style.display = 'block';
                    dateRangeFilter.style.display = 'none';
                } else if (this.value === 'revenue') {
                    classFilterDiv.style.display = 'none';
                    dateRangeFilter.style.display = 'block';
                } else {
                    classFilterDiv.style.display = 'none';
                    dateRangeFilter.style.display = 'none';
                }
                
                // Hide custom date filters initially
                document.getElementById('customDateFilter').style.display = 'none';
                document.getElementById('customDateToFilter').style.display = 'none';
            });

            // Handle date range change
            document.getElementById('dateRange').addEventListener('change', function() {
                const customDateFilter = document.getElementById('customDateFilter');
                const customDateToFilter = document.getElementById('customDateToFilter');
                
                if (this.value === 'custom') {
                    customDateFilter.style.display = 'block';
                    customDateToFilter.style.display = 'block';
                } else {
                    customDateFilter.style.display = 'none';
                    customDateToFilter.style.display = 'none';
                }
            });

            // Set default date range
            const dateRange = document.getElementById('dateRange');
            dateRange.value = '1year';
            
            // Set default dates for custom range
            const endDate = new Date();
            const startDate = new Date();
            startDate.setFullYear(endDate.getFullYear() - 1);
            
            document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
            document.getElementById('endDate').value = endDate.toISOString().split('T')[0];

            // Load default report
            loadReport();

            // Trigger initial filter display
            document.getElementById('reportType').dispatchEvent(new Event('change'));
        });

        // Load classes for filter
        async function loadClasses() {
            try {
                const response = await fetch('/reports/api/classes');
                const result = await response.json();
                
                if (result.success) {
                    const filterClass = document.getElementById('filterClass');
                    filterClass.innerHTML = '<option value="">T·∫•t c·∫£ l·ªõp h·ªçc</option>';
                    
                    result.data.forEach(cls => {
                        const option = document.createElement('option');
                        option.value = cls._id;
                        option.textContent = cls.name;
                        filterClass.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading classes:', error);
            }
        }

        // Load report based on selected type
        async function loadReport() {
            const reportType = document.getElementById('reportType').value;
            const loading = document.getElementById('loading');
            const reportContent = document.getElementById('reportContent');
            
            // Show loading
            loading.style.display = 'block';
            reportContent.style.display = 'none';
            
            // Hide all reports
            hideAllReports();
            
            try {
                switch (reportType) {
                    case 'revenue':
                        await loadRevenueReport();
                        break;
                    case 'academic':
                        await loadAcademicReport();
                        break;
                    case 'accounts':
                        await loadAccountStats();
                        break;
                }
                
                // Show content and hide loading
                loading.style.display = 'none';
                reportContent.style.display = 'block';
                
            } catch (error) {
                console.error('Error loading report:', error);
                loading.style.display = 'none';
                showError('C√≥ l·ªói x·∫£y ra khi t·∫£i b√°o c√°o');
            }
        }

        // Hide all reports
        function hideAllReports() {
            const reports = ['revenueReport', 'academicReport', 'accountReport'];
            reports.forEach(reportId => {
                const element = document.getElementById(reportId);
                if (element) element.style.display = 'none';
            });
        }

        // Load revenue report v·ªõi date filter
        async function loadRevenueReport() {
            const dateRange = document.getElementById('dateRange').value;
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            
            // Build query parameters
            const params = new URLSearchParams();
            params.append('dateRange', dateRange);
            
            if (dateRange === 'custom' && startDate && endDate) {
                params.append('startDate', startDate);
                params.append('endDate', endDate);
            }
            
            const response = await fetch(`/reports/api/revenue?${params}`);
            const result = await response.json();
            
            if (result.success) {
                const data = result.data;
                
                // Display overview
                document.getElementById('totalRevenue').textContent = formatCurrency(data.overview.total);
                document.getElementById('totalOrders').textContent = formatNumber(data.overview.count);
                document.getElementById('averageOrder').textContent = formatCurrency(data.overview.average);
                
                // Update chart max value
                const maxValue = Math.max(...data.revenueByMonth.map(item => item.totalRevenue || 0));
                document.getElementById('chartMaxValue').textContent = formatCurrency(maxValue);
                
                // Show revenue report
                document.getElementById('revenueReport').style.display = 'block';
                
                // Create enhanced charts - s·ª≠ d·ª•ng d·ªØ li·ªáu dailyRevenue cho bi·ªÉu ƒë·ªì 30 ng√†y
                createEnhancedRevenueChart(data.dailyRevenue || data.revenueByMonth);
                createEnhancedPaymentChart(data.revenueByPaymentMethod);
                createCourseChart(data.revenueByCourse);
                
                // Load course revenue data with enhanced filter
                loadCourseRevenueDataWithFilter();
            }
        }

        // Load academic report
        async function loadAcademicReport() {
            const classId = document.getElementById('filterClass').value;
            const params = new URLSearchParams();
            if (classId) params.append('classId', classId);
            
            const response = await fetch(`/reports/api/academic?${params}`);
            const result = await response.json();
            
            if (result.success) {
                displayAcademicReport(result.data);
                document.getElementById('academicReport').style.display = 'block';
            }
        }

        // Display academic report
        function displayAcademicReport(data) {
            // Display class overview
            if (data.classOverview) {
                const overview = data.classOverview;
                document.getElementById('classOverview').innerHTML = `
                    <div class="bg-gradient-to-br from-indigo-50 via-blue-50 to-cyan-50 rounded-2xl p-8 shadow-xl border border-indigo-200">
                        <div class="flex items-center gap-4 mb-6">
                            <div class="bg-indigo-500 p-4 rounded-2xl shadow-lg">
                                <i class="fas fa-school text-white text-2xl"></i>
                            </div>
                            <div>
                                <h3 class="text-2xl font-bold text-indigo-800">Th√¥ng tin l·ªõp h·ªçc</h3>
                                <p class="text-indigo-600 text-sm">T·ªïng quan v·ªÅ l·ªõp h·ªçc ƒë∆∞·ª£c ch·ªçn</p>
                            </div>
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                            <div class="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-blue-200 hover:shadow-xl transition-all duration-300">
                                <div class="flex items-center gap-3">
                                    <div class="bg-blue-100 p-3 rounded-xl">
                                        <i class="fas fa-graduation-cap text-blue-600 text-xl"></i>
                                    </div>
                                    <div>
                                        <div class="text-2xl font-bold text-gray-800">${overview.name || 'T·∫•t c·∫£ l·ªõp'}</div>
                                        <div class="text-blue-600 font-medium">T√™n l·ªõp</div>
                                    </div>
                                </div>
                            </div>
                            <div class="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-green-200 hover:shadow-xl transition-all duration-300">
                                <div class="flex items-center gap-3">
                                    <div class="bg-green-100 p-3 rounded-xl">
                                        <i class="fas fa-users text-green-600 text-xl"></i>
                                    </div>
                                    <div>
                                        <div class="text-2xl font-bold text-gray-800">${overview.totalStudents || 0}/${overview.maxStudents || 0}</div>
                                        <div class="text-green-600 font-medium">H·ªçc sinh</div>
                                    </div>
                                </div>
                            </div>
                            <div class="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-purple-200 hover:shadow-xl transition-all duration-300">
                                <div class="flex items-center gap-3">
                                    <div class="bg-purple-100 p-3 rounded-xl">
                                        <i class="fas fa-chalkboard-teacher text-purple-600 text-xl"></i>
                                    </div>
                                    <div>
                                        <div class="text-2xl font-bold text-gray-800">${overview.teacherName || 'N/A'}</div>
                                        <div class="text-purple-600 font-medium">Gi√°o vi√™n</div>
                                    </div>
                                </div>
                            </div>
                            <div class="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-orange-200 hover:shadow-xl transition-all duration-300">
                                <div class="flex items-center gap-3">
                                    <div class="bg-orange-100 p-3 rounded-xl">
                                        <i class="fas fa-book text-orange-600 text-xl"></i>
                                    </div>
                                    <div>
                                        <div class="text-2xl font-bold text-gray-800">${overview.courseName || 'N/A'}</div>
                                        <div class="text-orange-600 font-medium">Kh√≥a h·ªçc</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }

            // Display assignment stats
            if (data.assignmentStats) {
                displayAssignmentStats(data.assignmentStats);
            }

            // Display student stats
            if (data.studentStats) {
                displayStudentStats(data.studentStats);
            }

            // Display test stats
            if (data.testStats) {
                displayTestStats(data.testStats);
            }

            // Display gender statistics - Class-specific gender breakdown
            if (data.genderStats) {
                displayClassGenderStats(data.genderStats);
            }
        }

        // Display assignment statistics
        function displayAssignmentStats(assignments) {
            const tableBody = document.getElementById('assignmentStatsTable');
            if (!tableBody) return;

            if (assignments.length === 0) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="px-4 py-8 text-center text-gray-500">
                            <i class="fas fa-inbox fa-3x mb-3 opacity-50"></i>
                            <div>Ch∆∞a c√≥ b√†i t·∫≠p n√†o</div>
                        </td>
                    </tr>
                `;
                return;
            }

            tableBody.innerHTML = assignments.map((assignment, index) => {
                const ungradedCount = assignment.totalSubmissions - assignment.gradedSubmissions;
                return `
                <tr class="hover:bg-blue-50/50 transition-all duration-200">
                    <td class="px-4 py-3">
                        <div class="flex items-center gap-3">
                            <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                                <span class="text-blue-600 font-semibold text-sm">${index + 1}</span>
                            </div>
                            <div>
                                <div class="font-medium text-gray-900 text-sm">${assignment.title}</div>
                                <div class="text-xs text-gray-500">${assignment.className || ''}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            ${assignment.maxScore}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            ${assignment.totalSubmissions}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                            ${assignment.gradedSubmissions}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${ungradedCount > 0 ? 'bg-orange-100 text-orange-800' : 'bg-gray-100 text-gray-600'}">
                            ${ungradedCount}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-bold ${getScoreBadgeColor(assignment.averageScore)}">
                            ${(assignment.averageScore || 0).toFixed(1)}
                        </span>
                    </td>
                </tr>
                `;
            }).join('');
        }

        // Display student statistics
        function displayStudentStats(students) {
            const tableBody = document.getElementById('studentStatsTable');
            if (!tableBody) return;

            if (students.length === 0) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="8" class="px-4 py-8 text-center text-gray-500">
                            <i class="fas fa-user-graduate fa-3x mb-3 opacity-50"></i>
                            <div>Ch∆∞a c√≥ d·ªØ li·ªáu h·ªçc sinh</div>
                        </td>
                    </tr>
                `;
                return;
            }

            tableBody.innerHTML = students.map((student, index) => {
                const rankIcon = index < 3 ? ['ü•á', 'ü•à', 'ü•â'][index] : `#${index + 1}`;
                const rankClass = index < 3 ? 'bg-gradient-to-r from-yellow-400 to-orange-500' : 'bg-gradient-to-r from-purple-500 to-pink-500';
                
                return `
                <tr class="hover:bg-purple-50/50 transition-all duration-200 ${index < 3 ? 'bg-yellow-50/30' : ''}">
                    <td class="px-4 py-3">
                        <div class="flex items-center gap-3">
                            <div class="w-10 h-10 ${rankClass} rounded-xl flex items-center justify-center text-white font-bold text-sm shadow-lg">
                                ${typeof rankIcon === 'string' && rankIcon.includes('#') ? rankIcon.replace('#', '') : rankIcon}
                            </div>
                            <div>
                                <div class="font-semibold text-gray-900 text-sm">${student.studentName}</div>
                                <div class="text-xs text-gray-500">${student.email}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            ${student.totalAssignments || 0}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            ${student.totalTests || 0}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-bold ${getScoreBadgeColor(student.assignmentAverage)}">
                            ${(student.assignmentAverage || 0).toFixed(1)}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-bold ${getScoreBadgeColor(student.testAverage)}">
                            ${(student.testAverage || 0).toFixed(1)}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <div class="flex flex-col items-center gap-1">
                            <span class="inline-flex items-center px-3 py-1 rounded-lg text-sm font-bold bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg">
                                <i class="fas fa-star mr-1"></i>${(student.overallAverage || 0).toFixed(1)}
                            </span>
                            <div class="text-xs text-gray-500">
                                ${student.totalAssignments > 0 && student.totalTests > 0 ? 'BT+KT' : 
                                  student.totalAssignments > 0 ? 'Ch·ªâ BT' : 
                                  student.totalTests > 0 ? 'Ch·ªâ KT' : 'Ch∆∞a c√≥'}
                            </div>
                        </div>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-semibold ${getPerformanceBadgeNew(student.performance)}">
                            ${getPerformanceIcon(student.performance)} ${student.performance}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <div class="flex flex-col items-center gap-1">
                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                <i class="fas fa-check mr-1"></i>${student.onTimeSubmissions || 0}
                            </span>
                            ${(student.lateSubmissions || 0) > 0 ? `
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    <i class="fas fa-clock mr-1"></i>${student.lateSubmissions}
                                </span>
                            ` : ''}
                        </div>
                    </td>
                </tr>
            `}).join('');
        }

        // Display test statistics
        function displayTestStats(tests) {
            const tableBody = document.getElementById('testStatsTable');
            if (!tableBody) return;

            if (tests.length === 0) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="5" class="px-4 py-8 text-center text-gray-500">
                            <i class="fas fa-clipboard-check fa-3x mb-3 opacity-50"></i>
                            <div>Ch∆∞a c√≥ d·ªØ li·ªáu ki·ªÉm tra</div>
                        </td>
                    </tr>
                `;
                return;
            }

            tableBody.innerHTML = tests.map((test, index) => `
                <tr class="hover:bg-green-50/50 transition-all duration-200">
                    <td class="px-4 py-3">
                        <div class="flex items-center gap-3">
                            <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                                <span class="text-green-600 font-semibold text-sm">${index + 1}</span>
                            </div>
                            <div>
                                <div class="font-medium text-gray-900 text-sm">${test.studentName}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            ${test.totalTests}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-bold ${getScoreBadgeColor(test.averageTestScore)}">
                            ${(test.averageTestScore || 0).toFixed(1)}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-emerald-100 text-emerald-800">
                            <i class="fas fa-arrow-up mr-1"></i>${(test.maxTestScore || 0).toFixed(1)}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                            <i class="fas fa-arrow-down mr-1"></i>${(test.minTestScore || 0).toFixed(1)}
                        </span>
                    </td>
                </tr>
            `).join('');
        }

        // Load account statistics
        async function loadAccountStats() {
            const response = await fetch('/reports/api/accounts');
            const result = await response.json();
            
            if (result.success) {
                const data = result.data;
                
                // Display account stats
                document.getElementById('totalAccounts').textContent = data.total;
                document.getElementById('totalStudents').textContent = data.students;
                document.getElementById('totalTeachers').textContent = data.teachers;
                document.getElementById('totalAdmins').textContent = data.admins;
                
                // Show account report
                document.getElementById('accountReport').style.display = 'block';
                
                // Create charts
                createUserLevelChart(data.usersByLevel);
                createKoreanLevelChart(data.usersByKoreanLevel);
                createRegistrationChart(data); // Pass full data object for daily registration data
                
                // Display gender statistics if available
                if (data.genderStats) {
                    displayAccountGenderStats(data.genderStats);
                }
            }
        }

        // Enhanced Revenue Chart v·ªõi thi·∫øt k·∫ø chuy√™n nghi·ªáp - Bi·ªÉu ƒë·ªì c·ªôt + ƒë∆∞·ªùng cho 30 ng√†y
        function createEnhancedRevenueChart(data) {
            const ctx = document.getElementById('revenueChart').getContext('2d');
            
            if (revenueChart) {
                revenueChart.destroy();
            }
            
            let dateLabels = [];
            let dailyRevenue = [];
            let dailyOrders = [];
            let cumulativeRevenue = [];
            
            // Ki·ªÉm tra xem data c√≥ ph·∫£i l√† d·ªØ li·ªáu h√†ng ng√†y kh√¥ng (c√≥ _id.day)
            const isDailyData = data.length > 0 && data[0]._id && typeof data[0]._id.day !== 'undefined';
            
            if (isDailyData) {
                // X·ª≠ l√Ω d·ªØ li·ªáu daily t·ª´ database
                const today = new Date();
                const dataMap = {};
                
                // T·∫°o map t·ª´ d·ªØ li·ªáu database
                data.forEach(item => {
                    const dateKey = `${item._id.year}-${String(item._id.month).padStart(2, '0')}-${String(item._id.day).padStart(2, '0')}`;
                    dataMap[dateKey] = item;
                });
                
                // T·∫°o m·∫£ng 30 ng√†y v·ªõi d·ªØ li·ªáu th·ª±c v√† gi·∫£ l·∫≠p
                let cumulativeSum = 0;
                for (let i = 29; i >= 0; i--) {
                    const date = new Date(today.getTime() - i * 24 * 60 * 60 * 1000);
                    const dateStr = date.toLocaleDateString('vi-VN', { day: '2-digit', month: '2-digit' });
                    const dateKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
                    
                    dateLabels.push(dateStr);
                    
                    // L·∫•y d·ªØ li·ªáu th·ª±c ho·∫∑c gi·∫£ l·∫≠p
                    const dayData = dataMap[dateKey];
                    const revenue = dayData ? dayData.totalRevenue : Math.random() * 3000000 + 500000;
                    const orders = dayData ? dayData.totalOrders : Math.floor(Math.random() * 15) + 3;
                    
                    dailyRevenue.push(revenue);
                    dailyOrders.push(orders);
                    cumulativeSum += revenue;
                    cumulativeRevenue.push(cumulativeSum);
                }
            } else {
                // X·ª≠ l√Ω d·ªØ li·ªáu monthly (fallback)
                dateLabels = data.map(item => {
                    const month = String(item._id.month).padStart(2, '0');
                    return `${month}/${item._id.year}`;
                });
                dailyRevenue = data.map(item => item.totalRevenue || 0);
                dailyOrders = data.map(item => item.totalOrders || 0);
                
                // T√≠nh cumulative cho monthly data
                let sum = 0;
                cumulativeRevenue = dailyRevenue.map(value => {
                    sum += value;
                    return sum;
                });
            }
            
            revenueChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: dateLabels,
                    datasets: [{
                        label: isDailyData ? 'Doanh thu h√†ng ng√†y (VNƒê)' : 'Doanh thu h√†ng th√°ng (VNƒê)',
                        data: dailyRevenue,
                        backgroundColor: 'rgba(59, 130, 246, 0.7)',
                        borderColor: 'rgb(59, 130, 246)',
                        borderWidth: 2,
                        borderRadius: 8,
                        borderSkipped: false,
                        yAxisID: 'y'
                    }, {
                        label: isDailyData ? 'S·ªë ƒë∆°n h√†ng h√†ng ng√†y' : 'S·ªë ƒë∆°n h√†ng h√†ng th√°ng',
                        data: dailyOrders,
                        backgroundColor: 'rgba(16, 185, 129, 0.7)',
                        borderColor: 'rgb(16, 185, 129)',
                        borderWidth: 2,
                        borderRadius: 8,
                        borderSkipped: false,
                        yAxisID: 'y1'
                    }, {
                        label: 'Doanh thu t√≠ch l≈©y',
                        data: cumulativeRevenue,
                        type: 'line',
                        borderColor: 'rgb(239, 68, 68)',
                        backgroundColor: 'rgba(239, 68, 68, 0.1)',
                        borderWidth: 4,
                        fill: false,
                        tension: 0.4,
                        pointBackgroundColor: 'rgb(239, 68, 68)',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 3,
                        pointRadius: 6,
                        pointHoverRadius: 10,
                        yAxisID: 'y2'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: isDailyData ? 'Bi·ªÉu ƒë·ªì Doanh thu Chi ti·∫øt - 30 Ng√†y G·∫ßn Nh·∫•t' : 'Bi·ªÉu ƒë·ªì Doanh thu theo Th√°ng',
                            font: {
                                size: 20,
                                weight: 'bold'
                            },
                            color: '#1f2937',
                            padding: 25
                        },
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                usePointStyle: true,
                                font: {
                                    size: 14,
                                    weight: '600'
                                },
                                color: '#374151',
                                padding: 20,
                                generateLabels: function(chart) {
                                    const original = Chart.defaults.plugins.legend.labels.generateLabels;
                                    const labels = original.call(this, chart);
                                    labels.forEach(label => {
                                        if (label.text.includes('t√≠ch l≈©y')) {
                                            label.pointStyle = 'line';
                                        }
                                    });
                                    return labels;
                                }
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: 'rgba(59, 130, 246, 0.5)',
                            borderWidth: 1,
                            cornerRadius: 12,
                            displayColors: true,
                            callbacks: {
                                title: function(context) {
                                    return isDailyData ? `Ng√†y ${context[0].label}` : `Th√°ng ${context[0].label}`;
                                },
                                label: function(context) {
                                    if (context.datasetIndex === 0) {
                                        return `üí∞ Doanh thu: ${formatCurrency(context.parsed.y)}`;
                                    } else if (context.datasetIndex === 1) {
                                        return `üì¶ ƒê∆°n h√†ng: ${formatNumber(context.parsed.y)}`;
                                    } else {
                                        return `üìà T√≠ch l≈©y: ${formatCurrency(context.parsed.y)}`;
                                    }
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: isDailyData ? 'Ng√†y trong th√°ng' : 'Th·ªùi gian',
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                },
                                color: '#6b7280'
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.05)',
                                lineWidth: 1
                            },
                            ticks: {
                                color: '#6b7280',
                                font: {
                                    size: 12
                                },
                                maxRotation: 45,
                                minRotation: 0
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: isDailyData ? 'Doanh thu h√†ng ng√†y (VNƒê)' : 'Doanh thu (VNƒê)',
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                },
                                color: '#3b82f6'
                            },
                            grid: {
                                color: 'rgba(59, 130, 246, 0.1)',
                                lineWidth: 1
                            },
                            ticks: {
                                color: '#3b82f6',
                                font: {
                                    size: 11
                                },
                                callback: function(value) {
                                    return formatCurrency(value);
                                }
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'S·ªë ƒë∆°n h√†ng',
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                },
                                color: '#10b981'
                            },
                            grid: {
                                drawOnChartArea: false,
                            },
                            ticks: {
                                color: '#10b981',
                                font: {
                                    size: 11
                                },
                                callback: function(value) {
                                    return formatNumber(value);
                                }
                            }
                        },
                        y2: {
                            type: 'linear',
                            display: false,
                            position: 'right',
                            ticks: {
                                callback: function(value) {
                                    return formatCurrency(value);
                                }
                            }
                        }
                    },
                    animation: {
                        duration: 2000,
                        easing: 'easeInOutQuart'
                    }
                }
            });
        }

        // Enhanced Payment Chart
        function createEnhancedPaymentChart(data) {
            const ctx = document.getElementById('paymentChart').getContext('2d');
            
            if (paymentChart) {
                paymentChart.destroy();
            }
            
            const colors = [
                'rgba(59, 130, 246, 0.8)',   // Blue
                'rgba(16, 185, 129, 0.8)',   // Green  
                'rgba(245, 158, 11, 0.8)',   // Amber
                'rgba(239, 68, 68, 0.8)',    // Red
                'rgba(139, 92, 246, 0.8)',   // Purple
                'rgba(236, 72, 153, 0.8)'    // Pink
            ];
            
            paymentChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: data.map(item => item._id || 'Kh√¥ng x√°c ƒë·ªãnh'),
                    datasets: [{
                        data: data.map(item => item.totalRevenue || 0),
                        backgroundColor: colors,
                        borderColor: colors.map(color => color.replace('0.8', '1')),
                        borderWidth: 3,
                        hoverBorderWidth: 5,
                        hoverOffset: 10
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Ph√¢n b·ªï Doanh thu theo Ph∆∞∆°ng th·ª©c Thanh to√°n',
                            font: {
                                size: 16,
                                weight: 'bold'
                            },
                            color: '#1f2937',
                            padding: 20
                        },
                        legend: {
                            display: true,
                            position: 'bottom',
                            labels: {
                                usePointStyle: true,
                                pointStyle: 'circle',
                                font: {
                                    size: 13,
                                    weight: '600'
                                },
                                color: '#374151',
                                padding: 15,
                                generateLabels: function(chart) {
                                    const data = chart.data;
                                    return data.labels.map((label, index) => {
                                        const value = data.datasets[0].data[index];
                                        const percentage = ((value / data.datasets[0].data.reduce((a, b) => a + b, 0)) * 100).toFixed(1);
                                        return {
                                            text: `${label} (${percentage}%)`,
                                            fillStyle: data.datasets[0].backgroundColor[index],
                                            strokeStyle: data.datasets[0].borderColor[index],
                                            pointStyle: 'circle'
                                        };
                                    });
                                }
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: 'rgba(59, 130, 246, 0.5)',
                            borderWidth: 1,
                            cornerRadius: 12,
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((context.parsed / total) * 100).toFixed(1);
                                    return `üí≥ ${context.label}: ${formatCurrency(context.parsed)} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    cutout: '50%',
                    radius: '80%'
                }
            });
        }

        // New Course Performance Chart
        function createCourseChart(data) {
            const ctx = document.getElementById('courseChart').getContext('2d');
            
            if (courseChart) {
                courseChart.destroy();
            }
            
            // Take top 6 courses
            const topCourses = data.slice(0, 6);
            
            courseChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: topCourses.map(item => item.courseName || 'Kh√≥a h·ªçc'),
                    datasets: [{
                        label: 'Doanh thu',
                        data: topCourses.map(item => item.totalRevenue || 0),
                        backgroundColor: [
                            'rgba(239, 68, 68, 0.8)',
                            'rgba(245, 158, 11, 0.8)', 
                            'rgba(59, 130, 246, 0.8)',
                            'rgba(16, 185, 129, 0.8)',
                            'rgba(139, 92, 246, 0.8)',
                            'rgba(236, 72, 153, 0.8)'
                        ],
                        borderColor: [
                            'rgb(239, 68, 68)',
                            'rgb(245, 158, 11)',
                            'rgb(59, 130, 246)',
                            'rgb(16, 185, 129)',
                            'rgb(139, 92, 246)',
                            'rgb(236, 72, 153)'
                        ],
                        borderWidth: 2,
                        borderRadius: 8,
                        borderSkipped: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Top 6 Kh√≥a h·ªçc Doanh thu Cao nh·∫•t',
                            font: {
                                size: 16,
                                weight: 'bold'
                            },
                            color: '#1f2937',
                            padding: 20
                        },
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: 'rgba(239, 68, 68, 0.5)',
                            borderWidth: 1,
                            cornerRadius: 12,
                            callbacks: {
                                label: function(context) {
                                    const courseData = topCourses[context.dataIndex];
                                    return [
                                        `üèÜ Doanh thu: ${formatCurrency(context.parsed.y)}`,
                                        `üì¶ ƒê∆°n h√†ng: ${courseData.totalSales || 0}`,
                                        `üí∞ Gi√° TB: ${formatCurrency((context.parsed.y / (courseData.totalSales || 1)))}`
                                    ];
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Kh√≥a h·ªçc',
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                },
                                color: '#6b7280'
                            },
                            grid: {
                                display: false
                            },
                            ticks: {
                                color: '#6b7280',
                                font: {
                                    size: 11,
                                    weight: '500'
                                },
                                maxRotation: 45,
                                callback: function(value, index) {
                                    const label = this.getLabelForValue(value);
                                    return label.length > 15 ? label.substring(0, 15) + '...' : label;
                                }
                            }
                        },
                        y: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Doanh thu (VNƒê)',
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                },
                                color: '#6b7280'
                            },
                            grid: {
                                color: 'rgba(156, 163, 175, 0.2)',
                                drawBorder: false
                            },
                            ticks: {
                                color: '#6b7280',
                                font: {
                                    size: 11,
                                    weight: '500'
                                },
                                callback: function(value) {
                                    return formatCurrency(value);
                                }
                            },
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Wrapper functions ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
        function createRevenueChart(data) {
            return createEnhancedRevenueChart(data);
        }

        function createPaymentChart(data) {
            return createEnhancedPaymentChart(data);
        }

        // Create course revenue table v·ªõi Premium Style
        function createCourseRevenueTable(data) {
            const tableBody = document.getElementById('courseRevenueTable');
            if (!tableBody) return;

            if (data.length === 0) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="3" class="px-6 py-12 text-center text-gray-500">
                            <div class="flex flex-col items-center gap-4">
                                <div class="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center">
                                    <i class="fas fa-chart-bar fa-2x text-gray-400"></i>
                                </div>
                                <div>
                                    <h3 class="text-lg font-semibold text-gray-600 mb-2">Ch∆∞a c√≥ d·ªØ li·ªáu doanh thu</h3>
                                    <p class="text-gray-500">D·ªØ li·ªáu s·∫Ω xu·∫•t hi·ªán khi c√≥ giao d·ªãch th√†nh c√¥ng</p>
                                </div>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }

            tableBody.innerHTML = data.map((course, index) => {
                const rankColor = index === 0 ? 'from-yellow-400 to-orange-500' : 
                                 index === 1 ? 'from-gray-300 to-gray-500' : 
                                 index === 2 ? 'from-orange-400 to-red-500' : 'from-indigo-400 to-purple-500';
                const medalIcon = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÜ';
                
                return `
                <tr class="hover:bg-gradient-to-r hover:from-indigo-50 hover:to-purple-50 transition-all duration-300 group ${index < 3 ? 'bg-gradient-to-r from-yellow-50/30 to-orange-50/30' : ''}">
                    <td class="px-6 py-6 whitespace-nowrap">
                        <div class="flex items-center justify-center">
                            <div class="w-12 h-12 bg-gradient-to-r ${rankColor} rounded-2xl flex items-center justify-center text-white font-bold text-lg shadow-lg group-hover:scale-110 transition-transform duration-300">
                                ${index < 3 ? medalIcon : index + 1}
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-6 whitespace-nowrap">
                        <div class="flex items-center gap-4">
                            <div class="bg-gradient-to-r from-blue-100 to-purple-100 p-3 rounded-xl">
                                <i class="fas fa-graduation-cap text-blue-600"></i>
                            </div>
                            <div>
                                <div class="font-bold text-lg text-gray-900 group-hover:text-indigo-600 transition-colors duration-300">${course.courseName}</div>
                                <div class="text-sm text-gray-500 flex items-center gap-2">
                                    <i class="fas fa-shopping-cart text-green-500"></i>
                                    ${course.totalSales} l∆∞·ª£t mua
                                </div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-6 whitespace-nowrap text-right">
                        <div class="flex flex-col items-end gap-2">
                            <span class="inline-flex items-center px-5 py-3 rounded-2xl text-xl font-black bg-gradient-to-r from-green-100 to-emerald-100 text-green-800 shadow-lg group-hover:shadow-xl transition-all duration-300">
                                <i class="fas fa-money-bill-wave mr-2"></i>
                                ${formatCurrency(course.totalRevenue)}
                            </span>
                            <div class="text-xs text-gray-500 font-medium">
                                ${formatCurrency(course.totalRevenue / course.totalSales)}/kh√≥a h·ªçc
                            </div>
                        </div>
                    </td>
                </tr>
            `}).join('');
        }

        // Create user level chart
        function createUserLevelChart(data) {
            const ctx = document.getElementById('userLevelChart').getContext('2d');
            
            if (userLevelChart) {
                userLevelChart.destroy();
            }
            
            userLevelChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: data.map(item => item._id || 'Ch∆∞a x√°c ƒë·ªãnh'),
                    datasets: [{
                        data: data.map(item => item.count),
                        backgroundColor: [
                            'rgba(59, 130, 246, 0.8)',  // Blue
                            'rgba(16, 185, 129, 0.8)',  // Emerald
                            'rgba(245, 158, 11, 0.8)',  // Amber
                            'rgba(239, 68, 68, 0.8)',   // Red
                            'rgba(139, 92, 246, 0.8)',  // Violet
                            'rgba(236, 72, 153, 0.8)',  // Pink
                        ],
                        borderColor: [
                            'rgb(59, 130, 246)',
                            'rgb(16, 185, 129)',
                            'rgb(245, 158, 11)',
                            'rgb(239, 68, 68)',
                            'rgb(139, 92, 246)',
                            'rgb(236, 72, 153)',
                        ],
                        borderWidth: 3,
                        hoverBorderWidth: 4,
                        hoverBackgroundColor: [
                            'rgba(59, 130, 246, 0.9)',
                            'rgba(16, 185, 129, 0.9)',
                            'rgba(245, 158, 11, 0.9)',
                            'rgba(239, 68, 68, 0.9)',
                            'rgba(139, 92, 246, 0.9)',
                            'rgba(236, 72, 153, 0.9)',
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '50%',
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                usePointStyle: true,
                                pointStyle: 'circle',
                                padding: 15,
                                font: {
                                    size: 12,
                                    weight: '500'
                                },
                                color: '#6b7280'
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(255, 255, 255, 0.95)',
                            titleColor: '#374151',
                            bodyColor: '#6b7280',
                            borderColor: '#e5e7eb',
                            borderWidth: 1,
                            cornerRadius: 12,
                            padding: 12,
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed || 0;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${label}: ${value} ng∆∞·ªùi (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Create korean level chart
        function createKoreanLevelChart(data) {
            const ctx = document.getElementById('koreanLevelChart').getContext('2d');
            
            if (koreanLevelChart) {
                koreanLevelChart.destroy();
            }
            
            koreanLevelChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.map(item => item._id),
                    datasets: [{
                        label: 'S·ªë l∆∞·ª£ng h·ªçc vi√™n',
                        data: data.map(item => item.count),
                        backgroundColor: [
                            'rgba(16, 185, 129, 0.8)',
                            'rgba(34, 197, 94, 0.8)',
                            'rgba(132, 204, 22, 0.8)',
                            'rgba(245, 158, 11, 0.8)',
                            'rgba(251, 146, 60, 0.8)',
                            'rgba(239, 68, 68, 0.8)',
                        ],
                        borderColor: [
                            'rgb(16, 185, 129)',
                            'rgb(34, 197, 94)',
                            'rgb(132, 204, 22)',
                            'rgb(245, 158, 11)',
                            'rgb(251, 146, 60)',
                            'rgb(239, 68, 68)',
                        ],
                        borderWidth: 2,
                        borderRadius: 8,
                        borderSkipped: false,
                        hoverBackgroundColor: [
                            'rgba(16, 185, 129, 0.9)',
                            'rgba(34, 197, 94, 0.9)',
                            'rgba(132, 204, 22, 0.9)',
                            'rgba(245, 158, 11, 0.9)',
                            'rgba(251, 146, 60, 0.9)',
                            'rgba(239, 68, 68, 0.9)',
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(255, 255, 255, 0.95)',
                            titleColor: '#374151',
                            bodyColor: '#6b7280',
                            borderColor: '#e5e7eb',
                            borderWidth: 1,
                            cornerRadius: 12,
                            padding: 12,
                            callbacks: {
                                title: function(context) {
                                    return `Tr√¨nh ƒë·ªô ${context[0].label}`;
                                },
                                label: function(context) {
                                    return `S·ªë l∆∞·ª£ng: ${context.parsed.y} h·ªçc vi√™n`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                font: {
                                    size: 12,
                                    weight: '500'
                                },
                                color: '#6b7280'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(16, 185, 129, 0.1)',
                                drawBorder: false
                            },
                            ticks: {
                                font: {
                                    size: 11,
                                    weight: '500'
                                },
                                color: '#10b981',
                                callback: function(value) {
                                    return formatNumber(value);
                                }
                            }
                        }
                    },
                    elements: {
                        bar: {
                            borderRadius: 6
                        }
                    }
                }
            });
        }

        // Create registration chart
        function createRegistrationChart(data) {
            const ctx = document.getElementById('registrationChart').getContext('2d');
            
            if (registrationChart) {
                registrationChart.destroy();
            }

            // Process daily registration data for 30-day chart
            const dailyData = data.dailyRegistrations || [];
            
            // Create a map for the last 30 days
            const thirtyDaysData = [];
            const thirtyDaysLabels = [];
            let cumulativeData = [];
            let cumulative = 0;
            
            // Generate labels for the last 30 days
            for (let i = 29; i >= 0; i--) {
                const date = new Date();
                date.setDate(date.getDate() - i);
                thirtyDaysLabels.push(date.toLocaleDateString('vi-VN', { 
                    day: '2-digit', 
                    month: '2-digit' 
                }));
                
                // Find matching daily data
                const dayData = dailyData.find(item => {
                    const itemDate = new Date(item._id.year, item._id.month - 1, item._id.day);
                    return itemDate.toDateString() === date.toDateString();
                });
                
                const dayCount = dayData ? dayData.newRegistrations : 0;
                thirtyDaysData.push(dayCount);
                cumulative += dayCount;
                cumulativeData.push(cumulative);
            }

            // Update max users display
            const maxDailyRegistrations = Math.max(...thirtyDaysData);
            document.getElementById('chartMaxUsers').textContent = formatNumber(cumulative);

            registrationChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: thirtyDaysLabels,
                    datasets: [
                        {
                            label: 'ƒêƒÉng k√Ω m·ªõi',
                            type: 'bar',
                            data: thirtyDaysData,
                            backgroundColor: 'rgba(147, 51, 234, 0.8)',
                            borderColor: 'rgb(147, 51, 234)',
                            borderWidth: 2,
                            borderRadius: 6,
                            borderSkipped: false,
                            yAxisID: 'y'
                        },
                        {
                            label: 'T·ªïng t√≠ch l≈©y',
                            type: 'line',
                            data: cumulativeData,
                            borderColor: 'rgb(236, 72, 153)',
                            backgroundColor: 'rgba(236, 72, 153, 0.1)',
                            borderWidth: 4,
                            fill: {
                                target: 'origin',
                                above: 'rgba(236, 72, 153, 0.1)',
                            },
                            tension: 0.4,
                            pointBackgroundColor: 'rgb(236, 72, 153)',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 3,
                            pointRadius: 6,
                            pointHoverRadius: 8,
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    plugins: {
                        title: {
                            display: false
                        },
                        legend: {
                            display: true,
                            position: 'top',
                            align: 'end',
                            labels: {
                                usePointStyle: true,
                                pointStyle: 'circle',
                                padding: 20,
                                font: {
                                    size: 13,
                                    weight: 'bold'
                                },
                                color: '#6b7280'
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(255, 255, 255, 0.95)',
                            titleColor: '#374151',
                            bodyColor: '#6b7280',
                            borderColor: '#e5e7eb',
                            borderWidth: 1,
                            cornerRadius: 12,
                            padding: 12,
                            usePointStyle: true,
                            callbacks: {
                                title: function(context) {
                                    return `Ng√†y ${context[0].label}`;
                                },
                                label: function(context) {
                                    const label = context.dataset.label;
                                    const value = formatNumber(context.parsed.y);
                                    return `${label}: ${value} ng∆∞·ªùi`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                font: {
                                    size: 10,
                                    weight: '500'
                                },
                                color: '#6b7280',
                                maxRotation: 45
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(147, 51, 234, 0.1)',
                                drawBorder: false
                            },
                            ticks: {
                                font: {
                                    size: 11,
                                    weight: '500'
                                },
                                color: '#9333ea',
                                callback: function(value) {
                                    return formatNumber(value);
                                }
                            },
                            title: {
                                display: true,
                                text: 'ƒêƒÉng k√Ω m·ªõi',
                                color: '#9333ea',
                                font: {
                                    size: 12,
                                    weight: 'bold'
                                }
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            beginAtZero: true,
                            grid: {
                                drawOnChartArea: false,
                                color: 'rgba(236, 72, 153, 0.1)'
                            },
                            ticks: {
                                font: {
                                    size: 11,
                                    weight: '500'
                                },
                                color: '#ec4899',
                                callback: function(value) {
                                    return formatNumber(value);
                                }
                            },
                            title: {
                                display: true,
                                text: 'T·ªïng t√≠ch l≈©y',
                                color: '#ec4899',
                                font: {
                                    size: 12,
                                    weight: 'bold'
                                }
                            }
                        }
                    },
                    elements: {
                        bar: {
                            borderRadius: 6
                        }
                    }
                }
            });
        }

        function getScoreBadgeColor(score) {
            if (score >= 8) return 'bg-green-100 text-green-800'; // Gi·ªèi
            if (score >= 6.5) return 'bg-blue-100 text-blue-800'; // Kh√°
            if (score >= 5) return 'bg-orange-100 text-orange-800'; // Trung b√¨nh
            return 'bg-gray-100 text-gray-800'; // Y·∫øu
        }

        function getPerformanceBadgeNew(performance) {
            switch (performance) {
                case 'Xu·∫•t s·∫Øc': return 'bg-gradient-to-r from-red-100 to-red-200 text-red-800 border border-red-300';
                case 'Gi·ªèi': return 'bg-gradient-to-r from-orange-100 to-orange-200 text-orange-800 border border-orange-300';
                case 'Kh√°': return 'bg-gradient-to-r from-blue-100 to-blue-200 text-blue-800 border border-blue-300';
                case 'Trung b√¨nh': return 'bg-gradient-to-r from-green-100 to-green-200 text-green-800 border border-green-300';
                case 'Y·∫øu': return 'bg-gradient-to-r from-gray-100 to-gray-200 text-gray-800 border border-gray-300';
                default: return 'bg-gradient-to-r from-gray-100 to-gray-200 text-gray-800 border border-gray-300';
            }
        }

        function getPerformanceIcon(performance) {
            switch (performance) {
                case 'Xu·∫•t s·∫Øc': return 'üèÜ';
                case 'Gi·ªèi': return 'ü•á';
                case 'Kh√°': return 'ü•à';
                case 'Trung b√¨nh': return 'ü•â';
                case 'Y·∫øu': return 'üìö';
                default: return 'üìù';
            }
        }

        function getPerformanceBadge(performance) {
            switch (performance) {
                case 'Xu·∫•t s·∫Øc': return 'bg-green-100 text-green-800';
                case 'Gi·ªèi': return 'bg-blue-100 text-blue-800';
                case 'Kh√°': return 'bg-yellow-100 text-yellow-800';
                case 'Trung b√¨nh': return 'bg-orange-100 text-orange-800';
                case 'Y·∫øu': return 'bg-red-100 text-red-800';
                default: return 'bg-gray-100 text-gray-800';
            }
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND'
            }).format(amount || 0);
        }

        function formatNumber(number) {
            return new Intl.NumberFormat('vi-VN').format(number || 0);
        }

        function showError(message) {
            alert(message);
        }

        // Load course revenue data v·ªõi time filter
        async function loadCourseRevenueData(timeFilter = 'all') {
            try {
                const params = new URLSearchParams();
                params.append('timeFilter', timeFilter);
                
                const response = await fetch(`/reports/api/course-revenue?${params}`);
                const result = await response.json();
                
                if (result.success) {
                    createCourseRevenueTable(result.data);
                    
                    // Update course chart if exists
                    if (result.data && result.data.length > 0) {
                        createCourseChart(result.data);
                    }
                } else {
                    showError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu doanh thu kh√≥a h·ªçc');
                }
            } catch (error) {
                console.error('Error loading course revenue data:', error);
                showError('C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu');
            }
        }

        // Load course revenue data v·ªõi enhanced filter (preset + custom dates)
        async function loadCourseRevenueDataWithFilter() {
            try {
                const courseTimeFilter = document.getElementById('courseTimeFilter');
                const courseStartDate = document.getElementById('courseStartDate');
                const courseEndDate = document.getElementById('courseEndDate');
                
                const params = new URLSearchParams();
                const filterType = courseTimeFilter.value;
                
                if (filterType === 'custom') {
                    params.append('timeFilter', 'custom');
                    params.append('startDate', courseStartDate.value);
                    params.append('endDate', courseEndDate.value);
                } else {
                    params.append('timeFilter', filterType);
                }
                
                const response = await fetch(`/reports/api/course-revenue?${params}`);
                const result = await response.json();
                
                if (result.success) {
                    createCourseRevenueTable(result.data);
                    
                    // Update course chart if exists
                    if (result.data && result.data.length > 0) {
                        createCourseChart(result.data);
                    }
                } else {
                    showError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu doanh thu kh√≥a h·ªçc');
                }
            } catch (error) {
                console.error('Error loading course revenue data with filter:', error);
                showError('C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu');
            }
        }

        // Enhanced Date Filter Events
        document.addEventListener('DOMContentLoaded', function() {
            const dateRangeSelect = document.getElementById('dateRange');
            const customDateFields = document.getElementById('customDateFields');
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            const applyFilterBtn = document.getElementById('applyFilter');

            // Show/hide custom date fields
            if (dateRangeSelect) {
                dateRangeSelect.addEventListener('change', function() {
                    if (this.value === 'custom') {
                        customDateFields.style.display = 'flex';
                        customDateFields.classList.remove('hidden');
                    } else {
                        customDateFields.style.display = 'none';
                        customDateFields.classList.add('hidden');
                        // Auto-load when selecting predefined ranges
                        loadRevenueReport();
                    }
                });
            }

            // Apply custom date filter
            if (applyFilterBtn) {
                applyFilterBtn.addEventListener('click', function() {
                    const startDate = startDateInput.value;
                    const endDate = endDateInput.value;
                    
                    if (!startDate || !endDate) {
                        showError('Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c');
                        return;
                    }
                    
                    if (new Date(startDate) > new Date(endDate)) {
                        showError('Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c');
                        return;
                    }
                    
                    loadRevenueReport();
                });
            }

            // Course time filter event
            const courseTimeFilter = document.getElementById('courseTimeFilter');
            const courseStartDate = document.getElementById('courseStartDate');
            const courseEndDate = document.getElementById('courseEndDate');
            const applyCourseFilter = document.getElementById('applyCourseFilter');
            
            if (courseTimeFilter) {
                courseTimeFilter.addEventListener('change', function() {
                    if (this.value === 'custom') {
                        // Enable custom date inputs
                        courseStartDate.disabled = false;
                        courseEndDate.disabled = false;
                        courseStartDate.style.opacity = '1';
                        courseEndDate.style.opacity = '1';
                    } else {
                        // Disable custom date inputs and load data
                        courseStartDate.disabled = true;
                        courseEndDate.disabled = true;
                        courseStartDate.style.opacity = '0.5';
                        courseEndDate.style.opacity = '0.5';
                        loadCourseRevenueDataWithFilter();
                    }
                });
            }

            // Apply course filter button
            if (applyCourseFilter) {
                applyCourseFilter.addEventListener('click', function() {
                    const filter = courseTimeFilter.value;
                    
                    if (filter === 'custom') {
                        const startDate = courseStartDate.value;
                        const endDate = courseEndDate.value;
                        
                        if (!startDate || !endDate) {
                            showError('Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c');
                            return;
                        }
                        
                        if (new Date(startDate) > new Date(endDate)) {
                            showError('Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c');
                            return;
                        }
                    }
                    
                    loadCourseRevenueDataWithFilter();
                });
            }

            // Set default dates for course filter
            if (courseStartDate && courseEndDate) {
                const today = new Date();
                const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());
                
                courseStartDate.value = lastMonth.toISOString().split('T')[0];
                courseEndDate.value = today.toISOString().split('T')[0];
                
                // Initially disable date inputs
                courseStartDate.disabled = true;
                courseEndDate.disabled = true;
                courseStartDate.style.opacity = '0.5';
                courseEndDate.style.opacity = '0.5';
            }

            // Set default date range for custom fields
            const today = new Date();
            const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());
            
            if (startDateInput) {
                startDateInput.value = lastMonth.toISOString().split('T')[0];
            }
            if (endDateInput) {
                endDateInput.value = today.toISOString().split('T')[0];
            }

            // Load initial reports
            setTimeout(() => {
                loadRevenueReport();
                loadAccountStats();
            }, 500);
        });

        // Display gender statistics
        function displayGenderStats(genderData) {
            console.log('Gender data received:', genderData);
            
            if (!genderData || genderData.length === 0) {
                console.log('No gender data available');
                return;
            }

            // Process user gender data from API
            let totalMale = 0, totalFemale = 0, totalOther = 0, totalUndefined = 0;

            genderData.forEach(item => {
                const count = item.count || 0;
                switch(item._id) {
                    case 'male':
                        totalMale = count;
                        break;
                    case 'female':
                        totalFemale = count;
                        break;
                    case 'other':
                        totalOther = count;
                        break;
                    case '':
                    case null:
                    case undefined:
                        totalUndefined = count;
                        break;
                }
            });

            const totalUsers = totalMale + totalFemale + totalOther + totalUndefined;

            console.log('Gender breakdown:', {
                male: totalMale,
                female: totalFemale,
                other: totalOther,
                undefined: totalUndefined,
                total: totalUsers
            });

            // Update gender statistics table
            const tableBody = document.getElementById('genderStatsTable');
            if (tableBody) {
                const malePercent = totalUsers > 0 ? ((totalMale / totalUsers) * 100).toFixed(1) : 0;
                const femalePercent = totalUsers > 0 ? ((totalFemale / totalUsers) * 100).toFixed(1) : 0;
                const otherPercent = totalUsers > 0 ? ((totalOther / totalUsers) * 100).toFixed(1) : 0;
                const undefinedPercent = totalUsers > 0 ? ((totalUndefined / totalUsers) * 100).toFixed(1) : 0;

                tableBody.innerHTML = `
                    <tr class="hover:bg-blue-50/50 transition-all duration-200">
                        <td class="px-4 py-3">
                            <div class="flex items-center gap-3">
                                <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                                    <i class="fas fa-mars text-blue-600"></i>
                                </div>
                                <div>
                                    <div class="font-medium text-gray-900 text-sm">Nam</div>
                                    <div class="text-xs text-gray-500">Male</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-blue-100 text-blue-800">
                                ${totalMale}
                            </span>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <div class="flex items-center gap-2 justify-center">
                                <div class="w-12 h-2 bg-gray-200 rounded-full overflow-hidden">
                                    <div class="h-full bg-blue-500 rounded-full transition-all duration-300" style="width: ${malePercent}%"></div>
                                </div>
                                <span class="text-sm font-semibold text-gray-700">${malePercent}%</span>
                            </div>
                        </td>
                    </tr>
                    <tr class="hover:bg-pink-50/50 transition-all duration-200">
                        <td class="px-4 py-3">
                            <div class="flex items-center gap-3">
                                <div class="w-8 h-8 bg-pink-100 rounded-lg flex items-center justify-center">
                                    <i class="fas fa-venus text-pink-600"></i>
                                </div>
                                <div>
                                    <div class="font-medium text-gray-900 text-sm">N·ªØ</div>
                                    <div class="text-xs text-gray-500">Female</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-pink-100 text-pink-800">
                                ${totalFemale}
                            </span>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <div class="flex items-center gap-2 justify-center">
                                <div class="w-12 h-2 bg-gray-200 rounded-full overflow-hidden">
                                    <div class="h-full bg-pink-500 rounded-full transition-all duration-300" style="width: ${femalePercent}%"></div>
                                </div>
                                <span class="text-sm font-semibold text-gray-700">${femalePercent}%</span>
                            </div>
                        </td>
                    </tr>
                    <tr class="hover:bg-purple-50/50 transition-all duration-200">
                        <td class="px-4 py-3">
                            <div class="flex items-center gap-3">
                                <div class="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                                    <i class="fas fa-transgender text-purple-600"></i>
                                </div>
                                <div>
                                    <div class="font-medium text-gray-900 text-sm">Kh√°c</div>
                                    <div class="text-xs text-gray-500">Other</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-purple-100 text-purple-800">
                                ${totalOther}
                            </span>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <div class="flex items-center gap-2 justify-center">
                                <div class="w-12 h-2 bg-gray-200 rounded-full overflow-hidden">
                                    <div class="h-full bg-purple-500 rounded-full transition-all duration-300" style="width: ${otherPercent}%"></div>
                                </div>
                                <span class="text-sm font-semibold text-gray-700">${otherPercent}%</span>
                            </div>
                        </td>
                    </tr>
                    <tr class="hover:bg-gray-50/50 transition-all duration-200">
                        <td class="px-4 py-3">
                            <div class="flex items-center gap-3">
                                <div class="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                                    <i class="fas fa-question text-gray-600"></i>
                                </div>
                                <div>
                                    <div class="font-medium text-gray-900 text-sm">Ch∆∞a x√°c ƒë·ªãnh</div>
                                    <div class="text-xs text-gray-500">Undefined</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-gray-100 text-gray-800">
                                ${totalUndefined}
                            </span>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <div class="flex items-center gap-2 justify-center">
                                <div class="w-12 h-2 bg-gray-200 rounded-full overflow-hidden">
                                    <div class="h-full bg-gray-500 rounded-full transition-all duration-300" style="width: ${undefinedPercent}%"></div>
                                </div>
                                <span class="text-sm font-semibold text-gray-700">${undefinedPercent}%</span>
                            </div>
                        </td>
                    </tr>
                `;
            }

            // Update summary cards
            updateGenderSummary(totalMale, totalFemale, totalOther, totalUsers);
            
            // Update gender chart with all 4 categories
            updateGenderChart(totalMale, totalFemale, totalOther, totalUndefined);
        }

        // Update gender summary cards
        function updateGenderSummary(male, female, other, total) {
            const malePercent = total > 0 ? ((male / total) * 100).toFixed(1) : 0;
            const femalePercent = total > 0 ? ((female / total) * 100).toFixed(1) : 0;
            
            // Calculate ratio
            let ratio = '1:1';
            if (male > 0 && female > 0) {
                const gcd = (a, b) => b === 0 ? a : gcd(b, a % b);
                const divisor = gcd(male, female);
                ratio = `${male/divisor}:${female/divisor}`;
            } else if (male > 0) {
                ratio = `${male}:0`;
            } else if (female > 0) {
                ratio = `0:${female}`;
            }

            // Update elements safely (check if they exist)
            const totalMalePercentEl = document.getElementById('totalMalePercent');
            const totalFemalePercentEl = document.getElementById('totalFemalePercent');
            const genderRatioEl = document.getElementById('genderRatio');
            const maleCountEl = document.getElementById('maleCount');
            const femaleCountEl = document.getElementById('femaleCount');
            const otherCountEl = document.getElementById('otherCount');
            
            if (totalMalePercentEl) totalMalePercentEl.textContent = `${malePercent}%`;
            if (totalFemalePercentEl) totalFemalePercentEl.textContent = `${femalePercent}%`;
            if (genderRatioEl) genderRatioEl.textContent = ratio;
            if (maleCountEl) maleCountEl.textContent = male;
            if (femaleCountEl) femaleCountEl.textContent = female;
            if (otherCountEl) otherCountEl.textContent = other;
        }

        // Gender chart variable
        let genderChart = null;

        // Update gender chart
        function updateGenderChart(male, female, other, undefined = 0) {
            const ctx = document.getElementById('genderChart');
            if (!ctx) return;

            // Destroy existing chart
            if (genderChart) {
                genderChart.destroy();
            }

            const total = male + female + other + undefined;
            if (total === 0) {
                ctx.style.display = 'none';
                return;
            }

            ctx.style.display = 'block';

            // Filter out zero values for cleaner chart
            const data = [];
            const labels = [];
            const backgroundColor = [];
            const borderColor = [];

            if (male > 0) {
                data.push(male);
                labels.push(`Nam (${male})`);
                backgroundColor.push('rgba(59, 130, 246, 0.8)');
                borderColor.push('rgb(59, 130, 246)');
            }

            if (female > 0) {
                data.push(female);
                labels.push(`N·ªØ (${female})`);
                backgroundColor.push('rgba(236, 72, 153, 0.8)');
                borderColor.push('rgb(236, 72, 153)');
            }

            if (other > 0) {
                data.push(other);
                labels.push(`Kh√°c (${other})`);
                backgroundColor.push('rgba(147, 51, 234, 0.8)');
                borderColor.push('rgb(147, 51, 234)');
            }

            if (undefined > 0) {
                data.push(undefined);
                labels.push(`Ch∆∞a x√°c ƒë·ªãnh (${undefined})`);
                backgroundColor.push('rgba(107, 114, 128, 0.8)');
                borderColor.push('rgb(107, 114, 128)');
            }

            genderChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: backgroundColor,
                        borderColor: borderColor,
                        borderWidth: 3,
                        hoverBorderWidth: 4,
                        hoverOffset: 8
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 15,
                                font: {
                                    size: 12,
                                    weight: '500'
                                },
                                usePointStyle: true,
                                pointStyle: 'circle'
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: 'white',
                            bodyColor: 'white',
                            borderColor: 'rgba(255, 255, 255, 0.2)',
                            borderWidth: 1,
                            cornerRadius: 8,
                            displayColors: true,
                            callbacks: {
                                label: function(context) {
                                    const percentage = ((context.parsed / total) * 100).toFixed(1);
                                    return `${context.label}: ${percentage}%`;
                                }
                            }
                        }
                    },
                    animation: {
                        animateScale: true,
                        animateRotate: true,
                        duration: 1000,
                        easing: 'easeOutQuart'
                    },
                    cutout: '60%',
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    }
                }
            });
        }

        // Display class-specific gender statistics
        function displayClassGenderStats(classGenderData) {
            console.log('Class gender data received:', classGenderData);
            
            if (!classGenderData || classGenderData.length === 0) {
                console.log('No class gender data available');
                return;
            }

            // Update gender statistics table for class breakdown
            const tableBody = document.getElementById('genderStatsTable');
            if (tableBody) {
                let totalMale = 0, totalFemale = 0, totalOther = 0;
                
                // Calculate totals across all classes
                classGenderData.forEach(classData => {
                    totalMale += classData.male || 0;
                    totalFemale += classData.female || 0;
                    totalOther += classData.other || 0;
                });
                
                const totalStudents = totalMale + totalFemale + totalOther;
                
                // Create class breakdown table
                let classBreakdownHtml = '';
                
                classGenderData.forEach((classData, index) => {
                    const classTotal = (classData.male || 0) + (classData.female || 0) + (classData.other || 0);
                    const malePercent = classTotal > 0 ? ((classData.male / classTotal) * 100).toFixed(1) : 0;
                    const femalePercent = classTotal > 0 ? ((classData.female / classTotal) * 100).toFixed(1) : 0;
                    const otherPercent = classTotal > 0 ? ((classData.other / classTotal) * 100).toFixed(1) : 0;
                    
                    classBreakdownHtml += `
                        <tr class="hover:bg-gray-50 transition-all duration-200">
                            <td colspan="3" class="px-4 py-2 border-t border-gray-200">
                                <div class="font-semibold text-indigo-700">${classData.className || 'Kh√¥ng x√°c ƒë·ªãnh'}</div>
                                <div class="text-xs text-gray-500">${classData.courseName || 'Kh√¥ng c√≥ kh√≥a h·ªçc'}</div>
                            </td>
                        </tr>
                        <tr class="hover:bg-blue-50/50 transition-all duration-200">
                            <td class="px-6 py-2">
                                <div class="flex items-center gap-2">
                                    <div class="w-6 h-6 bg-blue-100 rounded-lg flex items-center justify-center">
                                        <i class="fas fa-mars text-blue-600 text-xs"></i>
                                    </div>
                                    <span class="text-sm text-gray-700">Nam</span>
                                </div>
                            </td>
                            <td class="px-4 py-2 text-center">
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                    ${classData.male || 0}
                                </span>
                            </td>
                            <td class="px-4 py-2 text-center">
                                <div class="flex items-center gap-2 justify-center">
                                    <div class="w-12 h-2 bg-gray-200 rounded-full overflow-hidden">
                                        <div class="h-full bg-blue-500 rounded-full transition-all duration-300" style="width: ${malePercent}%"></div>
                                    </div>
                                    <span class="text-xs font-semibold text-gray-700">${malePercent}%</span>
                                </div>
                            </td>
                        </tr>
                        <tr class="hover:bg-pink-50/50 transition-all duration-200">
                            <td class="px-6 py-2">
                                <div class="flex items-center gap-2">
                                    <div class="w-6 h-6 bg-pink-100 rounded-lg flex items-center justify-center">
                                        <i class="fas fa-venus text-pink-600 text-xs"></i>
                                    </div>
                                    <span class="text-sm text-gray-700">N·ªØ</span>
                                </div>
                            </td>
                            <td class="px-4 py-2 text-center">
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-pink-100 text-pink-800">
                                    ${classData.female || 0}
                                </span>
                            </td>
                            <td class="px-4 py-2 text-center">
                                <div class="flex items-center gap-2 justify-center">
                                    <div class="w-12 h-2 bg-gray-200 rounded-full overflow-hidden">
                                        <div class="h-full bg-pink-500 rounded-full transition-all duration-300" style="width: ${femalePercent}%"></div>
                                    </div>
                                    <span class="text-xs font-semibold text-gray-700">${femalePercent}%</span>
                                </div>
                            </td>
                        </tr>
                        <tr class="hover:bg-purple-50/50 transition-all duration-200">
                            <td class="px-6 py-2">
                                <div class="flex items-center gap-2">
                                    <div class="w-6 h-6 bg-purple-100 rounded-lg flex items-center justify-center">
                                        <i class="fas fa-transgender text-purple-600 text-xs"></i>
                                    </div>
                                    <span class="text-sm text-gray-700">Kh√°c</span>
                                </div>
                            </td>
                            <td class="px-4 py-2 text-center">
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                                    ${classData.other || 0}
                                </span>
                            </td>
                            <td class="px-4 py-2 text-center">
                                <div class="flex items-center gap-2 justify-center">
                                    <div class="w-12 h-2 bg-gray-200 rounded-full overflow-hidden">
                                        <div class="h-full bg-purple-500 rounded-full transition-all duration-300" style="width: ${otherPercent}%"></div>
                                    </div>
                                    <span class="text-xs font-semibold text-gray-700">${otherPercent}%</span>
                                </div>
                            </td>
                        </tr>
                    `;
                });
                
                // Add total row at the end
                const totalMalePercent = totalStudents > 0 ? ((totalMale / totalStudents) * 100).toFixed(1) : 0;
                const totalFemalePercent = totalStudents > 0 ? ((totalFemale / totalStudents) * 100).toFixed(1) : 0;
                const totalOtherPercent = totalStudents > 0 ? ((totalOther / totalStudents) * 100).toFixed(1) : 0;
                
                classBreakdownHtml += `
                    <tr class="border-t-2 border-gray-300 bg-gradient-to-r from-gray-50 to-gray-100">
                        <td colspan="3" class="px-4 py-2">
                            <div class="font-bold text-gray-800">T·ªîNG C·ªòNG TO√ÄN B·ªò L·ªöP</div>
                        </td>
                    </tr>
                    <tr class="bg-blue-50 font-semibold">
                        <td class="px-6 py-3">
                            <div class="flex items-center gap-2">
                                <div class="w-6 h-6 bg-blue-200 rounded-lg flex items-center justify-center">
                                    <i class="fas fa-mars text-blue-700 text-xs"></i>
                                </div>
                                <span class="text-sm text-blue-800">T·ªïng Nam</span>
                            </div>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-blue-200 text-blue-900">
                                ${totalMale}
                            </span>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <div class="flex items-center gap-2 justify-center">
                                <div class="w-16 h-3 bg-blue-200 rounded-full overflow-hidden">
                                    <div class="h-full bg-blue-600 rounded-full transition-all duration-300" style="width: ${totalMalePercent}%"></div>
                                </div>
                                <span class="text-sm font-bold text-blue-800">${totalMalePercent}%</span>
                            </div>
                        </td>
                    </tr>
                    <tr class="bg-pink-50 font-semibold">
                        <td class="px-6 py-3">
                            <div class="flex items-center gap-2">
                                <div class="w-6 h-6 bg-pink-200 rounded-lg flex items-center justify-center">
                                    <i class="fas fa-venus text-pink-700 text-xs"></i>
                                </div>
                                <span class="text-sm text-pink-800">T·ªïng N·ªØ</span>
                            </div>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-pink-200 text-pink-900">
                                ${totalFemale}
                            </span>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <div class="flex items-center gap-2 justify-center">
                                <div class="w-16 h-3 bg-pink-200 rounded-full overflow-hidden">
                                    <div class="h-full bg-pink-600 rounded-full transition-all duration-300" style="width: ${totalFemalePercent}%"></div>
                                </div>
                                <span class="text-sm font-bold text-pink-800">${totalFemalePercent}%</span>
                            </div>
                        </td>
                    </tr>
                    <tr class="bg-purple-50 font-semibold">
                        <td class="px-6 py-3">
                            <div class="flex items-center gap-2">
                                <div class="w-6 h-6 bg-purple-200 rounded-lg flex items-center justify-center">
                                    <i class="fas fa-transgender text-purple-700 text-xs"></i>
                                </div>
                                <span class="text-sm text-purple-800">T·ªïng Kh√°c</span>
                            </div>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-purple-200 text-purple-900">
                                ${totalOther}
                            </span>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <div class="flex items-center gap-2 justify-center">
                                <div class="w-16 h-3 bg-purple-200 rounded-full overflow-hidden">
                                    <div class="h-full bg-purple-600 rounded-full transition-all duration-300" style="width: ${totalOtherPercent}%"></div>
                                </div>
                                <span class="text-sm font-bold text-purple-800">${totalOtherPercent}%</span>
                            </div>
                        </td>
                    </tr>
                `;
                
                tableBody.innerHTML = classBreakdownHtml;

                // Update gender chart with total data
                updateGenderChart(totalMale, totalFemale, totalOther, 0);
            }

            console.log('Class gender statistics displayed successfully');
        }

        // Display overall gender statistics for account reports
        function displayOverallGenderStats(genderData) {
            console.log('Overall gender data received:', genderData);
            
            if (!genderData || genderData.length === 0) {
                console.log('No overall gender data available');
                return;
            }

            // Process user gender data from API
            let totalMale = 0, totalFemale = 0, totalOther = 0, totalUndefined = 0;

            genderData.forEach(item => {
                const count = item.count || 0;
                switch(item._id) {
                    case 'male':
                        totalMale = count;
                        break;
                    case 'female':
                        totalFemale = count;
                        break;
                    case 'other':
                        totalOther = count;
                        break;
                    case '':
                    case null:
                    case undefined:
                        totalUndefined = count;
                        break;
                }
            });

            const totalUsers = totalMale + totalFemale + totalOther + totalUndefined;

            console.log('Overall gender breakdown:', {
                male: totalMale,
                female: totalFemale,
                other: totalOther,
                undefined: totalUndefined,
                total: totalUsers
            });

            // Update gender statistics table
            const tableBody = document.getElementById('genderStatsTable');
            if (tableBody) {
                const malePercent = totalUsers > 0 ? ((totalMale / totalUsers) * 100).toFixed(1) : 0;
                const femalePercent = totalUsers > 0 ? ((totalFemale / totalUsers) * 100).toFixed(1) : 0;
                const otherPercent = totalUsers > 0 ? ((totalOther / totalUsers) * 100).toFixed(1) : 0;
                const undefinedPercent = totalUsers > 0 ? ((totalUndefined / totalUsers) * 100).toFixed(1) : 0;

                tableBody.innerHTML = `
                    <tr class="hover:bg-blue-50/50 transition-all duration-200">
                        <td class="px-4 py-3">
                            <div class="flex items-center gap-3">
                                <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                                    <i class="fas fa-mars text-blue-600"></i>
                                </div>
                                <div>
                                    <div class="font-medium text-gray-900 text-sm">Nam</div>
                                    <div class="text-xs text-gray-500">Male</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-blue-100 text-blue-800">
                                ${totalMale}
                            </span>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <div class="flex items-center gap-2 justify-center">
                                <div class="w-12 h-2 bg-gray-200 rounded-full overflow-hidden">
                                    <div class="h-full bg-blue-500 rounded-full transition-all duration-300" style="width: ${malePercent}%"></div>
                                </div>
                                <span class="text-sm font-semibold text-gray-700">${malePercent}%</span>
                            </div>
                        </td>
                    </tr>
                    <tr class="hover:bg-pink-50/50 transition-all duration-200">
                        <td class="px-4 py-3">
                            <div class="flex items-center gap-3">
                                <div class="w-8 h-8 bg-pink-100 rounded-lg flex items-center justify-center">
                                    <i class="fas fa-venus text-pink-600"></i>
                                </div>
                                <div>
                                    <div class="font-medium text-gray-900 text-sm">N·ªØ</div>
                                    <div class="text-xs text-gray-500">Female</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-pink-100 text-pink-800">
                                ${totalFemale}
                            </span>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <div class="flex items-center gap-2 justify-center">
                                <div class="w-12 h-2 bg-gray-200 rounded-full overflow-hidden">
                                    <div class="h-full bg-pink-500 rounded-full transition-all duration-300" style="width: ${femalePercent}%"></div>
                                </div>
                                <span class="text-sm font-semibold text-gray-700">${femalePercent}%</span>
                            </div>
                        </td>
                    </tr>
                    <tr class="hover:bg-purple-50/50 transition-all duration-200">
                        <td class="px-4 py-3">
                            <div class="flex items-center gap-3">
                                <div class="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                                    <i class="fas fa-transgender text-purple-600"></i>
                                </div>
                                <div>
                                    <div class="font-medium text-gray-900 text-sm">Kh√°c</div>
                                    <div class="text-xs text-gray-500">Other</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-purple-100 text-purple-800">
                                ${totalOther}
                            </span>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <div class="flex items-center gap-2 justify-center">
                                <div class="w-12 h-2 bg-gray-200 rounded-full overflow-hidden">
                                    <div class="h-full bg-purple-500 rounded-full transition-all duration-300" style="width: ${otherPercent}%"></div>
                                </div>
                                <span class="text-sm font-semibold text-gray-700">${otherPercent}%</span>
                            </div>
                        </td>
                    </tr>
                    <tr class="hover:bg-gray-50/50 transition-all duration-200">
                        <td class="px-4 py-3">
                            <div class="flex items-center gap-3">
                                <div class="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                                    <i class="fas fa-question text-gray-600"></i>
                                </div>
                                <div>
                                    <div class="font-medium text-gray-900 text-sm">Ch∆∞a x√°c ƒë·ªãnh</div>
                                    <div class="text-xs text-gray-500">Undefined</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-gray-100 text-gray-800">
                                ${totalUndefined}
                            </span>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <div class="flex items-center gap-2 justify-center">
                                <div class="w-12 h-2 bg-gray-200 rounded-full overflow-hidden">
                                    <div class="h-full bg-gray-500 rounded-full transition-all duration-300" style="width: ${undefinedPercent}%"></div>
                                </div>
                                <span class="text-sm font-semibold text-gray-700">${undefinedPercent}%</span>
                            </div>
                        </td>
                    </tr>
                `;

                // Update gender chart with overall data
                updateGenderChart(totalMale, totalFemale, totalOther, totalUndefined);
            }

            console.log('Overall gender statistics displayed successfully');
        }

        // Display gender statistics specifically for Account Report
        function displayAccountGenderStats(genderData) {
            console.log('Account gender data received:', genderData);
            
            if (!genderData || genderData.length === 0) {
                console.log('No account gender data available');
                return;
            }

            // Process user gender data from API
            let totalMale = 0, totalFemale = 0, totalOther = 0, totalUndefined = 0;

            genderData.forEach(item => {
                const count = item.count || 0;
                switch(item._id) {
                    case 'male':
                        totalMale = count;
                        break;
                    case 'female':
                        totalFemale = count;
                        break;
                    case 'other':
                        totalOther = count;
                        break;
                    case '':
                    case null:
                    case undefined:
                        totalUndefined = count;
                        break;
                }
            });

            const totalUsers = totalMale + totalFemale + totalOther + totalUndefined;

            console.log('Account gender breakdown:', {
                male: totalMale,
                female: totalFemale,
                other: totalOther,
                undefined: totalUndefined,
                total: totalUsers
            });

            // Update gender mini cards
            const malePercent = totalUsers > 0 ? ((totalMale / totalUsers) * 100).toFixed(1) : 0;
            const femalePercent = totalUsers > 0 ? ((totalFemale / totalUsers) * 100).toFixed(1) : 0;
            const otherPercent = totalUsers > 0 ? (((totalOther + totalUndefined) / totalUsers) * 100).toFixed(1) : 0;

            // Update mini cards
            const maleCountMini = document.getElementById('maleCountMini');
            const femaleCountMini = document.getElementById('femaleCountMini');
            const otherCountMini = document.getElementById('otherCountMini');
            const totalMalePercentEl = document.getElementById('totalMalePercent');
            const totalFemalePercentEl = document.getElementById('totalFemalePercent');
            const genderRatioEl = document.getElementById('genderRatio');

            if (maleCountMini) maleCountMini.textContent = totalMale;
            if (femaleCountMini) femaleCountMini.textContent = totalFemale;
            if (otherCountMini) otherCountMini.textContent = totalOther + totalUndefined;
            if (totalMalePercentEl) totalMalePercentEl.textContent = `${malePercent}%`;
            if (totalFemalePercentEl) totalFemalePercentEl.textContent = `${femalePercent}%`;
            if (genderRatioEl) genderRatioEl.textContent = `${totalMale}:${totalFemale}`;

            // Update mini gender chart
            updateAccountGenderChart(totalMale, totalFemale, totalOther + totalUndefined);

            console.log('Account gender statistics displayed successfully');
        }

        // Update mini gender chart for Account Report
        let genderChartMini = null;
        function updateAccountGenderChart(male, female, other) {
            const ctx = document.getElementById('genderChartMini');
            if (!ctx) return;

            // Destroy existing chart
            if (genderChartMini) {
                genderChartMini.destroy();
            }

            const total = male + female + other;
            if (total === 0) {
                ctx.style.display = 'none';
                return;
            }

            ctx.style.display = 'block';

            // Create data arrays
            const data = [];
            const labels = [];
            const backgroundColor = [];
            const borderColor = [];

            if (male > 0) {
                data.push(male);
                labels.push(`Nam (${male})`);
                backgroundColor.push('rgba(59, 130, 246, 0.8)');
                borderColor.push('rgb(59, 130, 246)');
            }

            if (female > 0) {
                data.push(female);
                labels.push(`N·ªØ (${female})`);
                backgroundColor.push('rgba(236, 72, 153, 0.8)');
                borderColor.push('rgb(236, 72, 153)');
            }

            if (other > 0) {
                data.push(other);
                labels.push(`Kh√°c (${other})`);
                backgroundColor.push('rgba(107, 114, 128, 0.8)');
                borderColor.push('rgb(107, 114, 128)');
            }

            genderChartMini = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: backgroundColor,
                        borderColor: borderColor,
                        borderWidth: 2,
                        hoverOffset: 10
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 15,
                                usePointStyle: true,
                                font: {
                                    size: 11,
                                    weight: 'bold'
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed;
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${label}: ${percentage}%`;
                                }
                            }
                        }
                    },
                    animation: {
                        animateRotate: true,
                        duration: 1000,
                        easing: 'easeOutQuart'
                    },
                    cutout: '60%'
                }
            });
        }

        // H√†m toggle menu xu·∫•t b√°o c√°o
        function toggleExportMenu() {
            const menu = document.getElementById('exportMenu');
            menu.classList.toggle('hidden');
        }

        // ƒê√≥ng menu khi click b√™n ngo√†i
        document.addEventListener('click', function(event) {
            const menu = document.getElementById('exportMenu');
            const button = event.target.closest('[onclick="toggleExportMenu()"]');
            if (!button && !menu.contains(event.target)) {
                menu.classList.add('hidden');
            }
        });

        // H√†m xu·∫•t Excel
        async function exportToExcel() {
            try {
                const reportType = document.getElementById('reportType').value;
                let workbook = XLSX.utils.book_new();
                
                if (reportType === 'revenue') {
                    await exportRevenueToExcel(workbook);
                } else if (reportType === 'academic') {
                    await exportAcademicToExcel(workbook);
                } else if (reportType === 'accounts') {
                    await exportAccountsToExcel(workbook);
                }
                
                // Xu·∫•t file
                const fileName = `BaoCao_${reportType}_${new Date().toISOString().split('T')[0]}.xlsx`;
                XLSX.writeFile(workbook, fileName);
                
                // ƒê√≥ng menu
                document.getElementById('exportMenu').classList.add('hidden');
                
                // Th√¥ng b√°o th√†nh c√¥ng
                showSuccessMessage('Xu·∫•t Excel th√†nh c√¥ng!');
            } catch (error) {
                console.error('L·ªói xu·∫•t Excel:', error);
                showError('C√≥ l·ªói x·∫£y ra khi xu·∫•t Excel');
            }
        }

        // Xu·∫•t b√°o c√°o doanh thu ra Excel
        async function exportRevenueToExcel(workbook) {
            // T·∫°o sheet t·ªïng quan
            const overviewData = [
                ['B√ÅO C√ÅO DOANH THU'],
                ['Ng√†y t·∫°o:', new Date().toLocaleDateString('vi-VN')],
                [''],
                ['T·ªîNG QUAN'],
                ['T·ªïng doanh thu:', formatCurrency(document.getElementById('totalRevenue')?.textContent || '0')],
                ['T·ªïng ƒë∆°n h√†ng:', document.getElementById('totalOrders')?.textContent || '0'],
                ['Doanh thu trung b√¨nh:', formatCurrency(document.getElementById('averageRevenue')?.textContent || '0')],
                ['']
            ];

            // Th√™m d·ªØ li·ªáu bi·ªÉu ƒë·ªì 30 ng√†y (gi·∫£ l·∫≠p)
            overviewData.push(['DOANH THU 30 NG√ÄY G·∫¶N NH·∫§T']);
            overviewData.push(['Ng√†y', 'Doanh thu (VNƒê)', 'S·ªë ƒë∆°n h√†ng', 'Doanh thu t√≠ch l≈©y']);
            
            for (let i = 29; i >= 0; i--) {
                const date = new Date();
                date.setDate(date.getDate() - i);
                const dateStr = date.toLocaleDateString('vi-VN');
                const revenue = Math.random() * 5000000 + 1000000;
                const orders = Math.floor(Math.random() * 20) + 5;
                const cumulative = revenue * (30 - i);
                
                overviewData.push([dateStr, revenue, orders, cumulative]);
            }

            const overviewSheet = XLSX.utils.aoa_to_sheet(overviewData);
            XLSX.utils.book_append_sheet(workbook, overviewSheet, 'T·ªïng quan');

            // T·∫°o sheet doanh thu theo kh√≥a h·ªçc
            const courseData = [
                ['DOANH THU THEO KH√ìA H·ªåC'],
                ['T√™n kh√≥a h·ªçc', 'Doanh thu (VNƒê)', 'S·ªë l∆∞·ª£ng b√°n']
            ];

            // L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng (n·∫øu c√≥)
            const courseTable = document.querySelector('#courseRevenueTable tbody');
            if (courseTable) {
                const rows = courseTable.querySelectorAll('tr');
                rows.forEach(row => {
                    const cells = row.querySelectorAll('td');
                    if (cells.length >= 3) {
                        courseData.push([
                            cells[0].textContent.trim(),
                            cells[1].textContent.trim(),
                            cells[2].textContent.trim()
                        ]);
                    }
                });
            }

            const courseSheet = XLSX.utils.aoa_to_sheet(courseData);
            XLSX.utils.book_append_sheet(workbook, courseSheet, 'Kh√≥a h·ªçc');
        }

        // Xu·∫•t b√°o c√°o h·ªçc l·ª±c ra Excel
        async function exportAcademicToExcel(workbook) {
            const academicData = [
                ['B√ÅO C√ÅO H·ªåC L·ª∞C'],
                ['Ng√†y t·∫°o:', new Date().toLocaleDateString('vi-VN')],
                [''],
                ['TH·ªêNG K√ä B√ÄI T·∫¨P'],
                ['T√™n b√†i t·∫≠p', 'L·ªõp h·ªçc', 'T·ªïng b√†i n·ªôp', 'ƒê√£ ch·∫•m ƒëi·ªÉm', 'ƒêi·ªÉm trung b√¨nh']
            ];

            // L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng b√†i t·∫≠p (n·∫øu c√≥)
            const assignmentTable = document.querySelector('#assignmentStatsTable tbody');
            if (assignmentTable) {
                const rows = assignmentTable.querySelectorAll('tr');
                rows.forEach(row => {
                    const cells = row.querySelectorAll('td');
                    if (cells.length >= 5) {
                        academicData.push([
                            cells[0].textContent.trim(),
                            cells[1].textContent.trim(),
                            cells[2].textContent.trim(),
                            cells[3].textContent.trim(),
                            cells[4].textContent.trim()
                        ]);
                    }
                });
            }

            const academicSheet = XLSX.utils.aoa_to_sheet(academicData);
            XLSX.utils.book_append_sheet(workbook, academicSheet, 'H·ªçc l·ª±c');
        }

        // Xu·∫•t b√°o c√°o t√†i kho·∫£n ra Excel
        async function exportAccountsToExcel(workbook) {
            const accountData = [
                ['B√ÅO C√ÅO T√ÄI KHO·∫¢N'],
                ['Ng√†y t·∫°o:', new Date().toLocaleDateString('vi-VN')],
                [''],
                ['TH·ªêNG K√ä T·ªîNG QUAN'],
                ['Lo·∫°i t√†i kho·∫£n', 'S·ªë l∆∞·ª£ng', 'Ph·∫ßn trƒÉm'],
                ['T·ªïng t√†i kho·∫£n', document.getElementById('totalAccounts')?.textContent || '0', '100%'],
                ['H·ªçc vi√™n', document.getElementById('totalStudents')?.textContent || '0', ''],
                ['Gi√°o vi√™n', document.getElementById('totalTeachers')?.textContent || '0', ''],
                ['Qu·∫£n tr·ªã vi√™n', document.getElementById('totalAdmins')?.textContent || '0', ''],
                ['']
            ];

            // Th√™m d·ªØ li·ªáu ƒëƒÉng k√Ω 30 ng√†y (t·ª´ chart)
            accountData.push(['ƒêƒÇNG K√ù 30 NG√ÄY G·∫¶N NH·∫§T']);
            accountData.push(['Ng√†y', 'ƒêƒÉng k√Ω m·ªõi', 'T·ªïng t√≠ch l≈©y']);
            
            // L·∫•y data t·ª´ registrationChart n·∫øu c√≥
            if (registrationChart && registrationChart.data) {
                const labels = registrationChart.data.labels;
                const newRegistrations = registrationChart.data.datasets[0].data;
                const cumulative = registrationChart.data.datasets[1].data;
                
                for (let i = 0; i < labels.length; i++) {
                    accountData.push([
                        labels[i],
                        newRegistrations[i] || 0,
                        cumulative[i] || 0
                    ]);
                }
            } else {
                // Fallback data n·∫øu chart ch∆∞a load
                for (let i = 29; i >= 0; i--) {
                    const date = new Date();
                    date.setDate(date.getDate() - i);
                    const dateStr = date.toLocaleDateString('vi-VN', { day: '2-digit', month: '2-digit' });
                    accountData.push([dateStr, 0, 0]);
                }
            }

            const accountSheet = XLSX.utils.aoa_to_sheet(accountData);
            XLSX.utils.book_append_sheet(workbook, accountSheet, 'T√†i kho·∫£n');
        }

        // H√†m xu·∫•t PDF
        async function exportToPDF() {
            try {
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF();
                
                // C·∫•u h√¨nh font ti·∫øng Vi·ªát (s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh)
                pdf.setFont('helvetica');
                
                // Ti√™u ƒë·ªÅ
                pdf.setFontSize(20);
                pdf.text('B√ÅO C√ÅO TH·ªêNG K√ä', 105, 20, { align: 'center' });
                
                pdf.setFontSize(12);
                pdf.text(`Ng√†y t·∫°o: ${new Date().toLocaleDateString('vi-VN')}`, 20, 35);
                
                const reportType = document.getElementById('reportType').value;
                let yPosition = 50;
                
                if (reportType === 'revenue') {
                    yPosition = await exportRevenueToPDF(pdf, yPosition);
                } else if (reportType === 'academic') {
                    yPosition = await exportAcademicToPDF(pdf, yPosition);
                } else if (reportType === 'accounts') {
                    yPosition = await exportAccountsToPDF(pdf, yPosition);
                }
                
                // Xu·∫•t file
                const fileName = `BaoCao_${reportType}_${new Date().toISOString().split('T')[0]}.pdf`;
                pdf.save(fileName);
                
                // ƒê√≥ng menu
                document.getElementById('exportMenu').classList.add('hidden');
                
                // Th√¥ng b√°o th√†nh c√¥ng
                showSuccessMessage('Xu·∫•t PDF th√†nh c√¥ng!');
            } catch (error) {
                console.error('L·ªói xu·∫•t PDF:', error);
                showError('C√≥ l·ªói x·∫£y ra khi xu·∫•t PDF');
            }
        }

        // Xu·∫•t b√°o c√°o doanh thu ra PDF
        async function exportRevenueToPDF(pdf, yPosition) {
            pdf.setFontSize(16);
            pdf.text('B√ÅNH C√ÅO DOANH THU', 20, yPosition);
            yPosition += 15;
            
            pdf.setFontSize(12);
            pdf.text('T·ªïng quan:', 20, yPosition);
            yPosition += 10;
            
            const totalRevenue = document.getElementById('totalRevenue')?.textContent || '0';
            const totalOrders = document.getElementById('totalOrders')?.textContent || '0';
            
            pdf.text(`- T·ªïng doanh thu: ${totalRevenue}`, 30, yPosition);
            yPosition += 8;
            pdf.text(`- T·ªïng ƒë∆°n h√†ng: ${totalOrders}`, 30, yPosition);
            yPosition += 15;
            
            // Th√™m bi·ªÉu ƒë·ªì (chuy·ªÉn ƒë·ªïi canvas th√†nh h√¨nh ·∫£nh)
            const chartCanvas = document.getElementById('revenueChart');
            if (chartCanvas) {
                try {
                    const chartImage = chartCanvas.toDataURL('image/png');
                    pdf.addImage(chartImage, 'PNG', 20, yPosition, 170, 100);
                    yPosition += 110;
                } catch (error) {
                    console.warn('Kh√¥ng th·ªÉ th√™m bi·ªÉu ƒë·ªì v√†o PDF:', error);
                }
            }
            
            return yPosition;
        }

        // Xu·∫•t b√°o c√°o h·ªçc l·ª±c ra PDF
        async function exportAcademicToPDF(pdf, yPosition) {
            pdf.setFontSize(16);
            pdf.text('B√ÅO C√ÅO H·ªåC L·ª∞C', 20, yPosition);
            yPosition += 15;
            
            pdf.setFontSize(12);
            pdf.text('Th·ªëng k√™ b√†i t·∫≠p v√† h·ªçc l·ª±c h·ªçc vi√™n', 20, yPosition);
            yPosition += 15;
            
            // Th√™m th√¥ng tin c∆° b·∫£n
            pdf.text('- S·ªë l∆∞·ª£ng b√†i t·∫≠p: ' + (Math.floor(Math.random() * 50) + 10), 30, yPosition);
            yPosition += 8;
            pdf.text('- S·ªë l∆∞·ª£ng h·ªçc vi√™n: ' + (Math.floor(Math.random() * 100) + 20), 30, yPosition);
            yPosition += 8;
            pdf.text('- ƒêi·ªÉm trung b√¨nh: ' + (Math.random() * 3 + 7).toFixed(1), 30, yPosition);
            
            return yPosition + 20;
        }

        // Xu·∫•t b√°o c√°o t√†i kho·∫£n ra PDF
        async function exportAccountsToPDF(pdf, yPosition) {
            pdf.setFontSize(16);
            pdf.text('B√ÅO C√ÅO T√ÄI KHO·∫¢N', 20, yPosition);
            yPosition += 15;
            
            // Th·ªëng k√™ t·ªïng quan
            pdf.setFontSize(12);
            pdf.text('TH·ªêNG K√ä T·ªîNG QUAN:', 20, yPosition);
            yPosition += 10;
            
            const totalAccounts = document.getElementById('totalAccounts')?.textContent || '0';
            const totalStudents = document.getElementById('totalStudents')?.textContent || '0';
            const totalTeachers = document.getElementById('totalTeachers')?.textContent || '0';
            const totalAdmins = document.getElementById('totalAdmins')?.textContent || '0';
            
            pdf.text(`- T·ªïng t√†i kho·∫£n: ${totalAccounts} ng∆∞·ªùi`, 30, yPosition);
            yPosition += 8;
            pdf.text(`- H·ªçc vi√™n: ${totalStudents} ng∆∞·ªùi`, 30, yPosition);
            yPosition += 8;
            pdf.text(`- Gi√°o vi√™n: ${totalTeachers} ng∆∞·ªùi`, 30, yPosition);
            yPosition += 8;
            pdf.text(`- Qu·∫£n tr·ªã vi√™n: ${totalAdmins} ng∆∞·ªùi`, 30, yPosition);
            yPosition += 15;
            
            // Th√™m th√¥ng tin v·ªÅ bi·ªÉu ƒë·ªì 30 ng√†y
            pdf.text('BI·ªÇU ƒê·ªí ƒêƒÇNG K√ù 30 NG√ÄY:', 20, yPosition);
            yPosition += 10;
            
            const maxUsers = document.getElementById('chartMaxUsers')?.textContent || '0';
            pdf.text(`- T·ªïng ƒëƒÉng k√Ω 30 ng√†y g·∫ßn nh·∫•t: ${maxUsers} ng∆∞·ªùi`, 30, yPosition);
            yPosition += 8;
            pdf.text('- Bi·ªÉu ƒë·ªì k·∫øt h·ª£p c·ªôt + ƒë∆∞·ªùng th·ªÉ hi·ªán xu h∆∞·ªõng ƒëƒÉng k√Ω', 30, yPosition);
            yPosition += 8;
            pdf.text('- C·ªôt th·ªÉ hi·ªán ƒëƒÉng k√Ω m·ªõi m·ªói ng√†y', 30, yPosition);
            yPosition += 8;
            pdf.text('- ƒê∆∞·ªùng th·ªÉ hi·ªán t·ªïng t√≠ch l≈©y', 30, yPosition);
            yPosition += 15;
            
            // Th√™m chart image n·∫øu c√≥ th·ªÉ
            try {
                const canvas = document.getElementById('registrationChart');
                if (canvas) {
                    const imgData = canvas.toDataURL('image/png');
                    pdf.addImage(imgData, 'PNG', 20, yPosition, 170, 100);
                    yPosition += 110;
                }
            } catch (error) {
                console.warn('Kh√¥ng th·ªÉ th√™m bi·ªÉu ƒë·ªì v√†o PDF:', error);
                pdf.text('(Bi·ªÉu ƒë·ªì ƒëƒÉng k√Ω 30 ng√†y - Xem trong h·ªá th·ªëng)', 30, yPosition);
                yPosition += 15;
            }
            
            return yPosition + 20;
        }

        // H√†m download bi·ªÉu ƒë·ªì d∆∞·ªõi d·∫°ng h√¨nh ·∫£nh
        function downloadChart(chartId) {
            try {
                const canvas = document.getElementById(chartId);
                if (!canvas) {
                    showError(`Kh√¥ng t√¨m th·∫•y bi·ªÉu ƒë·ªì ${chartId}`);
                    return;
                }

                // T·∫°o link download
                const link = document.createElement('a');
                link.download = `BieuDo_${chartId}_${new Date().toISOString().split('T')[0]}.png`;
                link.href = canvas.toDataURL('image/png', 1.0);
                
                // Trigger download
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                showSuccessMessage('T·∫£i xu·ªëng bi·ªÉu ƒë·ªì th√†nh c√¥ng!');
            } catch (error) {
                console.error('L·ªói t·∫£i xu·ªëng bi·ªÉu ƒë·ªì:', error);
                showError('C√≥ l·ªói x·∫£y ra khi t·∫£i xu·ªëng bi·ªÉu ƒë·ªì');
            }
        }

        // H√†m xu·∫•t b·∫£ng doanh thu ra Excel
        function exportRevenueTable() {
            try {
                const reportType = document.getElementById('reportType').value;
                
                if (reportType !== 'revenue') {
                    showError('Ch·ª©c nƒÉng n√†y ch·ªâ kh·∫£ d·ª•ng cho b√°o c√°o doanh thu');
                    return;
                }

                // T·∫°o workbook Excel m·ªõi
                const workbook = XLSX.utils.book_new();
                
                // T·∫°o data cho overview
                const overviewData = [
                    ['B√ÅO C√ÅO DOANH THU CHI TI·∫æT'],
                    ['Ng√†y t·∫°o:', new Date().toLocaleDateString('vi-VN')],
                    [''],
                    ['T·ªîNG QUAN DOANH THU'],
                    ['Ch·ªâ ti√™u', 'Gi√° tr·ªã'],
                    ['T·ªïng doanh thu', document.getElementById('totalRevenue')?.textContent || '0'],
                    ['T·ªïng ƒë∆°n h√†ng', document.getElementById('totalOrders')?.textContent || '0'],
                    ['Doanh thu trung b√¨nh', document.getElementById('averageOrder')?.textContent || '0'],
                    ['']
                ];

                // Th√™m d·ªØ li·ªáu t·ª´ b·∫£ng doanh thu kh√≥a h·ªçc (n·∫øu c√≥)
                const courseTable = document.querySelector('#courseRevenueTable');
                if (courseTable) {
                    overviewData.push(['DOANH THU THEO KH√ìA H·ªåC']);
                    overviewData.push(['STT', 'T√™n kh√≥a h·ªçc', 'Doanh thu', 'S·ªë l∆∞·ª£ng b√°n', 'Ph·∫ßn trƒÉm']);
                    
                    const tbody = courseTable.querySelector('tbody');
                    if (tbody) {
                        const rows = tbody.querySelectorAll('tr');
                        rows.forEach((row, index) => {
                            const cells = row.querySelectorAll('td');
                            if (cells.length >= 4) {
                                overviewData.push([
                                    index + 1,
                                    cells[0].textContent.trim(),
                                    cells[1].textContent.trim(),
                                    cells[2].textContent.trim(),
                                    cells[3].textContent.trim()
                                ]);
                            }
                        });
                    }
                }

                // Th√™m d·ªØ li·ªáu bi·ªÉu ƒë·ªì 30 ng√†y
                overviewData.push(['']);
                overviewData.push(['DOANH THU 30 NG√ÄY G·∫¶N NH·∫§T']);
                overviewData.push(['Ng√†y', 'Doanh thu (VNƒê)', 'S·ªë ƒë∆°n h√†ng', 'Ghi ch√∫']);
                
                // T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p cho 30 ng√†y (trong th·ª±c t·∫ø s·∫Ω l·∫•y t·ª´ database)
                for (let i = 29; i >= 0; i--) {
                    const date = new Date();
                    date.setDate(date.getDate() - i);
                    const dateStr = date.toLocaleDateString('vi-VN');
                    const revenue = Math.random() * 5000000 + 1000000;
                    const orders = Math.floor(Math.random() * 20) + 5;
                    const note = i === 0 ? 'H√¥m nay' : i === 1 ? 'H√¥m qua' : '';
                    
                    overviewData.push([dateStr, Math.round(revenue), orders, note]);
                }

                // T·∫°o worksheet
                const worksheet = XLSX.utils.aoa_to_sheet(overviewData);
                
                // ƒê·ªãnh d·∫°ng ƒë·ªô r·ªông c·ªôt
                const colWidths = [
                    { wch: 15 }, // C·ªôt A
                    { wch: 25 }, // C·ªôt B  
                    { wch: 20 }, // C·ªôt C
                    { wch: 15 }, // C·ªôt D
                    { wch: 12 }  // C·ªôt E
                ];
                worksheet['!cols'] = colWidths;

                // Th√™m worksheet v√†o workbook
                XLSX.utils.book_append_sheet(workbook, worksheet, 'B√°o c√°o doanh thu');

                // Xu·∫•t file
                const fileName = `BaoCaoDoanhThu_${new Date().toISOString().split('T')[0]}.xlsx`;
                XLSX.writeFile(workbook, fileName);
                
                showSuccessMessage('Xu·∫•t b·∫£ng Excel th√†nh c√¥ng!');
            } catch (error) {
                console.error('L·ªói xu·∫•t b·∫£ng Excel:', error);
                showError('C√≥ l·ªói x·∫£y ra khi xu·∫•t b·∫£ng Excel');
            }
        }

        // H√†m t·ªïng qu√°t ƒë·ªÉ download b·∫•t k·ª≥ bi·ªÉu ƒë·ªì n√†o
        function downloadChartGeneric(chartId, fileName = null) {
            try {
                const canvas = document.getElementById(chartId);
                if (!canvas) {
                    showError(`Kh√¥ng t√¨m th·∫•y bi·ªÉu ƒë·ªì ${chartId}`);
                    return;
                }

                // T·∫°o t√™n file n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
                if (!fileName) {
                    const chartTitles = {
                        'revenueChart': 'BieuDoDoanhThu30Ngay',
                        'paymentChart': 'BieuDoPhuongThucThanhToan',
                        'courseChart': 'BieuDoKhoaHoc',
                        'userLevelChart': 'BieuDoCapDo',
                        'koreanLevelChart': 'BieuDoTiengHan',
                        'registrationChart': 'BieuDoDangKy30Ngay_CotVaDuong',
                        'genderChart': 'BieuDoGioiTinh'
                    };
                    fileName = chartTitles[chartId] || `BieuDo_${chartId}`;
                }

                // T·∫°o link download v·ªõi ch·∫•t l∆∞·ª£ng cao
                const link = document.createElement('a');
                link.download = `${fileName}_${new Date().toISOString().split('T')[0]}.png`;
                link.href = canvas.toDataURL('image/png', 1.0);
                
                // Trigger download
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                showSuccessMessage(`T·∫£i xu·ªëng ${fileName} th√†nh c√¥ng!`);
            } catch (error) {
                console.error('L·ªói t·∫£i xu·ªëng bi·ªÉu ƒë·ªì:', error);
                showError('C√≥ l·ªói x·∫£y ra khi t·∫£i xu·ªëng bi·ªÉu ƒë·ªì');
            }
        }

        // H√†m xu·∫•t t·∫•t c·∫£ bi·ªÉu ƒë·ªì trong b√°o c√°o hi·ªán t·∫°i
        function exportAllCharts() {
            try {
                const reportType = document.getElementById('reportType').value;
                let chartIds = [];
                
                switch (reportType) {
                    case 'revenue':
                        chartIds = ['revenueChart', 'paymentChart', 'courseChart'];
                        break;
                    case 'academic':
                        chartIds = ['userLevelChart'];
                        break;
                    case 'accounts':
                        chartIds = ['userLevelChart', 'koreanLevelChart', 'registrationChart', 'genderChart'];
                        break;
                }
                
                // Download t·ª´ng bi·ªÉu ƒë·ªì v·ªõi delay nh·ªè
                chartIds.forEach((chartId, index) => {
                    setTimeout(() => {
                        downloadChartGeneric(chartId);
                    }, index * 500); // Delay 500ms gi·ªØa c√°c l·∫ßn download
                });
                
                if (chartIds.length > 0) {
                    showSuccessMessage(`ƒêang t·∫£i xu·ªëng ${chartIds.length} bi·ªÉu ƒë·ªì...`);
                } else {
                    showError('Kh√¥ng c√≥ bi·ªÉu ƒë·ªì n√†o ƒë·ªÉ t·∫£i xu·ªëng');
                }
            } catch (error) {
                console.error('L·ªói xu·∫•t t·∫•t c·∫£ bi·ªÉu ƒë·ªì:', error);
                showError('C√≥ l·ªói x·∫£y ra khi xu·∫•t bi·ªÉu ƒë·ªì');
            }
        }

        // C√°c h√†m wrapper cho download t·ª´ng bi·ªÉu ƒë·ªì c·ª• th·ªÉ (ƒë·ªÉ d·ªÖ g·ªçi t·ª´ HTML)
        function downloadRevenueChart() {
            downloadChartGeneric('revenueChart', 'BieuDoDoanhThu');
        }

        function downloadPaymentChart() {
            downloadChartGeneric('paymentChart', 'BieuDoPhuongThucThanhToan');
        }

        function downloadCourseChart() {
            downloadChartGeneric('courseChart', 'BieuDoKhoaHoc');
        }

        function downloadUserLevelChart() {
            downloadChartGeneric('userLevelChart', 'BieuDoCapDoNguoiDung');
        }

        function downloadKoreanLevelChart() {
            downloadChartGeneric('koreanLevelChart', 'BieuDoTrinhDoTiengHan');
        }

        function downloadRegistrationChart() {
            downloadChartGeneric('registrationChart', 'BieuDoDangKy30Ngay_CotVaDuong');
        }

        function downloadGenderChart() {
            downloadChartGeneric('genderChart', 'BieuDoGioiTinh');
        }

        // H√†m xu·∫•t b·∫£ng b·∫•t k·ª≥ ra Excel
        function exportTableToExcel(tableId, fileName) {
            try {
                const table = document.getElementById(tableId);
                if (!table) {
                    showError(`Kh√¥ng t√¨m th·∫•y b·∫£ng ${tableId}`);
                    return;
                }

                // T·∫°o workbook t·ª´ b·∫£ng HTML
                const workbook = XLSX.utils.table_to_book(table, { sheet: 'Sheet1' });
                
                // Xu·∫•t file
                const finalFileName = fileName || `Bang_${tableId}_${new Date().toISOString().split('T')[0]}.xlsx`;
                XLSX.writeFile(workbook, finalFileName);
                
                showSuccessMessage(`Xu·∫•t b·∫£ng ${fileName || tableId} th√†nh c√¥ng!`);
            } catch (error) {
                console.error('L·ªói xu·∫•t b·∫£ng:', error);
                showError('C√≥ l·ªói x·∫£y ra khi xu·∫•t b·∫£ng Excel');
            }
        }

        // H√†m hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        function showSuccessMessage(message) {
            // T·∫°o element th√¥ng b√°o
            const notification = document.createElement('div');
            notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center gap-2';
            notification.innerHTML = `
                <i class="fas fa-check-circle"></i>
                <span>${message}</span>
            `;
            
            document.body.appendChild(notification);
            
            // T·ª± ƒë·ªông x√≥a sau 3 gi√¢y
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
    </script>
</body>
</html>

const FAQ = require('../models/FAQ');
const Course = require('../models/Course');
const Class = require('../models/class');
const User = require('../models/User');

class FAQChatbot {
    constructor() {
        this.name = "Korea_AI";
        this.welcomeMessages = [
            "Xin ch√†o! T√¥i l√† Korea_AI - tr·ª£ l√Ω t∆∞ v·∫•n kh√≥a h·ªçc ti·∫øng H√†n c·ªßa b·∫°n! üëã",
            "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Korea_DB! T√¥i s·∫Ω gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c kh√≥a h·ªçc ti·∫øng H√†n üá∞üá∑",
            "Annyeonghaseyo! T√¥i l√† Korea_AI, s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªÅ m·ªçi th√¥ng tin kh√≥a h·ªçc! ‚ú®"
        ];
        
        this.defaultResponses = [
            "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ **gi√° kh√≥a h·ªçc**, **l·ªãch l·ªõp h·ªçc**, **c√°ch n·ªôp b√†i t·∫≠p**, **th√¥ng tin gi·∫£ng vi√™n** hay **c√°ch ch·∫•m ƒëi·ªÉm**! üòä",
            "Hmm, c√¢u h·ªèi n√†y h∆°i kh√≥ hi·ªÉu. H√£y th·ª≠ h·ªèi v·ªÅ **ƒëƒÉng k√Ω l·ªõp h·ªçc**, **assignment**, **submission** ho·∫∑c **progress tracking** nh√©! ü§î",
            "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ h·ªá th·ªëng h·ªçc t·∫≠p **Korea_DB** - n∆°i h·ªçc offline v·ªõi n·ªôp b√†i online. B·∫°n mu·ªën bi·∫øt g√¨ v·ªÅ **classes**, **assignments**, **grading** hay **course enrollment**? üí°"
        ];

        this.greetings = [
            'xin ch√†o', 'ch√†o', 'hello', 'hi', 'annyeong', 'annyeonghaseyo', 
            'ch√†o b·∫°n', 'xin ch√†o b·∫°n', 'korea_ai'
        ];

        this.goodbyes = [
            't·∫°m bi·ªát', 'bye', 'goodbye', 'ch√†o t·∫°m bi·ªát', 'h·∫πn g·∫∑p l·∫°i', 
            'c·∫£m ∆°n', 'thank you', 'thanks'
        ];
    }

    // Chu·∫©n h√≥a text ƒë·ªÉ t√¨m ki·∫øm
    normalizeText(text) {
        // Ki·ªÉm tra n·∫øu text kh√¥ng ph·∫£i l√† string
        if (typeof text !== 'string') {
            return '';
        }
        
        return text
            .toLowerCase()
            .replace(/[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ]/g, 'a')
            .replace(/[√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ]/g, 'e')
            .replace(/[√¨√≠·ªã·ªâƒ©]/g, 'i')
            .replace(/[√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°]/g, 'o')
            .replace(/[√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ]/g, 'u')
            .replace(/[·ª≥√Ω·ªµ·ª∑·ªπ]/g, 'y')
            .replace(/ƒë/g, 'd')
            .replace(/[^a-z0-9\s]/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();
    }

    // Ph√¢n t√≠ch √Ω ƒë·ªãnh c·ªßa c√¢u h·ªèi
    analyzeIntent(message) {
        const normalizedMessage = this.normalizeText(message);
        
        // Ki·ªÉm tra l·ªùi ch√†o
        if (this.greetings.some(greeting => normalizedMessage.includes(greeting))) {
            return { type: 'greeting', confidence: 1.0 };
        }

        // Ki·ªÉm tra l·ªùi t·∫°m bi·ªát
        if (this.goodbyes.some(goodbye => normalizedMessage.includes(goodbye))) {
            return { type: 'goodbye', confidence: 1.0 };
        }

        // Ph√¢n t√≠ch category d·ª±a tr√™n keywords v√† th·ª±c t·∫ø Korea_DB (offline learning v·ªõi online submission)
        const categoryKeywords = {
            'H·ªçc ph√≠': ['h·ªçc ph√≠', 'gi√°', 'ti·ªÅn', 'chi ph√≠', 'ph√≠', 'cost', 'price', 'tr·∫£ g√≥p', 'ho√†n ti·ªÅn', 'gi·∫£m gi√°', 'ƒë√≥ng ti·ªÅn', 'thanh to√°n'],
            'L·ªãch h·ªçc': ['l·ªãch h·ªçc', 'th·ªùi gian', 'bu·ªïi h·ªçc', 'schedule', 'gi·ªù h·ªçc', 'ng√†y h·ªçc', 'ca h·ªçc', 'startdate', 'enddate', 'days'],
            'Gi·∫£ng vi√™n': ['gi·∫£ng vi√™n', 'th·∫ßy', 'c√¥', 'teacher', 'ng∆∞·ªùi d·∫°y', 'instructor', 'fullname', 'role'],
            'Ch·ª©ng ch·ªâ': ['ch·ª©ng ch·ªâ', 'certificate', 'b·∫±ng c·∫•p', 'ho√†n th√†nh', 't·ªët nghi·ªáp', 'topik', 'c·∫•p ƒë·ªô', 'completed'],
            'H·ªó tr·ª£': ['h·ªó tr·ª£', 'gi√∫p ƒë·ª°', 't∆∞ v·∫•n', 'support', 'emergency', 'li√™n h·ªá', 'phone'],
            'H√¨nh th·ª©c h·ªçc': ['offline', 'tr·ª±c ti·∫øp', 't·∫°i l·ªõp', 'h√¨nh th·ª©c', 'c√°ch h·ªçc', 'classroom', 'status'],
            'L·ªõp h·ªçc': ['l·ªõp h·ªçc', 's·ªë l∆∞·ª£ng', 'h·ªçc vi√™n', 'class', 'nh√≥m', 'maxstudents', 'students', 'enrollment'],
            'Tuy·ªÉn sinh': ['tuy·ªÉn sinh', 'ƒëƒÉng k√Ω', 'admission', 'register', 'enrollment', 'pending', 'request', 'dang ky tai khoan', 'tao tai khoan', 'lap tai khoan'],
            'Kh√≥a h·ªçc': ['kh√≥a h·ªçc', 'course', 'curriculum', 'ch∆∞∆°ng tr√¨nh', 'level', 'category', 'duration'],
            'B√†i t·∫≠p': ['b√†i t·∫≠p', 'assignment', 'submission', 'n·ªôp b√†i', 'ch·∫•m ƒëi·ªÉm', 'grade', 'score', 'homework'],
            'H·ªá th·ªëng': ['korea_db', 'h·ªá th·ªëng', 'platform', 'website', 'progress', 'tracking', 'user']
        };

        let bestMatch = { category: null, confidence: 0 };
        
        for (const [category, keywords] of Object.entries(categoryKeywords)) {
            const matches = keywords.filter(keyword => 
                normalizedMessage.includes(this.normalizeText(keyword))
            ).length;
            
            const confidence = matches / keywords.length;
            
            if (confidence > bestMatch.confidence) {
                bestMatch = { category, confidence };
            }
        }

        return { 
            type: 'question', 
            category: bestMatch.category, 
            confidence: bestMatch.confidence 
        };
    }

    // T√¨m ki·∫øm FAQ ph√π h·ª£p v√† truy c·∫≠p database th·ª±c t·∫ø
    async searchFAQ(message, intent) {
        try {
            const normalizedQuery = this.normalizeText(message);
            let faqs = [];
            let realData = null;

            // T√¨m ki·∫øm trong FAQ database tr∆∞·ªõc
            if (intent.category) {
                faqs = await FAQ.find({ 
                    category: intent.category,
                    isActive: true,
                    $or: [
                        { question: { $regex: normalizedQuery, $options: 'i' } },
                        { answer: { $regex: normalizedQuery, $options: 'i' } },
                        { keywords: { $in: [normalizedQuery] } }
                    ]
                }).sort({ priority: -1, viewCount: -1 }).limit(3);
            }

            // N·∫øu kh√¥ng t√¨m th·∫•y FAQ ho·∫∑c c·∫ßn th√¥ng tin th·ª±c t·∫ø, truy c·∫≠p database
            if (faqs.length === 0 || intent.category) {
                realData = await this.getRealDatabaseInfo(message, intent);
            }

            // Fallback: t√¨m ki·∫øm text search n·∫øu ch∆∞a c√≥ k·∫øt qu·∫£
            if (faqs.length === 0 && !realData) {
                faqs = await FAQ.find({
                    $text: { $search: normalizedQuery },
                    isActive: true
                })
                    .sort({ viewCount: -1, priority: -1 })
                    .limit(3);
            }

            return { faqs, realData };
        } catch (error) {
            console.error('Error searching FAQ:', error);
            return { faqs: [], realData: null };
        }
    }

    // L·∫•y th√¥ng tin th·ª±c t·∫ø t·ª´ database
    async getRealDatabaseInfo(message, intent) {
        try {
            // ƒê·∫£m b·∫£o message l√† string
            const normalizedMessage = this.normalizeText(message || '');
            const categories = intent.categories || [intent.category];
            
            for (const category of categories) {
                switch (category) {
                    case 'H·ªçc ph√≠':
                        if (normalizedMessage.includes('gia') || normalizedMessage.includes('price') || normalizedMessage.includes('cost') || normalizedMessage.includes('hoc phi') || normalizedMessage.includes('tien')) {
                            const courses = await Course.find({ status: 'active' })
                                .populate('instructor', 'fullName')
                                .select('title description price duration level category')
                                .limit(5);
                            return { type: 'course_pricing', data: courses };
                        }
                        break;

                    case 'L·ªãch h·ªçc':
                        if (normalizedMessage.includes('lich') || normalizedMessage.includes('schedule') || normalizedMessage.includes('linh hoat')) {
                            const classes = await Class.find({ status: 'active' })
                                .populate('teacher', 'fullName')
                                .populate('course', 'title')
                                .limit(3);
                            return { type: 'class_schedule', data: classes };
                        }
                        break;

                    case 'L·ªõp h·ªçc':
                        if (normalizedMessage.includes('so luong') || normalizedMessage.includes('hoc vien') || normalizedMessage.includes('students')) {
                            const classes = await Class.find({ status: 'active' })
                                .populate('course', 'title')
                                .limit(3);
                            return { type: 'class_capacity', data: classes };
                        }
                        break;

                    case 'Gi·∫£ng vi√™n':
                        if (normalizedMessage.includes('thong tin') || normalizedMessage.includes('giang vien') || normalizedMessage.includes('teacher')) {
                            const teachers = await User.find({ role: 'teacher', isActive: true })
                                .select('fullName koreanLevel profileImage')
                                .limit(3);
                            return { type: 'teachers_info', data: teachers };
                        }
                        break;

                    case 'Kh√≥a h·ªçc':
                        if (normalizedMessage.includes('level') || normalizedMessage.includes('cap do') || normalizedMessage.includes('category')) {
                            const courses = await Course.find({ status: 'active' })
                                .populate('instructor', 'fullName')
                                .limit(5);
                            return { type: 'courses_info', data: courses };
                        }
                        break;

                    case 'Tuy·ªÉn sinh':
                        if (normalizedMessage.includes('dang ky') || normalizedMessage.includes('tai khoan') || normalizedMessage.includes('register') || normalizedMessage.includes('tao tai khoan') || normalizedMessage.includes('lap tai khoan')) {
                            return { type: 'registration_info', data: { loginUrl: 'http://localhost:3996/login' } };
                        }
                        break;
                }
            }

            return null;
        } catch (error) {
            console.error('Error getting real database info:', error);
            return null;
        }
    }

    // T·∫°o response t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø trong database
    generateRealDataResponse(realData) {
        try {
            switch (realData.type) {
                case 'course_pricing':
                    if (realData.data && realData.data.length > 0) {
                        let response = "üí∞ **Th√¥ng tin h·ªçc ph√≠ c√°c kh√≥a h·ªçc hi·ªán t·∫°i:**\n\n";
                        realData.data.forEach((course, index) => {
                            const price = course.price ? course.price.toLocaleString('vi-VN') + ' VND' : 'Li√™n h·ªá ƒë·ªÉ bi·∫øt gi√°';
                            response += `**${index + 1}. ${course.title}**\n`;
                            response += `   üíµ H·ªçc ph√≠: ${price}\n`;
                            if (course.duration) response += `   ‚è±Ô∏è Th·ªùi l∆∞·ª£ng: ${course.duration}\n`;
                            if (course.level) {
                                const levelDisplay = course.level === 'beginner' ? 'S∆° c·∫•p' : 
                                                   course.level === 'intermediate' ? 'Trung c·∫•p' : 'N√¢ng cao';
                                response += `   üìä Tr√¨nh ƒë·ªô: ${levelDisplay}\n`;
                            }
                            if (course.category) response += `   üìö Danh m·ª•c: ${course.category}\n`;
                            response += '\n';
                        });
                        response += "üìû *Li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt v·ªÅ h·ªçc ph√≠ v√† ch∆∞∆°ng tr√¨nh h·ªçc*";
                        return response;
                    }
                    break;

                case 'class_schedule':
                    if (realData.data && realData.data.length > 0) {
                        let response = "üìÖ **L·ªãch h·ªçc c√°c l·ªõp ƒëang ho·∫°t ƒë·ªông:**\n\n";
                        realData.data.forEach((classItem, index) => {
                            response += `**${index + 1}. ${classItem.course?.title || classItem.className}**\n`;
                            response += `   üë®‚Äçüè´ Gi·∫£ng vi√™n: ${classItem.teacher?.fullName || 'Ch∆∞a ph√¢n c√¥ng'}\n`;
                            if (classItem.schedule) response += `   üïê L·ªãch h·ªçc: ${classItem.schedule}\n`;
                            if (classItem.startDate) response += `   üìÜ Ng√†y b·∫Øt ƒë·∫ßu: ${new Date(classItem.startDate).toLocaleDateString('vi-VN')}\n`;
                            response += '\n';
                        });
                        response += "üì≤ *Li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n l·ªãch h·ªçc ph√π h·ª£p*";
                        return response;
                    }
                    break;

                case 'class_capacity':
                    if (realData.data && realData.data.length > 0) {
                        let response = "üë• **Th√¥ng tin sƒ© s·ªë c√°c l·ªõp h·ªçc:**\n\n";
                        realData.data.forEach((classItem, index) => {
                            const currentStudents = classItem.students?.length || 0;
                            response += `**${index + 1}. ${classItem.course?.title || classItem.className}**\n`;
                            response += `   üë• Sƒ© s·ªë hi·ªán t·∫°i: ${currentStudents}/${classItem.maxStudents || 'Kh√¥ng gi·ªõi h·∫°n'} h·ªçc vi√™n\n`;
                            if (classItem.startDate) response += `   üìÖ B·∫Øt ƒë·∫ßu: ${new Date(classItem.startDate).toLocaleDateString('vi-VN')}\n`;
                            response += '\n';
                        });
                        response += "üéØ *L·ªõp h·ªçc nh·ªè ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng gi·∫£ng d·∫°y t·ªët nh·∫•t*";
                        return response;
                    }
                    break;

                case 'teachers_info':
                    if (realData.data && realData.data.length > 0) {
                        let response = "üë®‚Äçüè´ **Th√¥ng tin ƒë·ªôi ng≈© gi·∫£ng vi√™n:**\n\n";
                        realData.data.forEach((teacher, index) => {
                            response += `**${index + 1}. ${teacher.fullName}**\n`;
                            if (teacher.koreanLevel) response += `   üèÜ Tr√¨nh ƒë·ªô ti·∫øng H√†n: ${teacher.koreanLevel}\n`;
                            response += `   ‚úÖ Gi·∫£ng vi√™n ch√≠nh th·ª©c\n`;
                            response += '\n';
                        });
                        response += "üåü *ƒê·ªôi ng≈© gi·∫£ng vi√™n gi√†u kinh nghi·ªám v√† nhi·ªát t√¨nh*";
                        return response;
                    }
                    break;

                case 'courses_info':
                    if (realData.data && realData.data.length > 0) {
                        let response = "üìö **Danh s√°ch c√°c kh√≥a h·ªçc hi·ªán c√≥:**\n\n";
                        realData.data.forEach((course, index) => {
                            response += `**${index + 1}. ${course.title}**\n`;
                            if (course.description) response += `   üìù ${course.description.substring(0, 80)}...\n`;
                            if (course.level) response += `   üìä Tr√¨nh ƒë·ªô: ${course.level}\n`;
                            if (course.instructor) response += `   üë®‚Äçüè´ Gi·∫£ng vi√™n: ${course.instructor.fullName}\n`;
                            response += '\n';
                        });
                        response += "üéì *ƒêƒÉng k√Ω ngay ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh h·ªçc ti·∫øng H√†n*";
                        return response;
                    }
                    break;

                case 'registration_info':
                    if (realData.data && realData.data.loginUrl) {
                        let response = "üéì **ƒêƒÉng k√Ω t√†i kho·∫£n h·ªçc ti·∫øng H√†n t·∫°i Korea_DB:**\n\n";
                        response += "‚úÖ **C√°ch ƒëƒÉng k√Ω:**\n";
                        response += "1. Truy c·∫≠p link ƒëƒÉng k√Ω: " + realData.data.loginUrl + "\n";
                        response += "2. Ch·ªçn 'ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi'\n";
                        response += "3. ƒêi·ªÅn th√¥ng tin c√° nh√¢n\n";
                        response += "4. X√°c nh·∫≠n email\n";
                        response += "5. B·∫Øt ƒë·∫ßu h·ªçc ngay!\n\n";
                        response += "üåü **L·ª£i √≠ch khi ƒëƒÉng k√Ω:**\n";
                        response += "‚Ä¢ Truy c·∫≠p ƒë·∫ßy ƒë·ªß c√°c kh√≥a h·ªçc ti·∫øng H√†n\n";
                        response += "‚Ä¢ H·ªçc offline t·∫°i l·ªõp v·ªõi gi·∫£ng vi√™n chuy√™n nghi·ªáp\n";
                        response += "‚Ä¢ N·ªôp b√†i t·∫≠p v√† theo d√µi ti·∫øn ƒë·ªô online\n";
                        response += "‚Ä¢ H·ªó tr·ª£ 24/7 t·ª´ ƒë·ªôi ng≈© t∆∞ v·∫•n\n";
                        response += "‚Ä¢ Ch·ª©ng ch·ªâ ho√†n th√†nh kh√≥a h·ªçc\n\n";
                        response += "üìû *Li√™n h·ªá ngay ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n mi·ªÖn ph√≠!*";
                        return response;
                    }
                    break;
            }
            return null;
        } catch (error) {
            console.error('Error generating real data response:', error);
            return null;
        }
    }

    // T·∫°o response ch√≠nh
    generateResponse(faqs, intent, originalMessage, realData = null) {
        // ƒê·∫£m b·∫£o faqs l√† array
        faqs = Array.isArray(faqs) ? faqs : [];
        
        if (intent.type === 'greeting') {
            const welcome = this.welcomeMessages[Math.floor(Math.random() * this.welcomeMessages.length)];
            return {
                type: 'greeting',
                message: welcome,
                suggestions: this.generateSuggestions([])
            };
        }

        if (intent.type === 'goodbye') {
            return {
                type: 'goodbye',
                message: "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• t∆∞ v·∫•n! Ch√∫c b·∫°n h·ªçc ti·∫øng H√†n vui v·∫ª! ÏïàÎÖïÌûà Í∞ÄÏÑ∏Ïöî! üëã‚ú®",
                suggestions: ["Gi·ªõi thi·ªáu v·ªÅ Korea_DB", "C√°c kh√≥a h·ªçc hi·ªán c√≥", "C√°ch ƒëƒÉng k√Ω h·ªçc"]
            };
        }

        // ∆Øu ti√™n th√¥ng tin th·ª±c t·∫ø t·ª´ database
        if (realData) {
            const realResponse = this.generateRealDataResponse(realData);
            if (realResponse) {
                return {
                    type: 'database_answer',
                    message: realResponse,
                    suggestions: this.generateSuggestions(faqs),
                    source: 'real_database'
                };
            }
        }

        if (faqs.length === 0) {
            const defaultResponse = this.defaultResponses[Math.floor(Math.random() * this.defaultResponses.length)];
            return {
                type: 'default',
                message: defaultResponse,
                suggestions: this.generateSuggestions([])
            };
        }

        // T·∫°o response t·ª´ FAQs th√¥ng th∆∞·ªùng
        let response = "ü§ñ **Korea_AI tr·∫£ l·ªùi:**\n\n";
        
        if (faqs.length === 1) {
            // TƒÉng view count
            faqs[0].incrementViewCount();
            response += `**Q: ${faqs[0].question}**\n\n`;
            response += `A: ${faqs[0].answer}\n\n`;
            response += `üìÇ *Danh m·ª•c: ${faqs[0].category}*`;
        } else {
            response += "T√¥i t√¨m th·∫•y m·ªôt s·ªë th√¥ng tin c√≥ th·ªÉ h·ªØu √≠ch:\n\n";
            faqs.forEach((faq, index) => {
                faq.incrementViewCount();
                response += `**${index + 1}. ${faq.question}**\n`;
                response += `${faq.answer.substring(0, 100)}...\n\n`;
            });
            response += "*B·∫°n mu·ªën bi·∫øt chi ti·∫øt c√¢u n√†o? H√£y h·ªèi c·ª• th·ªÉ h∆°n nh√©!*";
        }

        const suggestions = this.generateSuggestions(faqs);

        return {
            type: 'answer',
            message: response,
            suggestions: suggestions,
            faqs: faqs.map(faq => ({
                id: faq._id,
                question: faq.question,
                answer: faq.answer,
                category: faq.category
            }))
        };
    }

    // T·∫°o g·ª£i √Ω c√¢u h·ªèi d·ª±a tr√™n h·ªá th·ªëng Korea_DB th·ª±c t·∫ø
    generateSuggestions(faqs) {
        const suggestions = [
            "üí∞ Gi√° c√°c kh√≥a h·ªçc t·ª´ bao nhi√™u?",
            "üìÖ L·ªãch h·ªçc c√°c l·ªõp trong tu·∫ßn?",
            "üìù L√†m sao ƒë·ªÉ n·ªôp b√†i assignment?",
            "üë®‚Äçüè´ Th√¥ng tin v·ªÅ gi·∫£ng vi√™n l·ªõp?",
            "üìä H·ªá th·ªëng ch·∫•m ƒëi·ªÉm nh∆∞ th·∫ø n√†o?",
            "üéì C√°ch ƒëƒÉng k√Ω tham gia l·ªõp h·ªçc?",
            "üë• C√≥ bao nhi√™u h·ªçc vi√™n trong l·ªõp?",
            "‚è∞ Th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c kh√≥a?",
            "üìã Assignment c√≥ deadline kh√¥ng?",
            "üîç C√°ch theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p?",
            "üÜï Mu·ªën ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi?",
            "üí≥ C√≥ th·ªÉ tr·∫£ g√≥p h·ªçc ph√≠ kh√¥ng?"
        ];

        // L·∫•y random 4 suggestions
        const shuffled = suggestions.sort(() => 0.5 - Math.random());
        return shuffled.slice(0, 4);
    }

    // Main method x·ª≠ l√Ω message
    async handleMessage(message) {
        try {
            // ƒê·∫£m b·∫£o message l√† string
            if (typeof message !== 'string' || !message.trim()) {
                return {
                    type: 'error',
                    message: "Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n! ü§î",
                    suggestions: this.generateSuggestions([])
                };
            }

            // Ph√¢n t√≠ch intent
            const intent = this.analyzeIntent(message);
            
            // T√¨m ki·∫øm FAQ v√† th√¥ng tin th·ª±c t·∫ø
            const { faqs, realData } = await this.searchFAQ(message, intent);
            
            // T·∫°o response
            const response = this.generateResponse(faqs, intent, message, realData);
            
            return response;
        } catch (error) {
            console.error('Error handling message:', error);
            return {
                type: 'error',
                message: "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau! üòÖ",
                suggestions: this.generateSuggestions([])
            };
        }
    }

    // Method ƒë·ªÉ l·∫•y FAQ theo category
    async getFAQsByCategory(category) {
        try {
            return await FAQ.find({ 
                category: category, 
                isActive: true 
            }).sort({ priority: -1, viewCount: -1 });
        } catch (error) {
            console.error('Error getting FAQs by category:', error);
            return [];
        }
    }

    // Method ƒë·ªÉ l·∫•y FAQ ph·ªï bi·∫øn
    async getPopularFAQs(limit = 5) {
        try {
            return await FAQ.find({ 
                isActive: true 
            }).sort({ viewCount: -1, priority: -1 }).limit(limit);
        } catch (error) {
            console.error('Error getting popular FAQs:', error);
            return [];
        }
    }
}

module.exports = new FAQChatbot();

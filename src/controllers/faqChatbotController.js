const FAQ = require('../models/FAQ');
const faqData = require('../data/faqData.json');

class FAQChatbot {
    constructor() {
        this.name = "T∆∞ v·∫•n AI";
        this.welcomeMessages = [
            "Xin ch√†o! T√¥i l√† T∆∞ v·∫•n AI - tr·ª£ l√Ω t∆∞ v·∫•n kh√≥a h·ªçc ti·∫øng H√†n c·ªßa b·∫°n! üëã",
            "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Korea_DB! T√¥i s·∫Ω gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c kh√≥a h·ªçc ti·∫øng H√†n üá∞üá∑",
            "Annyeonghaseyo! T√¥i l√† T∆∞ v·∫•n AI, s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªÅ m·ªçi th√¥ng tin kh√≥a h·ªçc! ‚ú®"
        ];
        
        this.defaultResponse = "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ph√π h·ª£p trong h·ªá th·ªëng FAQ. B·∫°n c√≥ th·ªÉ h·ªèi c√¢u h·ªèi kh√°c ho·∫∑c li√™n h·ªá t∆∞ v·∫•n vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët h∆°n! üòä";

        this.greetings = [
            'xin ch√†o', 'ch√†o', 'hello', 'hi', 'annyeong', 'annyeonghaseyo', 
            'ch√†o b·∫°n', 'xin ch√†o b·∫°n', 'korea_ai'
        ];

        this.goodbyes = [
            't·∫°m bi·ªát', 'bye', 'goodbye', 'ch√†o t·∫°m bi·ªát', 'h·∫πn g·∫∑p l·∫°i', 
            'c·∫£m ∆°n', 'thank you', 'thanks'
        ];
    }

    // Chu·∫©n h√≥a text ƒë·ªÉ t√¨m ki·∫øm
    normalizeText(text) {
        if (typeof text !== 'string') {
            return '';
        }
        
        return text
            .toLowerCase()
            .replace(/[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ]/g, 'a')
            .replace(/[√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ]/g, 'e')
            .replace(/[√¨√≠·ªã·ªâƒ©]/g, 'i')
            .replace(/[√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°]/g, 'o')
            .replace(/[√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ]/g, 'u')
            .replace(/[·ª≥√Ω·ªµ·ª∑·ªπ]/g, 'y')
            .replace(/ƒë/g, 'd')
            .replace(/[^a-z0-9\s]/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();
    }

    // Ki·ªÉm tra lo·∫°i tin nh·∫Øn (l·ªùi ch√†o, t·∫°m bi·ªát, c√¢u h·ªèi) - c·∫£i thi·ªán edge case handling
    detectMessageType(message) {
        const normalizedMessage = this.normalizeText(message);
        
        // Ki·ªÉm tra input tr·ªëng ho·∫∑c ch·ªâ c√≥ kho·∫£ng tr·∫Øng
        if (!normalizedMessage || normalizedMessage.trim() === '') {
            return 'empty';
        }
        
        // Ki·ªÉm tra input ch·ªâ l√† s·ªë
        if (/^\d+$/.test(normalizedMessage)) {
            return 'number_only';
        }
        
        // Ki·ªÉm tra input ch·ªâ l√† k√Ω t·ª± ƒë·∫∑c bi·ªát
        if (/^[^\w\s]+$/.test(normalizedMessage)) {
            return 'special_chars_only';
        }
        
        // Ki·ªÉm tra input l√† chu·ªói random kh√¥ng c√≥ nghƒ©a
        const words = normalizedMessage.split(' ').filter(w => w.length > 0);
        const meaningfulWords = words.filter(word => {
            // Ki·ªÉm tra t·ª´ c√≥ √≠t nh·∫•t 1 nguy√™n √¢m ti·∫øng Vi·ªát
            return /[aeiou]/.test(word) && word.length > 1;
        });
        
        if (words.length > 0 && meaningfulWords.length / words.length < 0.3) {
            return 'random_text';
        }
        
        // Ki·ªÉm tra l·ªùi ch√†o (ch·ªâ nh·ªØng t·ª´ r√µ r√†ng l√† l·ªùi ch√†o)
        const isGreeting = this.greetings.some(greeting => {
            const normalizedGreeting = this.normalizeText(greeting);
            return normalizedMessage === normalizedGreeting || 
                   (normalizedMessage.length < 20 && normalizedMessage.includes(normalizedGreeting));
        });
        
        if (isGreeting && normalizedMessage.length < 20) {
            return 'greeting';
        }

        // Ki·ªÉm tra l·ªùi t·∫°m bi·ªát (ch·ªâ nh·ªØng t·ª´ r√µ r√†ng l√† t·∫°m bi·ªát)
        const isGoodbye = this.goodbyes.some(goodbye => {
            const normalizedGoodbye = this.normalizeText(goodbye);
            return normalizedMessage === normalizedGoodbye || 
                   (normalizedMessage.length < 20 && normalizedMessage.includes(normalizedGoodbye));
        });
        
        if (isGoodbye && normalizedMessage.length < 20) {
            return 'goodbye';
        }

        return 'question';
    }

    // T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa 2 chu·ªói - c·∫£i thi·ªán cho 5 c√¢u h·ªèi c·ª• th·ªÉ
    calculateSimilarity(str1, str2) {
        const s1 = this.normalizeText(str1);
        const s2 = this.normalizeText(str2);
        
        if (s1 === s2) return 1.0;
        
        // Ki·ªÉm tra exact match cho c√°c c√¢u h·ªèi quan tr·ªçng
        const exactMatches = [
            { pattern: /gia.*khoa.*hoc.*bao.*nhieu/, score: 1.0 },
            { pattern: /tra.*gop.*hoc.*phi/, score: 1.0 },
            { pattern: /mot.*lop.*hoc.*bao.*nhieu.*hoc.*vien/, score: 1.0 },
            { pattern: /chinh.*sach.*hoan.*tien/, score: 1.0 },
            { pattern: /chung.*chi.*hoan.*thanh/, score: 1.0 }
        ];

        for (const match of exactMatches) {
            if (match.pattern.test(s1) && match.pattern.test(s2)) {
                return match.score;
            }
        }
        
        // Ki·ªÉm tra ch·ª©a t·ª´ kh√≥a
        const words1 = s1.split(' ').filter(w => w.length > 1);
        const words2 = s2.split(' ').filter(w => w.length > 1);
        
        let matchingWords = 0;
        let exactWords = 0;
        
        words1.forEach(word1 => {
            words2.forEach(word2 => {
                if (word1 === word2) {
                    exactWords++;
                } else if (word2.includes(word1) || word1.includes(word2)) {
                    matchingWords++;
                }
            });
        });
        
        // T√≠nh ƒëi·ªÉm d·ª±a tr√™n exact matches v√† partial matches
        const exactScore = words1.length > 0 ? (exactWords * 2.0) / words1.length : 0;
        const partialScore = words1.length > 0 ? matchingWords / words1.length : 0;
        const keywordScore = Math.min(1.0, exactScore + partialScore * 0.5);
        
        // Ki·ªÉm tra ch·ª©a chu·ªói con
        const substringScore = s2.includes(s1) || s1.includes(s2) ? 0.7 : 0;
        
        // Ki·ªÉm tra c√°c t·ª´ kh√≥a ƒë·∫∑c bi·ªát
        const specialKeywords = this.checkSpecialKeywords(s1, s2);
        
        return Math.max(keywordScore, substringScore, specialKeywords);
    }

    // Ki·ªÉm tra c√°c t·ª´ kh√≥a ƒë·∫∑c bi·ªát - c·∫£i thi·ªán v√† m·ªü r·ªông
    checkSpecialKeywords(userQuery, faqText) {
        const specialMappings = {
            // Gi√°/h·ªçc ph√≠ - m·ªü r·ªông t·ª´ kh√≥a
            'gia': ['hoc phi', 'chi phi', 'tien', 'phi', 'bao nhieu', 'gia ca', 'gia tien', 'muc phi', 'phi hoc', 'bang gia'],
            'hoc phi': ['gia', 'chi phi', 'tien', 'phi', 'bao nhieu', 'gia ca', 'gia tien', 'muc phi'],
            'bao nhieu': ['gia', 'phi', 'chi phi', 'hoc phi', 'so luong', 'si so', 'gia tien', 'muc phi'],
            'chi phi': ['gia', 'hoc phi', 'tien', 'phi', 'bao nhieu', 'gia ca'],
            'phi hoc': ['gia', 'hoc phi', 'chi phi', 'tien', 'bao nhieu'],
            'gia ca': ['gia', 'hoc phi', 'chi phi', 'phi', 'bao nhieu'],
            'gia tien': ['gia', 'hoc phi', 'chi phi', 'phi', 'bao nhieu'],
            'muc phi': ['gia', 'hoc phi', 'chi phi', 'phi', 'bao nhieu'],
            'bang gia': ['gia', 'hoc phi', 'chi phi', 'phi', 'bao nhieu'],
            
            // Tr·∫£ g√≥p - m·ªü r·ªông t·ª´ kh√≥a
            'tra gop': ['chia dot', 'thanh toan', 'gop phan', 'phan ky', 'tra tien', 'chia nho', 'phan dot', 'tra tu tung phan'],
            'gop': ['tra gop', 'chia dot', 'thanh toan', 'phan ky', 'chia nho'],
            'chia dot': ['tra gop', 'gop', 'thanh toan', 'phan ky', 'phan dot'],
            'thanh toan': ['tra gop', 'gop', 'chia dot', 'phan ky'],
            'phan ky': ['tra gop', 'gop', 'chia dot', 'thanh toan', 'phan dot'],
            'chia nho': ['tra gop', 'gop', 'chia dot', 'phan dot'],
            'phan dot': ['tra gop', 'chia dot', 'phan ky', 'chia nho'],
            
            // Sƒ© s·ªë l·ªõp - m·ªü r·ªông t·ª´ kh√≥a
            'si so': ['bao nhieu hoc vien', 'so luong', 'lop hoc', 'hoc vien', 'so nguoi', 'quy mo', 'bao nhieu nguoi'],
            'lop hoc': ['si so', 'hoc vien', 'so luong', 'so nguoi', 'quy mo'],
            'hoc vien': ['si so', 'lop hoc', 'so luong', 'so nguoi'],
            'so luong': ['si so', 'lop hoc', 'hoc vien', 'so nguoi', 'bao nhieu'],
            'so nguoi': ['si so', 'lop hoc', 'hoc vien', 'so luong', 'bao nhieu'],
            'quy mo': ['si so', 'lop hoc', 'so luong', 'so nguoi'],
            'bao nhieu nguoi': ['si so', 'so luong', 'so nguoi', 'lop hoc'],
            'bao nhieu hoc vien': ['si so', 'so luong', 'hoc vien', 'lop hoc'],
            
            // Ho√†n ti·ªÅn - m·ªü r·ªông t·ª´ kh√≥a
            'hoan tien': ['hoan phi', 'chinh sach', 'huy hoc', 'tra lai', 'hoan lai', 'chinh sach hoan tien'],
            'chinh sach': ['hoan tien', 'hoan phi', 'quy dinh', 'hoan lai'],
            'hoan phi': ['hoan tien', 'chinh sach', 'huy hoc', 'tra lai', 'hoan lai'],
            'huy hoc': ['hoan tien', 'hoan phi', 'chinh sach', 'tra lai'],
            'tra lai': ['hoan tien', 'hoan phi', 'huy hoc', 'hoan lai'],
            'hoan lai': ['hoan tien', 'hoan phi', 'tra lai', 'chinh sach'],
            
            // Ch·ª©ng ch·ªâ - m·ªü r·ªông t·ª´ kh√≥a
            'chung chi': ['hoan thanh', 'bang cap', 'certificate', 'cong nhan', 'giay chung nhan', 'bang chung nhan'],
            'hoan thanh': ['chung chi', 'ket thuc', 'xong khoa hoc', 'bang cap', 'certificate'],
            'bang cap': ['chung chi', 'hoan thanh', 'certificate', 'cong nhan', 'giay chung nhan'],
            'certificate': ['chung chi', 'hoan thanh', 'bang cap', 'cong nhan'],
            'cong nhan': ['chung chi', 'certificate', 'bang cap', 'chinh thuc'],
            'giay chung nhan': ['chung chi', 'bang cap', 'certificate', 'bang chung nhan'],
            'bang chung nhan': ['chung chi', 'bang cap', 'giay chung nhan'],
            'chinh thuc': ['cong nhan', 'chung chi', 'certificate'],
            
            // L·ªãch h·ªçc - th√™m m·ªõi
            'lich hoc': ['thoi gian', 'lich', 'hoc', 'thoi khoa bieu', 'khung gio'],
            'thoi gian': ['lich hoc', 'lich', 'thoi khoa bieu', 'khung gio'],
            'khung gio': ['lich hoc', 'thoi gian', 'lich', 'thoi khoa bieu'],
            'thoi khoa bieu': ['lich hoc', 'thoi gian', 'lich', 'khung gio'],
            'cuoi tuan': ['lich hoc', 'thoi gian', 'lich', 'chu nhat', 'thu bay'],
            
            // Kh√≥a h·ªçc - th√™m m·ªõi
            'khoa hoc': ['lop hoc', 'hoc', 'course', 'chuong trinh'],
            'chuong trinh': ['khoa hoc', 'lop hoc', 'course'],
            'course': ['khoa hoc', 'chuong trinh', 'lop hoc'],
            'thoi luong': ['khoa hoc', 'bao lau', 'thoi gian', 'keo dai'],
            'bao lau': ['thoi luong', 'khoa hoc', 'thoi gian', 'keo dai']
        };

        let score = 0;
        const bonusMultiplier = 1.2; // TƒÉng tr·ªçng s·ªë cho keyword matching
        
        Object.keys(specialMappings).forEach(key => {
            if (userQuery.includes(key)) {
                specialMappings[key].forEach(synonym => {
                    if (faqText.includes(synonym)) {
                        score = Math.max(score, 0.95 * bonusMultiplier); // TƒÉng ƒëi·ªÉm v√† nh√¢n v·ªõi bonus
                    }
                });
            }
        });

        return Math.min(score, 1.0); // ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° 1.0
    }

    // T√¨m FAQ ph√π h·ª£p nh·∫•t
    async findBestMatchingFAQ(userMessage) {
        try {
            console.log('üîç Searching for FAQ matching:', userMessage);
            
            let allFAQs = [];
            
            // Th·ª≠ l·∫•y t·ª´ database tr∆∞·ªõc
            try {
                allFAQs = await FAQ.find({ isActive: true });
                console.log('üìö Found FAQs from database:', allFAQs.length);
            } catch (dbError) {
                console.log('‚ö†Ô∏è Database not available, using JSON data');
                // S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ JSON file
                allFAQs = faqData.map(faq => ({
                    ...faq,
                    _id: faq.question,
                    isActive: true,
                    save: async function() {
                        console.log('Mock save called for JSON FAQ');
                        return Promise.resolve();
                    }
                }));
                console.log('üìö Found FAQs from JSON:', allFAQs.length);
            }
            
            if (allFAQs.length === 0) {
                return null;
            }

            let bestMatch = null;
            let bestScore = 0;
            const minScore = 0.12; // Gi·∫£m threshold ƒë·ªÉ nh·∫≠n di·ªán ƒë∆∞·ª£c nhi·ªÅu c√¢u h·ªèi h∆°n

            // So s√°nh v·ªõi t·ª´ng FAQ
            allFAQs.forEach(faq => {
                // T√≠nh ƒëi·ªÉm v·ªõi question
                const questionScore = this.calculateSimilarity(userMessage, faq.question);
                
                // T√≠nh ƒëi·ªÉm v·ªõi keywords (n·∫øu c√≥)
                let keywordScore = 0;
                if (faq.keywords && faq.keywords.length > 0) {
                    faq.keywords.forEach(keyword => {
                        const score = this.calculateSimilarity(userMessage, keyword);
                        keywordScore = Math.max(keywordScore, score);
                    });
                }

                // T√≠nh ƒëi·ªÉm v·ªõi answer (tr·ªçng s·ªë th·∫•p h∆°n)
                const answerScore = this.calculateSimilarity(userMessage, faq.answer) * 0.4;
                
                // ƒêi·ªÉm t·ªïng v·ªõi c·∫£i thi·ªán tr·ªçng s·ªë
                let totalScore = Math.max(
                    questionScore * 1.2,  // TƒÉng tr·ªçng s·ªë cho question matching
                    keywordScore * 1.0,   // Gi·ªØ nguy√™n tr·ªçng s·ªë cho keyword
                    answerScore * 0.8     // TƒÉng nh·∫π tr·ªçng s·ªë cho answer matching
                );

                // Bonus cho priority cao
                if (faq.priority && faq.priority >= 4) {
                    totalScore *= 1.15;  // TƒÉng bonus cho priority cao
                }
                
                // Bonus cho FAQ c√≥ nhi·ªÅu t·ª´ kh√≥a tr√πng kh·ªõp
                const userWords = this.normalizeText(userMessage).split(' ').filter(w => w.length > 2);
                const faqWords = this.normalizeText(faq.question).split(' ').filter(w => w.length > 2);
                const commonWords = userWords.filter(word => faqWords.includes(word));
                
                if (commonWords.length > 0) {
                    const wordMatchBonus = (commonWords.length / Math.max(userWords.length, 1)) * 0.2;
                    totalScore += wordMatchBonus;
                }
                
                console.log(`üìä FAQ "${faq.question.substring(0, 50)}..." - Score: ${totalScore.toFixed(3)} (Q:${questionScore.toFixed(2)}, K:${keywordScore.toFixed(2)}, A:${answerScore.toFixed(2)})`);
                
                if (totalScore > bestScore && totalScore >= minScore) {
                    bestMatch = faq;
                    bestScore = totalScore;
                }
            });

            if (bestMatch) {
                console.log(`‚úÖ Best match found with score ${bestScore.toFixed(3)}:`, bestMatch.question);
                // TƒÉng view count (ch·ªâ cho database, JSON th√¨ mock)
                if (bestMatch.viewCount !== undefined) {
                    bestMatch.viewCount += 1;
                    await bestMatch.save();
                }
            } else {
                console.log('‚ùå No suitable FAQ match found');
            }

            return bestMatch;
        } catch (error) {
            console.error('‚ùå Error in findBestMatchingFAQ:', error);
            return null;
        }
    }

    // T·∫°o response t·ª´ FAQ match
    async generateFAQResponse(faq) {
        if (!faq) {
            return {
                type: 'no_match',
                message: this.defaultResponse,
                suggestions: await this.generateSuggestions()
            };
        }

        return {
            type: 'faq_answer',
            message: `**${faq.question}**\n\n${faq.answer}`,
            category: faq.category,
            faqId: faq._id,
            suggestions: await this.generateSuggestions(faq._id)
        };
    }

    // T·∫°o g·ª£i √Ω c√¢u h·ªèi t·ª´ FAQ.question
    async generateSuggestions(excludeFaqId = null) {
        try {
            let randomFAQs = [];
            
            // Th·ª≠ l·∫•y t·ª´ database tr∆∞·ªõc
            try {
                const query = excludeFaqId ? 
                    { isActive: true, _id: { $ne: excludeFaqId } } : 
                    { isActive: true };
                
                randomFAQs = await FAQ.aggregate([
                    { $match: query },
                    { $sample: { size: 10 } },
                    { $project: { question: 1 } }
                ]);
                console.log('üìã Generated suggestions from database:', randomFAQs.length);
            } catch (dbError) {
                console.log('‚ö†Ô∏è Using JSON data for suggestions');
                // S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ JSON
                const filteredFAQs = faqData.filter(faq => faq.question !== excludeFaqId);
                randomFAQs = filteredFAQs
                    .sort(() => 0.5 - Math.random())
                    .slice(0, 10)
                    .map(faq => ({ question: faq.question }));
                console.log('üìã Generated suggestions from JSON:', randomFAQs.length);
            }
            
            if (randomFAQs.length === 0) {
                // Fallback n·∫øu kh√¥ng c√≥ FAQ n√†o
                return [
                    "üí∞ Gi√° c√°c kh√≥a h·ªçc ti·∫øng H√†n bao nhi√™u?",
                    "üìÖ L·ªãch h·ªçc nh∆∞ th·∫ø n√†o?",
                    "üë®‚Äçüè´ Th√¥ng tin gi·∫£ng vi√™n?",
                    "üéì C√°ch ƒëƒÉng k√Ω kh√≥a h·ªçc?"
                ];
            }
            
            // L·∫•y 4 suggestions ng·∫´u nhi√™n t·ª´ danh s√°ch
            const shuffled = randomFAQs.sort(() => 0.5 - Math.random());
            return shuffled.slice(0, 4).map(faq => faq.question);
            
        } catch (error) {
            console.error('‚ùå Error generating suggestions:', error);
            // Fallback suggestions n·∫øu c√≥ l·ªói
            return [
                "üí∞ Gi√° c√°c kh√≥a h·ªçc ti·∫øng H√†n bao nhi√™u?",
                "üìÖ L·ªãch h·ªçc nh∆∞ th·∫ø n√†o?", 
                "üë®‚Äçüè´ Th√¥ng tin gi·∫£ng vi√™n?",
                "üéì C√°ch ƒëƒÉng k√Ω kh√≥a h·ªçc?"
            ];
        }
    }

    // Main method x·ª≠ l√Ω message - c·∫£i thi·ªán edge case handling
    async handleMessage(message, context = null) {
        try {
            console.log('üí¨ Handling message:', message);
            
            if (!message || message.trim() === '') {
                return {
                    success: false,
                    error: 'Message is required'
                };
            }

            const messageType = this.detectMessageType(message);
            console.log('üìã Message type:', messageType);

            // X·ª≠ l√Ω c√°c edge cases
            if (messageType === 'empty') {
                return {
                    success: true,
                    data: {
                        type: 'edge_case',
                        message: "B·∫°n ch∆∞a nh·∫≠p n·ªôi dung c√¢u h·ªèi. Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n! ü§î",
                        suggestions: await this.generateSuggestions()
                    }
                };
            }

            if (messageType === 'number_only') {
                return {
                    success: true,
                    data: {
                        type: 'edge_case',
                        message: "T√¥i th·∫•y b·∫°n ch·ªâ nh·∫≠p s·ªë. B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi c·ª• th·ªÉ v·ªÅ kh√≥a h·ªçc ti·∫øng H√†n ƒë·ªÉ t√¥i h·ªó tr·ª£ t·ªët h∆°n! üìä",
                        suggestions: await this.generateSuggestions()
                    }
                };
            }

            if (messageType === 'special_chars_only') {
                return {
                    success: true,
                    data: {
                        type: 'edge_case',
                        message: "T√¥i ch·ªâ th·∫•y c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát. Vui l√≤ng nh·∫≠p c√¢u h·ªèi b·∫±ng ti·∫øng Vi·ªát ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n! ‚ú®",
                        suggestions: await this.generateSuggestions()
                    }
                };
            }

            if (messageType === 'random_text') {
                return {
                    success: true,
                    data: {
                        type: 'edge_case',
                        message: "T√¥i kh√¥ng hi·ªÉu n·ªôi dung b·∫°n v·ª´a nh·∫≠p. B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi r√µ r√†ng v·ªÅ kh√≥a h·ªçc ti·∫øng H√†n kh√¥ng? ü§∑‚Äç‚ôÄÔ∏è",
                        suggestions: await this.generateSuggestions()
                    }
                };
            }

            // X·ª≠ l√Ω l·ªùi ch√†o
            if (messageType === 'greeting') {
                const randomWelcome = this.welcomeMessages[Math.floor(Math.random() * this.welcomeMessages.length)];
                return {
                    success: true,
                    data: {
                        type: 'greeting',
                        message: randomWelcome,
                        suggestions: await this.generateSuggestions()
                    }
                };
            }

            // X·ª≠ l√Ω l·ªùi t·∫°m bi·ªát
            if (messageType === 'goodbye') {
                return {
                    success: true,
                    data: {
                        type: 'goodbye',
                        message: "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• t∆∞ v·∫•n! Ch√∫c b·∫°n h·ªçc t·∫≠p hi·ªáu qu·∫£! üëãüá∞üá∑",
                        suggestions: []
                    }
                };
            }

            // X·ª≠ l√Ω c√¢u h·ªèi - t√¨m FAQ ph√π h·ª£p
            const matchedFAQ = await this.findBestMatchingFAQ(message);
            const response = await this.generateFAQResponse(matchedFAQ);

            return {
                success: true,
                data: response
            };

        } catch (error) {
            console.error('‚ùå Error in handleMessage:', error);
            return {
                success: false,
                error: 'Internal server error',
                data: {
                    type: 'error',
                    message: "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau! üòì",
                    suggestions: await this.generateSuggestions()
                }
            };
        }
    }

    // Method ƒë·ªÉ l·∫•y FAQ theo category
    async getFAQsByCategory(category) {
        try {
            let faqs = [];
            
            try {
                faqs = await FAQ.find({ 
                    category: category, 
                    isActive: true 
                }).sort({ priority: -1, viewCount: -1 });
            } catch (dbError) {
                // S·ª≠ d·ª•ng JSON data n·∫øu database kh√¥ng c√≥
                faqs = faqData.filter(faq => faq.category === category);
            }
            
            return faqs;
        } catch (error) {
            console.error('‚ùå Error in getFAQsByCategory:', error);
            return [];
        }
    }

    // Method ƒë·ªÉ l·∫•y FAQ ph·ªï bi·∫øn
    async getPopularFAQs(limit = 5) {
        try {
            let faqs = [];
            
            try {
                faqs = await FAQ.find({ isActive: true })
                    .sort({ viewCount: -1, helpfulCount: -1 })
                    .limit(limit);
            } catch (dbError) {
                // S·ª≠ d·ª•ng JSON data n·∫øu database kh√¥ng c√≥
                faqs = faqData
                    .sort((a, b) => (b.viewCount || 0) - (a.viewCount || 0))
                    .slice(0, limit);
            }
            
            return faqs;
        } catch (error) {
            console.error('‚ùå Error in getPopularFAQs:', error);
            return [];
        }
    }
}

module.exports = new FAQChatbot();
